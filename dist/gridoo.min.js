!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n(require("handlebars/runtime"),require("jQuery")):"function"==typeof define&&define.amd?define(["handlebars.runtime","jQuery"],n):"object"==typeof exports?exports.Gridoo=n(require("handlebars/runtime"),require("jQuery")):e.Gridoo=n(e.Handlebars,e.jQuery)}("undefined"!=typeof self?self:this,function(e,n){return function(e){function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}var t={};return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},n.p="",n(n.s=11)}([function(n,t){n.exports=e},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(e){return e?"disabled":""};n.default=i},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(){}return Object.defineProperty(e,"PaginationData",{get:function(){return e.paginationData},enumerable:!0,configurable:!0}),e.CalculatePaginationData=function(n){var t={};t.pageIndex=n.pageIndex,t.pageSize=n.pageSize,t.pageSizes=n.pageSizes,t.totalCount=n.totalCount,t.noOfPages=Math.ceil(n.totalCount/n.pageSize);var i=(n.pageIndex-1)*n.pageSize,o=n.pageSize>n.totalCount?n.totalCount:n.pageSize;t.range={min:i+1,max:i+o},t.firstPageLinkDisabled=1===t.noOfPages||1===t.pageIndex,t.lastPageLinkDisabled=1===t.noOfPages||t.pageIndex===t.noOfPages,t.prevPageLinkDisabled=1===t.pageIndex||t.pageIndex-1<=0,t.nextPageLinkDisabled=t.noOfPages===t.pageIndex||t.pageIndex+1>=t.noOfPages,e.paginationData=t},e}();n.Pager=i},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(){}return e.GetColumnObject=function(e,n){if(null==e||null==n)return null;var t;return n.forEach(function(n){if(n.id===e)return void(t=n)}),t},e.SetOrder=function(e,n,t){if(null==e||null==t)return null;var i;return t.forEach(function(t){if(t.id===e)return t.order=n,void(i=t)}),i},e}();n.CommonUtil=i},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});!function(e){e.Up="Up",e.Down="Down"}(n.ScrollDirection||(n.ScrollDirection={}))},function(e,t){e.exports=n},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});!function(e){e.None="None",e.Asc="Asc",e.Desc="Desc"}(n.OrderDirection||(n.OrderDirection={}))},function(e,n,t){var i=t(0);e.exports=(i.default||i).template({1:function(e,n,t,i,o){var a,r,l=null!=n?n:e.nullContext||{},c=t.helperMissing,u=e.escapeExpression;return'                <tr>\r\n                    <td class="gui rv-parent" valign="top" data-filter-key="'+u((r=null!=(r=t.id||(null!=n?n.id:n))?r:c,"function"==typeof r?r.call(l,{name:"id",hash:{},data:o}):r))+'" data-filter-value="'+u((r=null!=(r=t.actualValue||(null!=n?n.actualValue:n))?r:c,"function"==typeof r?r.call(l,{name:"actualValue",hash:{},data:o}):r))+'">\r\n                        <span>'+u((r=null!=(r=t.columnName||(null!=n?n.columnName:n))?r:c,"function"==typeof r?r.call(l,{name:"columnName",hash:{},data:o}):r))+"</span>\r\n"+(null!=(a=t.if.call(l,null!=n?n.filterable:n,{name:"if",hash:{},fn:e.program(2,o,0),inverse:e.noop,data:o}))?a:"")+"                    </td>\r\n                    <td>"+(null!=(r=null!=(r=t.columnValue||(null!=n?n.columnValue:n))?r:c,a="function"==typeof r?r.call(l,{name:"columnValue",hash:{},data:o}):r)?a:"")+"</td>\r\n                </tr>\r\n"},2:function(e,n,t,i,o){return'                        <span class="gui m-l-5 rv-child gui-caption" >\r\n                            <i class="gui gui-icon gui-icon-add hover m-l-5 cursor-pointer addFilter"></i>\r\n                            <i class="gui gui-icon gui-icon-minus hover m-l-5 cursor-pointer removeFilter"></i>\r\n                        </span>\r\n'},compiler:[7,">= 4.0.0"],main:function(e,n,t,i,o){var a,r,l=null!=n?n:e.nullContext||{};return'<tr class="gui gui-hidden detailsRow">\r\n    <td colspan="'+e.escapeExpression((r=null!=(r=t.length||(null!=n?n.length:n))?r:t.helperMissing,"function"==typeof r?r.call(l,{name:"length",hash:{},data:o}):r))+'">\r\n        <table class="gui very compact selectable celled table detailsTable m-l-37 p-5" style="width: auto;" >\r\n            <tbody>\r\n'+(null!=(a=t.each.call(l,null!=n?n.mainRowColArray:n,{name:"each",hash:{},fn:e.program(1,o,0),inverse:e.noop,data:o}))?a:"")+"            </tbody>\r\n        </table>\r\n    </td>\r\n</tr>"},useData:!0})},function(e,n,t){function i(e){return e&&(e.__esModule?e.default:e)}var o=t(0);e.exports=(o.default||o).template({1:function(e,n,o,a,r,l,c){var u,s=e.escapeExpression;return"        <option "+s(i(t(26)).call(null!=n?n:e.nullContext||{},null!=(u=null!=c[1]?c[1].paginationData:c[1])?u.pageSize:u,n,{name:"Selected",hash:{},data:r}))+">"+s(e.lambda(n,n))+"</option>\r\n"},compiler:[7,">= 4.0.0"],main:function(e,n,o,a,r,l,c){var u,s=null!=n?n:e.nullContext||{},d=e.escapeExpression,p=e.lambda;return'<div data-role="pager" class="gui left gui-subheading-2 col-md-6 text-left m-0">\r\n    <span class="gui mini compact ">\r\n        <a class="gui mini compact firstLink" aria-hidden="true" '+d(i(t(1)).call(s,null!=(u=null!=n?n.paginationData:n)?u.firstPageLinkDisabled:u,{name:"Disabled",hash:{},data:r}))+'\r\n            aria-label="Go to the first page" title="Go to the first page" data-page="1" tabindex="-1">\r\n            <i class="gui-icon gui-icon-previous"></i>\r\n        </a>\r\n        <a class="gui mini compact prevLink" aria-hidden="true" '+d(i(t(1)).call(s,null!=(u=null!=n?n.paginationData:n)?u.prevPageLinkDisabled:u,{name:"Disabled",hash:{},data:r}))+'\r\n            aria-label="Go to the previous page" title="Go to the previous page" data-page="'+d(i(t(9)).call(s,null!=(u=null!=n?n.paginationData:n)?u.pageIndex:u,"-",1,{name:"math",hash:{},data:r}))+'"\r\n            tabindex="-1">\r\n            <i class="gui-icon gui-icon-chevron-left"></i>\r\n            Prev\r\n        </a>\r\n    </span>\r\n    <span class="gui pager-input-container input">\r\n        <span class="gui m-r-5"> Page </span>\r\n        <input class="gui pager-input w-25 p-0 m-r-5" aria-label="1" value="'+d(p(null!=(u=null!=n?n.paginationData:n)?u.pageIndex:u,n))+'" type="text" placeholder="Page Number ...">\r\n        <span class="no-of-pages-scan" data-number-of-pages="'+d(p(null!=(u=null!=n?n.paginationData:n)?u.noOfPages:u,n))+'"> of '+d(p(null!=(u=null!=n?n.paginationData:n)?u.noOfPages:u,n))+'</span>\r\n    </span>\r\n    <span class="gui mini compact ">\r\n        <a class="gui mini compact nextLink" aria-hidden="true" '+d(i(t(1)).call(s,null!=(u=null!=n?n.paginationData:n)?u.nextPageLinkDisabled:u,{name:"Disabled",hash:{},data:r}))+'\r\n            aria-label="Go to the next page" title="Go to the next page" data-page="'+d(i(t(9)).call(s,null!=(u=null!=n?n.paginationData:n)?u.pageIndex:u,"+",1,{name:"math",hash:{},data:r}))+'" tabindex="-1">\r\n            Next\r\n            <i class="gui-icon gui-icon-chevron-right"></i>\r\n        </a>\r\n        <a class="gui mini compact lastLink" aria-hidden="true" '+d(i(t(1)).call(s,null!=(u=null!=n?n.paginationData:n)?u.lastPageLinkDisabled:u,{name:"Disabled",hash:{},data:r}))+'\r\n            aria-label="Go to the last page" title="Go to the last page" data-page="'+d(p(null!=(u=null!=n?n.paginationData:n)?u.noOFpages:u,n))+'" tabindex="-1">\r\n            <i class="gui-icon gui-icon-next"></i>\r\n        </a>\r\n    </span>\r\n</div>\r\n<div class="col-md-6 gui gui-subheading-2 right text-right m-0">\r\n    <span>Rows Per Page</span>\r\n    <select class="gui pageSizeSelector">\r\n'+(null!=(u=o.each.call(s,null!=(u=null!=n?n.paginationData:n)?u.pageSizes:u,{name:"each",hash:{},fn:e.program(1,r,0,l,c),inverse:e.noop,data:r}))?u:"")+'    </select>\r\n    <span class="gui m-l-10">'+d(p(null!=(u=null!=(u=null!=n?n.paginationData:n)?u.range:u)?u.min:u,n))+" - "+d(p(null!=(u=null!=(u=null!=n?n.paginationData:n)?u.range:u)?u.max:u,n))+" of "+d(p(null!=(u=null!=n?n.paginationData:n)?u.totalCount:u,n))+' items</span>\r\n</div>\r\n<div class="gui clear"></div>'},useData:!0,useDepths:!0})},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(e,n,t,i){return{"+":e+t,"-":e-t,"*":e*t,"/":e/t,"%":e%t}[n]};n.default=i},function(e,n,t){var i=t(0);e.exports=(i.default||i).template({1:function(e,n,i,o,a){var r,l=e.lambda,c=e.escapeExpression;return'<tr class="mainRow">\r\n    <td class="expansionArrows" style="display:flex;justify-content:center;">\r\n        <i class="gui gui-icon gui-icon-chevron-down expandDetailsRowIcon cursor-pointer" aria-hidden="true"></i>\r\n        <i class="gui gui-icon gui-icon-chevron-up CollapseDetailsRowIcon cursor-pointer gui-hidden" aria-hidden="true"></i>\r\n    </td>\r\n    <td>\r\n        <input type="checkbox" data-value="'+c(l(null!=n?n.rowData:n,n))+'" value="'+c(l(null!=n?n.keyColumn:n,n))+'" class="select-key-checkbox">\r\n    </td>\r\n'+(null!=(r=i.each.call(null!=n?n:e.nullContext||{},null!=n?n.mainRowColArray:n,{name:"each",hash:{},fn:e.program(2,a,0),inverse:e.noop,data:a}))?r:"")+"</tr>\r\n"+(null!=(r=e.invokePartial(t(7),n,{name:"grid-details-row",data:a,helpers:i,partials:o,decorators:e.decorators}))?r:"")+" "},2:function(e,n,t,i,o){var a;return"    <td>"+(null!=(a=e.lambda(null!=n?n.columnValue:n,n))?a:"")+"</td>\r\n"},compiler:[7,">= 4.0.0"],main:function(e,n,t,i,o){var a;return null!=(a=t.each.call(null!=n?n:e.nullContext||{},null!=n?n.mainRowArray:n,{name:"each",hash:{},fn:e.program(1,o,0),inverse:e.noop,data:o}))?a:""},usePartial:!0,useData:!0})},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=t(5),o=t(12),a=t(13),r=t(14),l=t(2),c=t(15),u=t(16),s=t(18),d=t(19),p=t(20),g=t(21),f=t(24),h=t(25),m=function(){function e(e){var n=this;this.bindData=function(e,t){var i=n.configStore.Options.chunkSize+n.getInitialRowCount();i=i>e.length?e.length-1:i,l.Pager.CalculatePaginationData(t);var o=n.gridTemplateService.GetFirstTemplate(e,0,i);n.configStore.Options.containerElement.innerHTML=o;var a=new g.ScrollHandler(n.configStore,n.gridTemplateService);a.RegisterDomHandler(),n.handleChain.push({handler:a,name:s.HandlerNames.Scroll})},this.bindManageColums=function(e){var t=n.gridTemplateService.GetManageColumnsHtml(),o=i(e||n.configStore.Options.manageColSettingsContainer||n.configStore.Options.containerElement);n.toggleHandler=new f.ToggleColumnHandler(n.configStore,i(n.configStore.Options.containerElement));var r=new a.ColSettingsHandler(i(o),n.configStore,n.toggleHandler);o.find(".col-settings-container").html(t),r.RegisterDomHandler(),i(window).resize(function(){r.onResize()}),i(document).click(function(e){r.onDocumentClick(e),e.stopPropagation()})},this.applyColumnConfig=function(e){n.toggleHandler.applyColumnConfig(e)},this.getInitialRowCount=function(){return 25},this.InitHandlers=function(){var e=i(n.configStore.Options.containerElement);n.handleChain=[],n.handleChain.push({handler:new c.DetailsRowHandler(e),name:s.HandlerNames.DetailsRow}),n.handleChain.push({handler:new u.FilterClickHandler(n.configStore,e),name:s.HandlerNames.FilterAction}),n.handleChain.push({handler:new d.HeaderClickHandler(n.configStore,e),name:s.HandlerNames.HeaderClick}),n.handleChain.push({handler:new p.PageSearchHandler(n.configStore,e),name:s.HandlerNames.PageSearch});n.handleChain.push({handler:new r.SelectEventHandler(n.configStore,e,n.gridTemplateService),name:s.HandlerNames.ColSettings}),n.handleChain.forEach(function(e){e.handler.RegisterDomHandler()}),i(window).resize(function(){n.handleChain.forEach(function(e){e.handler.onResize()})}),i(document).click(function(e){n.handleChain.forEach(function(n){n.handler.onDocumentClick(e)}),e.stopPropagation()})},this.configStore=new o.ConfigStore(e),this.gridTemplateService=new h.GridTemplateService(this.configStore),this.InitHandlers()}return e}();n.Grid=m},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e){var n=this;if(this.defaultGridOptions={chunkSize:5,columns:[],containerElement:null,manageColSettingsContainer:null,hybridFunction:function(e,n){return"true"},keyColumn:"",onColSettingsChange:function(e){},onClickFilter:function(e,n,t){},onClickHeader:function(e,n){},onPageSearch:function(e,n){},onSelect:function(e){}},this.SetHiddenOnConfig=function(e,t){for(var i=0,o=n.Options.columns;i<o.length;i++){var a=o[i];if(void 0===t)a.hidden=e;else if(a.id===t){a.hidden=e;break}}},this.extendOptions=function(e){return n.options=jQuery.extend({},n.defaultGridOptions,e)},this.extendOptions(e),null===e.containerElement)throw new Error("Please Provide a valid container Element object")}return Object.defineProperty(e.prototype,"Options",{get:function(){return this.options},set:function(e){this.options=e},enumerable:!0,configurable:!0}),e}();n.ConfigStore=i},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,n,t){this.parentElement=e,this.configStore=n,this.toggleColumnHandler=t}return e.prototype.onResize=function(){},e.prototype.onDocumentClick=function(e){var n=jQuery(e.target);n.is(".col-settings-trigger")||n.parents().is(".col-settings-container")||jQuery(".col-settings-container").slideUp()},e.prototype.RegisterDomHandler=function(){var e=this;this.parentElement.on("click",".col-settings-trigger",function(n){var t=(jQuery(n.target),e.parentElement.find(".col-settings-container"));e.onResize(),t.slideToggle(),n.stopPropagation()}),this.parentElement.on("keyup",".col-settings-header .col-settings-filter",function(n){var t=jQuery(n.target),i=t.val().toString().toLowerCase();console.log(i),e.parentElement.find(".col-settings-table table tbody tr").each(function(e,n){jQuery(n).show(),-1===jQuery(n).attr("data-header-id").toLowerCase().indexOf(i)&&jQuery(n).hide()}),n.stopPropagation()}),this.parentElement.on("click",".show-all-column",function(n){e.parentElement.find(".col-settings-hidden-checkbox").each(function(e,n){jQuery(n).prop("checked",!0)}),e.toggleColumnHandler.showAllColumns(),e.configStore.Options.onColSettingsChange(e.configStore.Options.columns),n.stopPropagation()}),this.parentElement.on("click",".hide-all-column",function(n){e.parentElement.find(".col-settings-hidden-checkbox").each(function(e,n){jQuery(n).prop("checked",!1)}),e.toggleColumnHandler.hideAllColumns(),e.configStore.Options.onColSettingsChange(e.configStore.Options.columns),n.stopPropagation()}),this.parentElement.on("click",".col-settings-hidden-checkbox",function(n){if(void 0!==n.originalEvent){var t=jQuery(n.target),i=t.val().toString();t.is(":checked")?e.toggleColumnHandler.showColumn(i):e.toggleColumnHandler.hideColumn(i)}e.configStore.Options.onColSettingsChange(e.configStore.Options.columns),n.stopPropagation()})},e}();n.ColSettingsHandler=i},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,n,t){this.configStore=e,this.parentElement=n,this.gridTemplateService=t}return e.prototype.RegisterDomHandler=function(){var e=this;this.parentElement.on("change",".select-key-checkbox",function(n){var t=jQuery(n.target),i=t.data("value"),o=t.is(":checked");o?t.parents(".mainRow").addClass("active"):t.parents(".mainRow").removeClass("active"),void 0!==n.originalEvent&&(e.configStore.Options.onSelect([i],o),n.stopPropagation())}),this.parentElement.on("change",".select-all-checkbox",function(n){var t=jQuery(n.target),i=t.is(":checked");e.configStore.Options.onSelect(e.gridTemplateService.Data,i),e.parentElement.find(".select-key-checkbox").prop("checked",i),i?e.parentElement.find(".mainTable .mainRow").addClass("active"):e.parentElement.find(".mainTable .mainRow").removeClass("active"),n.stopPropagation()})},e.prototype.onResize=function(){},e.prototype.onDocumentClick=function(e){},e}();n.SelectEventHandler=i},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e){var n=this;this.RegisterDomHandler=function(){n.parentElement.on("click",".table-body .expansionArrows i",function(e){var n=jQuery(e.target),t=n.closest("tr").next();n.hide(),n.siblings("i").show();n.hasClass("expandDetailsRowIcon")?t.show(200):t.hide(200),e.stopPropagation()})},this.parentElement=e}return e.prototype.onResize=function(){},e.prototype.onDocumentClick=function(e){},e}();n.DetailsRowHandler=i},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=t(3),o=t(17),a=function(){function e(e,n){var t=this;this.RegisterDomHandler=function(){t.parentElement.on("click",".table-body .detailsRow .detailsTable td i",function(e){var n=jQuery(e.target),a=n.parents("td"),r=a.attr("data-filter-key"),l=a.attr("data-filter-value"),c=i.CommonUtil.GetColumnObject(r,t.configStore.Options.columns);if(void 0!==c&&null!==c&&c.filterable){var u=o.FilterActionType.Add;n.hasClass("removeFilter")&&(u=o.FilterActionType.Minus),t.configStore.Options.onClickFilter(r,l,u),e.stopPropagation()}})},this.configStore=e,this.parentElement=n}return e.prototype.onResize=function(){},e.prototype.onDocumentClick=function(e){},e}();n.FilterClickHandler=a},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});!function(e){e.Add="Add",e.Minus="Minus"}(n.FilterActionType||(n.FilterActionType={}))},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});!function(e){e[e.FilterAction=0]="FilterAction",e[e.HeaderClick=1]="HeaderClick",e[e.Scroll=2]="Scroll",e[e.PageSearch=3]="PageSearch",e[e.DetailsRow=4]="DetailsRow",e[e.ToggleColumn=5]="ToggleColumn",e[e.ColSettings=6]="ColSettings"}(n.HandlerNames||(n.HandlerNames={}))},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=t(3),o=t(6),a=function(){function e(e,n){var t=this;this.RegisterDomHandler=function(){t.parentElement.on("click",".table-header th",function(e){var n=jQuery(e.target).closest("th"),a=n.attr("data-header-id"),r=i.CommonUtil.GetColumnObject(a,t.configStore.Options.columns);if(void 0!==r&&null!==r&&r.sortable){var l,c=n.find("i"),u=c.first(),s=c.last();c.is(":visible")?u.is(":visible")?(l=o.OrderDirection.Desc,u.hide(),s.show()):(l=o.OrderDirection.Asc,s.hide(),u.show()):(l=o.OrderDirection.Asc,u.show()),i.CommonUtil.SetOrder(a,l,t.configStore.Options.columns),t.configStore.Options.onClickHeader(a,l),e.stopPropagation()}})},this.configStore=e,this.parentElement=n}return e.prototype.onResize=function(){},e.prototype.onDocumentClick=function(e){},e}();n.HeaderClickHandler=a},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=t(5),o=t(2),a=function(){function e(e,n){var t=this;this.RegisterDomHandler=function(){t.parentElement.on("click",".table-footer .firstLink",function(e){t.configStore.options.onPageSearch(o.Pager.PaginationData.pageSize,1),e.stopPropagation()}),t.parentElement.on("click",".table-footer .nextLink",function(e){t.configStore.options.onPageSearch(o.Pager.PaginationData.pageSize,o.Pager.PaginationData.pageIndex+1),e.stopPropagation()}),t.parentElement.on("click",".table-footer .prevLink",function(e){t.configStore.options.onPageSearch(o.Pager.PaginationData.pageSize,o.Pager.PaginationData.pageIndex-1),e.stopPropagation()}),t.parentElement.on("click",".table-footer .lastLink",function(e){t.configStore.options.onPageSearch(o.Pager.PaginationData.pageSize,o.Pager.PaginationData.noOfPages),e.stopPropagation()}),t.parentElement.on("change",".table-footer .pageSizeSelector",function(e){var n=+i(e.target).val().toString();t.configStore.options.onPageSearch(n,o.Pager.PaginationData.pageIndex),e.stopPropagation()}),t.parentElement.on("keypress",".table-footer .pager-input",function(e){var n=i(e.target),a=o.Pager.PaginationData;if(13===e.keyCode){var r=+n.val().toString();isNaN(r)||r>a.noOfPages||r<1?n.val(a.pageIndex):t.configStore.options.onPageSearch(a.pageSize,r)}e.stopPropagation()})},this.configStore=e,this.parentElement=n}return e.prototype.onResize=function(){},e.prototype.onDocumentClick=function(){},e}();n.PageSearchHandler=a},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=t(4),o=t(22),a=function(){function e(e,n){var t=this;this.rendering=!1,this.RegisterDomHandler=function(){t.parentElement.find(".table-body").on("scroll",function(e){var n=t.parentElement.find(".table-body");void 0!==t.leftOffset&&null!==t.leftOffset||(t.leftOffset=t.parentElement.find(".table-header").offset().left),t.parentElement.find(".table-header").offset({left:t.leftOffset+-1*n.scrollLeft(),top:0});var o=n.find(".mainTable").height();if(t.Virtualizer.TableHeight=o,t.Virtualizer.ScrollContainerHeight=n.height(),e.preventDefault(),t.rendering)return void e.stopPropagation();var a=n.scrollTop(),r=t.Virtualizer.GetIndexCounterForScroll(a);switch(r.direction){case i.ScrollDirection.Down:r.renderingRequired&&(t.rendering=!0,n.find(".mainTable .mainTableBody").append(t.gridTemplateService.GetRowsHtml(r.startIndex,r.endIndex)),n.find(".mainTable .mainTableBody > tr").slice(0,2*t.configStore.options.chunkSize).remove(),t.rendering=!1);break;case i.ScrollDirection.Up:r.renderingRequired&&(t.rendering=!0,n.find(".mainTable .mainTableBody").prepend(t.gridTemplateService.GetRowsHtml(r.startIndex,r.endIndex)),n.find(".mainTable .mainTableBody > tr").slice(-2*t.configStore.options.chunkSize).remove(),t.rendering=!1)}e.stopPropagation()})},this.configStore=e,this.parentElement=jQuery(this.configStore.Options.containerElement),this.gridTemplateService=n}return e.prototype.onResize=function(){this.leftOffset=this.parentElement.find(".table-header").offset().left},e.prototype.onDocumentClick=function(e){},Object.defineProperty(e.prototype,"Virtualizer",{get:function(){return null===this.virtualizer||void 0===this.virtualizer?this.virtualizer=new o.Virtualizer(this.configStore.options.chunkSize,25,this.gridTemplateService.DataLength):this.virtualizer},enumerable:!0,configurable:!0}),e}();n.ScrollHandler=a},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=t(23),o=t(4),a=function(){function e(e,n,t){var a=this;this.GetIndexCounterForScroll=function(e){var n=i.GetDefaultIndexCounter(a.chunkSize,a.initialRowCount);switch(n.direction=a.GetScrollDirection(e),n.direction){case o.ScrollDirection.Down:if(a.currentIndexCounter.lastIndex>=a.length-1)n.endReached=!0;else{n.endReached=!1;var t=e+a.ScrollContainerHeight-.8*a.TableHeight;t>0&&(n.renderingRequired=!0,n=a.PopulateIndexCounterForDown(n))}break;case o.ScrollDirection.Up:if(a.currentIndexCounter.firstIndex<=0)n.endReached=!0;else{n.endReached=!1;var t=e-.1*(a.TableHeight-a.ScrollContainerHeight);t<0&&(n.renderingRequired=!0,n=a.PopulateIndexCounterForUp(n))}}return n.renderingRequired&&(a.currentIndexCounter=n),a.lastScrollPosition=e,n},this.Print=function(e,n){console.log(" ******************************************************************* "),console.log(" Scroll Position - "+a.lastScrollPosition),console.log(" Length  - "+a.length),console.log(" ------------  CURRENT ---------- "),Object.keys(n).forEach(function(e,t){console.log(e+" - "+n[e])}),console.log(" ------------  NEW ---------- "),Object.keys(e).forEach(function(n,t){console.log(n+" - "+e[n])}),console.log(" ******************************************************************* ")},this.PopulateIndexCounterForDown=function(e){return e.startIndex=a.currentIndexCounter.lastIndex+1,e.endIndex=a.currentIndexCounter.lastIndex+a.chunkSize>a.length-1?a.length-1:a.currentIndexCounter.lastIndex+a.chunkSize,e.firstIndex=a.currentIndexCounter.firstIndex+a.chunkSize,e.lastIndex=e.endIndex,e},this.PopulateIndexCounterForUp=function(e){return e.startIndex=a.currentIndexCounter.firstIndex-a.chunkSize<0?0:a.currentIndexCounter.firstIndex-a.chunkSize,e.endIndex=a.currentIndexCounter.firstIndex-1,e.firstIndex=e.startIndex,e.lastIndex=a.currentIndexCounter.lastIndex-a.chunkSize,e},this.GetScrollDirection=function(e){return a.lastScrollPosition<e?o.ScrollDirection.Down:o.ScrollDirection.Up},this.lastScrollPosition=0,this.length=t,this.chunkSize=e,this.initialRowCount=n,this.currentIndexCounter=i.GetDefaultIndexCounter(n,e)}return Object.defineProperty(e.prototype,"ScrollContainerHeight",{get:function(){return this.scrollContainerHeight},set:function(e){this.scrollContainerHeight=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"TableHeight",{get:function(){return this.tableHeight},set:function(e){this.tableHeight=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"InitialRowCount",{get:function(){return this.initialRowCount},set:function(e){this.initialRowCount=e},enumerable:!0,configurable:!0}),e}();n.Virtualizer=a},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=t(4);n.GetDefaultIndexCounter=function(e,n){return{startIndex:e-1,endIndex:e+n-1,firstIndex:0,lastIndex:e-1,direction:i.ScrollDirection.Down,endReached:!1,renderingRequired:!1}}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i,o=t(3);!function(e){e[e.Show=0]="Show",e[e.Hide=1]="Hide",e[e.ShowAll=2]="ShowAll",e[e.HideAll=3]="HideAll"}(i||(i={}));var a=function(){function e(e,n){var t=this;this.showAllColumns=function(){t.SetColWidth(".table-header .headerColGroup col",i.ShowAll),t.SetColWidth(".table-body .bodyColGroup col",i.ShowAll),t.configStore.SetHiddenOnConfig(!1)},this.showColumn=function(e){t.SetColWidth(".table-header .headerColGroup col",i.Show,e),t.SetColWidth(".table-body .bodyColGroup col",i.Show,e),t.configStore.SetHiddenOnConfig(!1,e)},this.hideColumn=function(e){t.SetColWidth(".table-header .headerColGroup col",i.Hide,e),t.SetColWidth(".table-body .bodyColGroup col",i.Hide,e),t.configStore.SetHiddenOnConfig(!0,e)},this.hideAllColumns=function(){t.SetColWidth(".table-header .headerColGroup col",i.HideAll),t.SetColWidth(".table-body .bodyColGroup col",i.HideAll),t.configStore.SetHiddenOnConfig(!0)},this.applyColumnConfig=function(e){for(var n=0,i=e;n<i.length;n++){var o=i[n];o.hidden?t.hideColumn(o.id):t.showColumn(o.id)}},this.SetColWidth=function(e,n,a){t.parentElement.find(e).each(function(e,r){var l=0,c=jQuery(r),u=c.attr("data-header-id");if(void 0!==u){var s=void 0;if([i.Show,i.Hide].indexOf(n)>-1&&u===a)return n===i.Show&&(s=o.CommonUtil.GetColumnObject(u,t.configStore.options.columns),l=s.width),void c.width(l+"px");[i.ShowAll,i.HideAll].indexOf(n)>-1&&(n===i.ShowAll&&(s=o.CommonUtil.GetColumnObject(u,t.configStore.options.columns),l=s.width),c.width(l+"px"))}})},this.configStore=e,this.parentElement=n}return e}();n.ToggleColumnHandler=a},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=t(7),o=t(8),a=t(10),r=t(27),l=t(29),c=t(2),u=function(){function e(e){var n=this;this.GetFirstTemplate=function(e,t,i){n.data=e;var o=n.GetRowsHtml(t,i);return n.templateFunctionForGrid({columns:n.configStore.Options.columns,mainRowArray:o,paginationData:c.Pager.PaginationData})},this.GetManageColumnsHtml=function(){return n.templateFunctionForManageCol({columns:n.configStore.Options.columns})},this.GetRowsHtml=function(e,t){for(var i=[],o=(n.configStore.Options.columns.length,e);o<=t;o++){for(var a=n.data[o],r=[],l=0,c=n.configStore.Options.columns;l<c.length;l++){var u=c[l],s=a[u.id];u.renderHybrid&&(s=n.configStore.Options.hybridFunction(u,a)),r.push({columnValue:s,hidden:u.hidden,actualValue:a[u.id],columnName:u.name,id:u.id,filterable:u.filterable})}i.push({rowData:JSON.stringify(a),keyColumn:a[n.configStore.Options.keyColumn],mainRowColArray:r,length:n.configStore.Options.columns.length})}return i},this.configStore=e,this.templateFunctionForGrid=l,this.templateFunctionForMainRow=a,this.templateFunctionForDetailsRow=i,this.templateFunctionForFooter=o,this.templateFunctionForManageCol=r}return Object.defineProperty(e.prototype,"Data",{get:function(){return this.data},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"DataLength",{get:function(){return this.data.length},enumerable:!0,configurable:!0}),e}();n.GridTemplateService=u},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(e,n){return e===n?"selected":""};n.default=i},function(e,n,t){function i(e){return e&&(e.__esModule?e.default:e)}var o=t(0);e.exports=(o.default||o).template({1:function(e,n,o,a,r){var l=e.lambda,c=e.escapeExpression;return'                <tr data-header-id="'+c(l(null!=n?n.name:n,n))+'">\r\n                    <td class="gui cursor-pointer">\r\n                        <label class="gui cursor-pointer">\r\n                            <input type="checkbox" class="col-settings-hidden-checkbox gui m-r-10" value="'+c(l(null!=n?n.id:n,n))+'" '+c(i(t(28)).call(null!=n?n:e.nullContext||{},null!=n?n.hidden:n,{name:"Checked",hash:{},data:r}))+">\r\n                            "+c(l(null!=n?n.name:n,n))+"\r\n                        </label>\r\n                    </td>\r\n                </tr>\r\n"},compiler:[7,">= 4.0.0"],main:function(e,n,t,i,o){var a;return'<div class="gui of-hidden p-10 min-w-50 w-auto fluid-h" >\r\n    <div class="col-settings-header" style="width: 100%">\r\n        <div class="gui mini fluid icon input">\r\n            <input class="col-settings-filter" type="text" placeholder="Search filter...">\r\n            <i class="search icon"></i>\r\n        </div>\r\n        <div class="gui m-t-10">\r\n            <a class="gui left show-all-column">Show All</a>\r\n            <a class="gui right hide-all-column">Hide All</a>\r\n        </div>\r\n        <div class="gui clear"></div>\r\n    </div>\r\n    <div class="gui clear"></div>\r\n    <div class="col-settings-table gui fluid h-95 of-auto p-5 m-t-10" >\r\n        <table class="gui small very border-less selectable basic compact table">\r\n            <tbody>\r\n'+(null!=(a=t.each.call(null!=n?n:e.nullContext||{},null!=n?n.columns:n,{name:"each",hash:{},fn:e.program(1,o,0),inverse:e.noop,data:o}))?a:"")+"            </tbody>\r\n        </table>\r\n    </div>\r\n</div>"},useData:!0})},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(e){return e?"":"checked"};n.default=i},function(e,n,t){function i(e){return e&&(e.__esModule?e.default:e)}var o=t(0);e.exports=(o.default||o).template({1:function(e,n,o,a,r){var l;return"                    "+(null!=(l=i(t(30)).call(null!=n?n:e.nullContext||{},n,{name:"Column",hash:{},data:r}))?l:"")+"\n"},3:function(e,n,t,i,o){var a,r=e.lambda,l=e.escapeExpression;return'                        <th class="gui cursor-pointer" id="header-'+l(r(null!=n?n.id:n,n))+'" data-header-id="'+l(r(null!=n?n.id:n,n))+'">\n                            <span class="gui sub header">'+l(r(null!=n?n.name:n,n))+"</span>\n"+(null!=(a=t.if.call(null!=n?n:e.nullContext||{},null!=n?n.sortable:n,{name:"if",hash:{},fn:e.program(4,o,0),inverse:e.noop,data:o}))?a:"")+"                        </th>\n"},4:function(e,n,o,a,r){var l;return"                                "+(null!=(l=i(t(31)).call(null!=n?n:e.nullContext||{},null!=n?n.order:n,{name:"Ordered",hash:{},data:r}))?l:"")+"\n"},compiler:[7,">= 4.0.0"],main:function(e,n,i,o,a){var r,l=null!=n?n:e.nullContext||{};return'<style>\n    .inner-container {\n        height: 100%;\n        overflow: hidden;\n        width: 100%;\n        display: flex;\n        flex-direction: column;\n    }\n\n    .table-header {\n        position: relative;\n        top:0 !important;\n    }\n\n    .table-body {\n        overflow: auto;\n        flex: 5;\n        padding-right: 17px;\n    }\n    .table-footer{\n        height: 35px;\n        padding: 5px;\n    }\n    .table-footer .footer-middle{\n        display: flex;\n    }\n    .table-footer .footer-right{\n        display: flex;\n    }\n    .margin-auto{\n        margin: auto !important;\n    }\n    .remove-label:hover{\n        text-decoration: line-through;\n        cursor: pointer;\n    }\n    .border-less tr td,.border-less { border: 0px !important; }\n    .cursor-pointer{\n        cursor: pointer;\n    }\n    .ui.supercompact.icon.button, .ui.supercompact.icon.buttons .button {\n        padding: .3em .3em .3em .3em !important;\n    }\n</style>\n<div class="inner-container gui fluid container" style="padding:0%;">\n    <div class="table-header">\n        <table id="headertable" class="gui basic large compact fixed single line table">\n            <colgroup class="headerColGroup">\n                <col style="width:40px;" />\n                <col style="width:40px;" />\n'+(null!=(r=i.each.call(l,null!=n?n.columns:n,{name:"each",hash:{},fn:e.program(1,a,0),inverse:e.noop,data:a}))?r:"")+'            </colgroup>\n            <thead>\n                <tr>\n                    <th></th>\n                    <th><input type="checkbox" class="select-all-checkbox"></th>\n'+(null!=(r=i.each.call(l,null!=n?n.columns:n,{name:"each",hash:{},fn:e.program(3,a,0),inverse:e.noop,data:a}))?r:"")+'                </tr>\n            </thead>\n        </table>\n    </div>\n    <div class="table-body">\n        <table class="gui basic large compact fixed selectable single line table mainTable">\n            <colgroup class="bodyColGroup">\n                <col style="width:40px;" /> \n                <col style="width:40px;" />\n'+(null!=(r=i.each.call(l,null!=n?n.columns:n,{name:"each",hash:{},fn:e.program(1,a,0),inverse:e.noop,data:a}))?r:"")+'            </colgroup>\n            <tbody class="mainTableBody">\n'+(null!=(r=e.invokePartial(t(10),n,{name:"grid-main-row",data:a,indent:"                ",helpers:i,partials:o,decorators:e.decorators}))?r:"")+'            </tbody>\n        </table>\n    </div>\n    <div class="table-footer gui h-auto fluid-w basic curved row p-5 m-0">\n'+(null!=(r=e.invokePartial(t(8),n,{name:"grid-footer",data:a,indent:"           ",helpers:i,partials:o,decorators:e.decorators}))?r:"")+"    </div>\n</div>"},usePartial:!0,useData:!0})},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(e){return'<col style="width : '+(e.hidden?0:e.width)+'px;"data-header-id="'+e.id+'" />'};n.default=i},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=t(6),o=function(e){return e===i.OrderDirection.Asc?'<i class="gui gui-icon gui-icon-arrow-up" ></i> ':e===i.OrderDirection.Desc?'<i class="gui gui-icon gui-icon-arrow-down" ></i> ':'<i class="gui gui-icon gui-icon-arrow-up gui-hidden" aria-hidden="true" ></i> <i class="gui gui-icon gui-icon-arrow-down gui-hidden" aria-hidden="true" ></i>'};n.default=o}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,