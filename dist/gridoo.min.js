!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n(require("handlebars/runtime"),require("jQuery")):"function"==typeof define&&define.amd?define(["handlebars.runtime","jQuery"],n):"object"==typeof exports?exports.Gridoo=n(require("handlebars/runtime"),require("jQuery")):e.Gridoo=n(e.Handlebars,e.jQuery)}("undefined"!=typeof self?self:this,function(e,n){return function(e){function n(a){if(t[a])return t[a].exports;var i=t[a]={i:a,l:!1,exports:{}};return e[a].call(i.exports,i,i.exports,n),i.l=!0,i.exports}var t={};return n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:a})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},n.p="",n(n.s=10)}([function(n,t){n.exports=e},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=function(e){return e?"disabled":""};n.default=a},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=function(){function e(){}return Object.defineProperty(e,"PaginationData",{get:function(){return e.paginationData},enumerable:!0,configurable:!0}),e.CalculatePaginationData=function(n){var t={};t.pageIndex=n.pageIndex,t.pageSize=n.pageSize,t.pageSizes=n.pageSizes,t.totalCount=n.totalCount,t.noOfPages=Math.ceil(n.totalCount/n.pageSize);var a=(n.pageIndex-1)*n.pageSize,i=n.pageSize>n.totalCount?n.totalCount:n.pageSize;t.range={min:a+1,max:a+i},t.firstPageLinkDisabled=1===t.noOfPages||1===t.pageIndex,t.lastPageLinkDisabled=1===t.noOfPages||t.pageIndex===t.noOfPages,t.prevPageLinkDisabled=1===t.pageIndex||t.pageIndex-1<=0,t.nextPageLinkDisabled=t.noOfPages===t.pageIndex||t.pageIndex+1>=t.noOfPages,e.paginationData=t},e}();n.Pager=a},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=function(){function e(){}return e.GetColumnObject=function(e,n){if(null==e||null==n)return null;var t;return n.forEach(function(n){if(n.id===e)return void(t=n)}),t},e.SetOrder=function(e,n,t){if(null==e||null==t)return null;var a;return t.forEach(function(t){if(t.id===e)return t.order=n,void(a=t)}),a},e}();n.CommonUtil=a},function(e,t){e.exports=n},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});!function(e){e.None="None",e.Asc="Asc",e.Desc="Desc"}(n.GridOrderDirection||(n.GridOrderDirection={}))},function(e,n,t){var a=t(0);e.exports=(a.default||a).template({1:function(e,n,t,a,i){var o,l,r=null!=n?n:e.nullContext||{},s=t.helperMissing,c="function",u=e.escapeExpression;return'                <tr>\r\n                    <td class="gui rv-parent" valign="top" data-filter-type="'+u((l=null!=(l=t.type||(null!=n?n.type:n))?l:s,typeof l===c?l.call(r,{name:"type",hash:{},data:i}):l))+'" data-filter-key="'+u((l=null!=(l=t.id||(null!=n?n.id:n))?l:s,typeof l===c?l.call(r,{name:"id",hash:{},data:i}):l))+'" data-filter-value="'+u((l=null!=(l=t.actualValue||(null!=n?n.actualValue:n))?l:s,typeof l===c?l.call(r,{name:"actualValue",hash:{},data:i}):l))+'">\r\n                        <span>'+u((l=null!=(l=t.columnName||(null!=n?n.columnName:n))?l:s,typeof l===c?l.call(r,{name:"columnName",hash:{},data:i}):l))+"</span>\r\n"+(null!=(o=t.if.call(r,null!=n?n.filterable:n,{name:"if",hash:{},fn:e.program(2,i,0),inverse:e.noop,data:i}))?o:"")+"                    </td>\r\n                    <td>"+(null!=(l=null!=(l=t.columnValue||(null!=n?n.columnValue:n))?l:s,o=typeof l===c?l.call(r,{name:"columnValue",hash:{},data:i}):l)?o:"")+"</td>\r\n                </tr>\r\n"},2:function(e,n,t,a,i){return'                        <span class="gui m-l-5 rv-child gui-caption" >\r\n                            <i class="gui gui-icon gui-icon-add hover m-l-5 cursor-pointer addFilter"></i>\r\n                            <i class="gui gui-icon gui-icon-minus hover m-l-5 cursor-pointer removeFilter"></i>\r\n                        </span>\r\n'},compiler:[7,">= 4.0.0"],main:function(e,n,t,a,i){var o,l,r=null!=n?n:e.nullContext||{};return'<tr class="gui gui-hidden detailsRow">\r\n    <td colspan="'+e.escapeExpression((l=null!=(l=t.length||(null!=n?n.length:n))?l:t.helperMissing,"function"==typeof l?l.call(r,{name:"length",hash:{},data:i}):l))+'">\r\n        <table class="gui very compact selectable celled table detailsTable m-l-37 p-5" style="width: auto;" >\r\n            <tbody>\r\n'+(null!=(o=t.each.call(r,null!=n?n.mainRowColArray:n,{name:"each",hash:{},fn:e.program(1,i,0),inverse:e.noop,data:i}))?o:"")+"            </tbody>\r\n        </table>\r\n    </td>\r\n</tr>"},useData:!0})},function(e,n,t){function a(e){return e&&(e.__esModule?e.default:e)}var i=t(0);e.exports=(i.default||i).template({1:function(e,n,i,o,l,r,s){var c,u=e.escapeExpression;return"        <option "+u(a(t(23)).call(null!=n?n:e.nullContext||{},null!=(c=null!=s[1]?s[1].paginationData:s[1])?c.pageSize:c,n,{name:"Selected",hash:{},data:l}))+">"+u(e.lambda(n,n))+"</option>\r\n"},compiler:[7,">= 4.0.0"],main:function(e,n,i,o,l,r,s){var c,u=e.lambda,d=e.escapeExpression,p=null!=n?n:e.nullContext||{};return'<div data-role="pager" class="gui gui-subheading-1 text-left m-0">\r\n    <span class="gui mini compact ">\r\n        <button class="gui mini compact firstLink" aria-disabled="'+d(u(null!=(c=null!=n?n.paginationData:n)?c.firstPageLinkDisabled:c,n))+'" '+d(a(t(1)).call(p,null!=(c=null!=n?n.paginationData:n)?c.firstPageLinkDisabled:c,{name:"Disabled",hash:{},data:l}))+'\r\n            aria-label="Go to the first page" title="Go to the first page" data-page="1" tabindex="0">\r\n            <i class="gui-icon gui-icon-previous"></i>\r\n        </button>\r\n        <button class="gui mini compact prevLink" aria-disabled="'+d(u(null!=(c=null!=n?n.paginationData:n)?c.prevPageLinkDisabled:c,n))+'" '+d(a(t(1)).call(p,null!=(c=null!=n?n.paginationData:n)?c.prevPageLinkDisabled:c,{name:"Disabled",hash:{},data:l}))+'\r\n            aria-label="Go to the previous page" title="Go to the previous page" data-page="'+d(a(t(8)).call(p,null!=(c=null!=n?n.paginationData:n)?c.pageIndex:c,"-",1,{name:"math",hash:{},data:l}))+'"\r\n            tabindex="0">\r\n            <i class="gui-icon gui-icon-chevron-left"></i>\r\n            Prev\r\n        </button>\r\n    </span>\r\n    <span class="gui pager-input-container input">\r\n        <span class="gui m-r-5"> Page </span>\r\n        <input class="gui pager-input w-25 p-0 m-r-5" aria-label="'+d(u(null!=(c=null!=n?n.paginationData:n)?c.pageIndex:c,n))+'" value="'+d(u(null!=(c=null!=n?n.paginationData:n)?c.pageIndex:c,n))+'" type="text" placeholder="Page Number ...">\r\n        <span class="no-of-pages-scan" data-number-of-pages="'+d(u(null!=(c=null!=n?n.paginationData:n)?c.noOfPages:c,n))+'"> of '+d(u(null!=(c=null!=n?n.paginationData:n)?c.noOfPages:c,n))+'</span>\r\n    </span>\r\n    <span class="gui mini compact ">\r\n        <button class="gui mini compact nextLink" aria-disabled="'+d(u(null!=(c=null!=n?n.paginationData:n)?c.nextPageLinkDisabled:c,n))+'" '+d(a(t(1)).call(p,null!=(c=null!=n?n.paginationData:n)?c.nextPageLinkDisabled:c,{name:"Disabled",hash:{},data:l}))+'\r\n            aria-label="Go to the next page" title="Go to the next page" data-page="'+d(a(t(8)).call(p,null!=(c=null!=n?n.paginationData:n)?c.pageIndex:c,"+",1,{name:"math",hash:{},data:l}))+'" tabindex="0">\r\n            Next\r\n            <i class="gui-icon gui-icon-chevron-right"></i>\r\n        </button>\r\n        <button class="gui mini compact lastLink" aria-disabled="'+d(u(null!=(c=null!=n?n.paginationData:n)?c.lastPageLinkDisabled:c,n))+'" '+d(a(t(1)).call(p,null!=(c=null!=n?n.paginationData:n)?c.lastPageLinkDisabled:c,{name:"Disabled",hash:{},data:l}))+'\r\n                aria-label="Go to the last page" title="Go to the last page" data-page="'+d(u(null!=(c=null!=n?n.paginationData:n)?c.noOFpages:c,n))+'" tabindex="0">\r\n            <i class="gui-icon gui-icon-next"></i>\r\n        </button>\r\n    </span>\r\n</div>\r\n<div class="gui gui-subheading-1 text-right m-0">\r\n    <span>Rows Per Page</span>\r\n    <select class="gui pageSizeSelector">\r\n'+(null!=(c=i.each.call(p,null!=(c=null!=n?n.paginationData:n)?c.pageSizes:c,{name:"each",hash:{},fn:e.program(1,l,0,r,s),inverse:e.noop,data:l}))?c:"")+'    </select>\r\n    <span class="gui m-l-10">'+d(u(null!=(c=null!=(c=null!=n?n.paginationData:n)?c.range:c)?c.min:c,n))+" - "+d(u(null!=(c=null!=(c=null!=n?n.paginationData:n)?c.range:c)?c.max:c,n))+" of "+d(u(null!=(c=null!=n?n.paginationData:n)?c.totalCount:c,n))+" items</span>\r\n</div>"},useData:!0,useDepths:!0})},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=function(e,n,t,a){return{"+":e+t,"-":e-t,"*":e*t,"/":e/t,"%":e%t}[n]};n.default=a},function(e,n,t){var a=t(0);e.exports=(a.default||a).template({1:function(e,n,a,i,o){var l,r=e.lambda,s=e.escapeExpression;return'<tr class="mainRow" data-pk-attr="'+s(r(null!=n?n.keyColumn:n,n))+'" >\r\n    <td class="expansionArrows" style="display:flex;justify-content:center;">\r\n        <i class="gui gui-icon gui-icon-chevron-down expandDetailsRowIcon cursor-pointer" aria-hidden="true"></i>\r\n        <i class="gui gui-icon gui-icon-chevron-up CollapseDetailsRowIcon cursor-pointer gui-hidden" aria-hidden="true"></i>\r\n    </td>\r\n    <td>\r\n        <input type="checkbox" data-value="'+s(r(null!=n?n.rowData:n,n))+'" value="'+s(r(null!=n?n.keyColumn:n,n))+'" class="select-key-checkbox cursor-pointer">\r\n    </td>\r\n'+(null!=(l=a.each.call(null!=n?n:e.nullContext||{},null!=n?n.mainRowColArray:n,{name:"each",hash:{},fn:e.program(2,o,0),inverse:e.noop,data:o}))?l:"")+"</tr>\r\n"+(null!=(l=e.invokePartial(t(6),n,{name:"grid-details-row",data:o,helpers:a,partials:i,decorators:e.decorators}))?l:"")+" "},2:function(e,n,t,a,i){var o,l=e.lambda,r=e.escapeExpression;return'        <td title="'+r(l(null!=n?n.actualValue:n,n))+'" class="body-'+r(l(null!=n?n.id:n,n))+'">'+(null!=(o=l(null!=n?n.columnValue:n,n))?o:"")+"</td>\r\n"},compiler:[7,">= 4.0.0"],main:function(e,n,t,a,i){var o;return null!=(o=t.each.call(null!=n?n:e.nullContext||{},null!=n?n.mainRowArray:n,{name:"each",hash:{},fn:e.program(1,i,0),inverse:e.noop,data:i}))?o:""},usePartial:!0,useData:!0})},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=t(4),i=t(11),o=t(12),l=t(13),r=t(2),s=t(14),c=t(15),u=t(17),d=t(18),p=t(19),f=t(20),g=t(21),h=t(22),m=function(){function e(e){var n=this;this.bindData=function(e,t){var a=n.configStore.Options.chunkSize+n.getInitialRowCount();a=a>=e.length?e.length-1:a,r.Pager.CalculatePaginationData(t);var i=n.gridTemplateService.GetFirstTemplate(e,0,a);n.configStore.Options.containerElement.innerHTML=i,void 0!==n.configStore.Options.manageColSettingsContainer&&n.bindManageColums(n.configStore.Options.manageColSettingsContainer),void 0!==n.scrollHandler&&null!==n.scrollHandler?(n.scrollHandler.removeHandler(),n.scrollHandler.resetParentOffset()):(n.scrollHandler=new f.ScrollHandler(n.configStore,n.gridTemplateService,a+1),n.scrollHandler.watchWidth()),n.scrollHandler.RegisterDomHandler()},this.bindManageColums=function(e,t){if(void 0===n.manageColHandler||t){var i=n.gridTemplateService.GetManageColumnsHtml(),l=a(e||n.configStore.Options.manageColSettingsContainer||n.configStore.Options.containerElement);n.toggleHandler=new g.ToggleColumnHandler(n.configStore,a(n.configStore.Options.containerElement)),n.configStore.options.manageColSettingsContainer=l[0],n.manageColHandler=new o.ColSettingsHandler(a(l),n.configStore,n.toggleHandler),l.find(".col-settings-container").html(i),n.manageColHandler.RegisterDomHandler(),a(window).resize(n.documentResizeHandlerForCs),a(document).click(n.documentClickHandlerForCs)}},this.applyColumnConfig=function(e){n.toggleHandler.applyColumnConfig(e);var t=n.gridTemplateService.GetManageColumnsHtml();a(n.configStore.Options.manageColSettingsContainer||n.configStore.Options.containerElement).find(".col-settings-container").html(t)},this.setOrder=function(e){for(var t=0,a=n.configStore.Options.columns;t<a.length;t++){var i=a[t];i.order=void 0}if(void 0!==e&&null!==e&&0!==e.length)for(var o=0,l=e;o<l.length;o++)for(var r=l[o],s=0,c=n.configStore.Options.columns;s<c.length;s++){var i=c[s];if(r.colId===i.id){i.order=r.order;break}}},this.destroy=function(){var e=a(n.configStore.Options.containerElement);void 0!==e&&e.off();var t=a(n.configStore.Options.manageColSettingsContainer);void 0!==t&&t.off(),$(window).off("resize",n.documentResizeHandler),$(document).off("click",n.documentClickHandler),$(window).off("resize",n.documentResizeHandlerForCs),$(document).off("click",n.documentClickHandlerForCs),void 0!==n.scrollHandler&&n.scrollHandler.unWatchWidth()},this.getInitialRowCount=function(){return Math.floor(.65*a(window).innerHeight()/32)},this.InitHandlers=function(){var e=a(n.configStore.Options.containerElement);n.handleChain=[],n.handleChain.push({handler:new s.DetailsRowHandler(n.configStore,e),name:u.HandlerNames.DetailsRow}),n.handleChain.push({handler:new c.FilterClickHandler(n.configStore,e),name:u.HandlerNames.FilterAction}),n.handleChain.push({handler:new d.HeaderClickHandler(n.configStore,e),name:u.HandlerNames.HeaderClick}),n.handleChain.push({handler:new p.PageSearchHandler(n.configStore,e),name:u.HandlerNames.PageSearch});n.handleChain.push({handler:new l.SelectEventHandler(n.configStore,e,n.gridTemplateService),name:u.HandlerNames.ColSettings}),n.handleChain.forEach(function(e){e.handler.RegisterDomHandler()}),a(window).resize(n.documentResizeHandler),a(document).click(n.documentClickHandler)},this.documentResizeHandlerForCs=function(e){n.manageColHandler.onResize(),e.stopPropagation()},this.documentClickHandlerForCs=function(e){n.manageColHandler.onDocumentClick(e),e.stopPropagation()},this.documentResizeHandlerForScroll=function(e){n.manageColHandler.onResize(),e.stopPropagation()},this.documentClickHandler=function(e){n.handleChain.forEach(function(n){n.handler.onDocumentClick(e)}),e.stopPropagation()},this.documentResizeHandler=function(e){n.handleChain.forEach(function(n){n.handler.onDocumentClick(e)}),e.stopPropagation()},this.configStore=new i.ConfigStore(e),this.gridTemplateService=new h.GridTemplateService(this.configStore),this.InitHandlers()}return e}();n.Grid=m},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=function(){function e(e){var n=this;if(this.defaultGridOptions={animationTime:200,chunkSize:5,columns:[],containerElement:null,manageColSettingsContainer:null,hybridFunction:function(e,n){return"true"},keyColumn:"",onColSettingsChange:function(e){},onClickFilter:function(e,n,t){},onClickHeader:function(e,n){},onPageSearch:function(e,n){},onSelect:function(e){}},this.SetHiddenOnConfig=function(e,t){for(var a=0,i=n.Options.columns;a<i.length;a++){var o=i[a];if(void 0===t)o.hidden=e;else if(o.id===t){o.hidden=e;break}}},this.extendOptions=function(e){return n.options=jQuery.extend({},n.defaultGridOptions,e)},this.extendOptions(e),null===e.containerElement)throw new Error("Please Provide a valid container Element object")}return Object.defineProperty(e.prototype,"Options",{get:function(){return this.options},set:function(e){this.options=e},enumerable:!0,configurable:!0}),e}();n.ConfigStore=a},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=function(){function e(e,n,t){this.parentElement=e,this.configStore=n,this.toggleColumnHandler=t}return e.prototype.onResize=function(){},e.prototype.onDocumentClick=function(e){var n=jQuery(e.target);n.is(".col-settings-trigger")||n.parents().is(".col-settings-container")||(jQuery(".col-settings-trigger").removeClass("active"),jQuery(".col-settings-container").slideUp(this.configStore.Options.animationTime))},e.prototype.RegisterDomHandler=function(){var e=this;this.parentElement.on("click",".col-settings-trigger",function(n){var t=(jQuery(n.target),e.parentElement.find(".col-settings-container"));e.onResize(),jQuery(".col-settings-trigger").addClass("active"),t.slideToggle(e.configStore.Options.animationTime),n.stopPropagation()}),this.parentElement.on("keyup",".col-settings-header .col-settings-filter",function(n){var t=jQuery(n.target),a=t.val().toString().toLowerCase();console.log(a),e.parentElement.find(".col-settings-table table tbody tr").each(function(e,n){jQuery(n).show(),-1===jQuery(n).attr("data-header-id").toLowerCase().indexOf(a)&&jQuery(n).hide()}),n.stopPropagation()}),this.parentElement.on("click",".show-all-column",function(n){e.parentElement.find(".col-settings-hidden-checkbox").each(function(e,n){jQuery(n).prop("checked",!0)}),e.toggleColumnHandler.showAllColumns(),e.configStore.Options.onColSettingsChange(e.configStore.Options.columns),n.stopPropagation()}),this.parentElement.on("click",".hide-all-column",function(n){e.parentElement.find(".col-settings-hidden-checkbox").each(function(e,n){jQuery(n).prop("checked",!1)}),e.toggleColumnHandler.hideAllColumns(),e.configStore.Options.onColSettingsChange(e.configStore.Options.columns),n.stopPropagation()}),this.parentElement.on("click",".col-settings-hidden-checkbox",function(n){if(void 0!==n.originalEvent){var t=jQuery(n.target),a=t.val().toString();t.is(":checked")?e.toggleColumnHandler.showColumn(a):e.toggleColumnHandler.hideColumn(a)}e.configStore.Options.onColSettingsChange(e.configStore.Options.columns),n.stopPropagation()})},e}();n.ColSettingsHandler=a},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=function(){function e(e,n,t){this.configStore=e,this.parentElement=n,this.gridTemplateService=t}return e.prototype.RegisterDomHandler=function(){var e=this;this.parentElement.on("change",".select-key-checkbox",function(n){var t=jQuery(n.target),a=t.data("value"),i=t.is(":checked");i?t.parents(".mainRow").addClass("active"):t.parents(".mainRow").removeClass("active"),void 0!==n.originalEvent&&(e.configStore.Options.onSelect([a],i),n.stopPropagation())}),this.parentElement.on("change",".select-all-checkbox",function(n){var t=jQuery(n.target),a=t.is(":checked");e.configStore.Options.onSelect(e.gridTemplateService.Data,a),e.parentElement.find(".select-key-checkbox").prop("checked",a),a?e.parentElement.find(".mainTable .mainRow").addClass("active"):e.parentElement.find(".mainTable .mainRow").removeClass("active"),n.stopPropagation()})},e.prototype.onResize=function(){},e.prototype.onDocumentClick=function(e){},e}();n.SelectEventHandler=a},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=function(){function e(e,n){var t=this;this.configStore=e,this.RegisterDomHandler=function(){t.parentElement.on("click",".table-body .expansionArrows i",function(e){var n=jQuery(e.target),a=n.closest("tr").next();n.hide(),n.siblings("i").show();n.hasClass("expandDetailsRowIcon")?a.slideDown(t.configStore.Options.animationTime):a.slideUp(t.configStore.Options.animationTime),e.stopPropagation()})},this.parentElement=n}return e.prototype.onResize=function(){},e.prototype.onDocumentClick=function(e){},e}();n.DetailsRowHandler=a},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=t(3),i=t(16),o=function(){function e(e,n){var t=this;this.RegisterDomHandler=function(){t.parentElement.on("click",".table-body .detailsRow .detailsTable td i",function(e){var n=jQuery(e.target),o=n.parents("td"),l=o.attr("data-filter-key"),r=o.attr("data-filter-value"),s=o.attr("data-filter-type"),c=a.CommonUtil.GetColumnObject(l,t.configStore.Options.columns);if(void 0!==c&&null!==c&&c.filterable){var u=i.FilterActionType.Add;n.hasClass("removeFilter")&&(u=i.FilterActionType.Minus),t.configStore.Options.onClickFilter(l,r,u,s),e.stopPropagation()}})},this.configStore=e,this.parentElement=n}return e.prototype.onResize=function(){},e.prototype.onDocumentClick=function(e){},e}();n.FilterClickHandler=o},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});!function(e){e.Add="Add",e.Minus="Minus"}(n.FilterActionType||(n.FilterActionType={}))},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});!function(e){e[e.FilterAction=0]="FilterAction",e[e.HeaderClick=1]="HeaderClick",e[e.Scroll=2]="Scroll",e[e.PageSearch=3]="PageSearch",e[e.DetailsRow=4]="DetailsRow",e[e.ToggleColumn=5]="ToggleColumn",e[e.ColSettings=6]="ColSettings"}(n.HandlerNames||(n.HandlerNames={}))},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=t(3),i=t(5),o=function(){function e(e,n){var t=this;this.RegisterDomHandler=function(){t.parentElement.on("click",".table-header th",function(e){var n=jQuery(e.target).closest("th"),o=n.attr("data-header-id"),l=a.CommonUtil.GetColumnObject(o,t.configStore.Options.columns);if(void 0!==l&&null!==l&&l.sortable){var r,s=n.find("i"),c=s.first(),u=s.last();s.is(":visible")?c.is(":visible")?(r=i.GridOrderDirection.Desc,c.hide(),u.show()):(r=i.GridOrderDirection.Asc,u.hide(),c.show()):(r=i.GridOrderDirection.Asc,c.show()),a.CommonUtil.SetOrder(o,r,t.configStore.Options.columns),t.configStore.Options.onClickHeader(o,r),e.stopPropagation()}})},this.configStore=e,this.parentElement=n}return e.prototype.onResize=function(){},e.prototype.onDocumentClick=function(e){},e}();n.HeaderClickHandler=o},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=t(4),i=t(2),o=function(){function e(e,n){var t=this;this.RegisterDomHandler=function(){t.parentElement.on("click",".table-footer .firstLink",function(e){t.configStore.options.onPageSearch(i.Pager.PaginationData.pageSize,1),e.stopPropagation()}),t.parentElement.on("click",".table-footer .nextLink",function(e){t.configStore.options.onPageSearch(i.Pager.PaginationData.pageSize,i.Pager.PaginationData.pageIndex+1),e.stopPropagation()}),t.parentElement.on("click",".table-footer .prevLink",function(e){t.configStore.options.onPageSearch(i.Pager.PaginationData.pageSize,i.Pager.PaginationData.pageIndex-1),e.stopPropagation()}),t.parentElement.on("click",".table-footer .lastLink",function(e){t.configStore.options.onPageSearch(i.Pager.PaginationData.pageSize,i.Pager.PaginationData.noOfPages),e.stopPropagation()}),t.parentElement.on("change",".table-footer .pageSizeSelector",function(e){var n=+a(e.target).val().toString();t.configStore.options.onPageSearch(n,i.Pager.PaginationData.pageIndex),e.stopPropagation()}),t.parentElement.on("keypress",".table-footer .pager-input",function(e){var n=a(e.target),o=i.Pager.PaginationData;if(13===e.keyCode){var l=+n.val().toString();isNaN(l)||l>o.noOfPages||l<1?n.val(o.pageIndex):t.configStore.options.onPageSearch(o.pageSize,l)}e.stopPropagation()})},this.configStore=e,this.parentElement=n}return e.prototype.onResize=function(){},e.prototype.onDocumentClick=function(){},e}();n.PageSearchHandler=o},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=function(){function e(e,n,t){var a=this;this.rendering=!1,this.watches=[],this.RegisterDomHandler=function(){a.parentElement.find(".table-body").on("scroll",a.handleResize)},this.removeHandler=function(){a.parentElement.find(".table-body").off("scroll",a.handleResize)},this.resetParentOffset=function(){a.parentOffSetLeft=a.parentElement.offset().left,a.leftOffset=a.parentElement.find(".table-header").offset().left},this.watchWidth=function(){a.parentOffSetLeft=a.parentElement.offset().left,a.watches.push(setInterval(a.setHeaderOffset,300))},this.unWatchWidth=function(){if(void 0!==a.watches&&null!==a.watches)for(var e=0,n=a.watches;e<n.length;e++){var t=n[e];clearInterval(t)}},this.handleResize=function(e){var n=a.parentElement.find(".table-body");void 0!==a.leftOffset&&null!==a.leftOffset||(a.leftOffset=a.parentElement.find(".table-header").offset().left),a.parentElement.find(".table-header").offset({left:a.leftOffset+-1*n.scrollLeft(),top:0});var t=n.find(".mainTable").height(),i=n.height();if(e.preventDefault(),a.rendering)return void e.stopPropagation();if(i+n.scrollTop()-.8*t>0){if(a.currentIndex>=a.gridTemplateService.DataLength)return;a.rendering=!0;var o=a.currentIndex+a.configStore.Options.chunkSize;o>=a.gridTemplateService.DataLength&&(o=a.gridTemplateService.DataLength-1);var l=jQuery(a.gridTemplateService.getTemplate(a.currentIndex,o));n.find(".mainTableBody").append(l),a.currentIndex=o+1,a.rendering=!1}e.stopPropagation()},this.setHeaderOffset=function(){var e=a.parentElement.offset().left;if(a.parentOffSetLeft!==e){var n=a.parentElement.find(".table-body");void 0!==a.leftOffset&&null!==a.leftOffset||(a.leftOffset=a.parentElement.find(".table-header").offset().left),a.leftOffset=a.leftOffset-(a.parentOffSetLeft-e),a.parentElement.find(".table-header").offset({left:a.leftOffset,top:0}),a.parentOffSetLeft=e,n.scrollLeft(n.scrollLeft()-1)}},this.configStore=e,this.parentElement=jQuery(this.configStore.Options.containerElement),this.gridTemplateService=n,this.currentIndex=t}return e.prototype.onResize=function(){},e.prototype.onDocumentClick=function(e){},e}();n.ScrollHandler=a},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a,i=t(3);!function(e){e[e.Show=0]="Show",e[e.Hide=1]="Hide",e[e.ShowAll=2]="ShowAll",e[e.HideAll=3]="HideAll"}(a||(a={}));var o=function(){function e(e,n){var t=this;this.showAllColumns=function(){t.SetColWidth(".table-header .headerColGroup col",a.ShowAll),t.SetColWidth(".table-body .bodyColGroup col",a.ShowAll),t.configStore.SetHiddenOnConfig(!1)},this.showColumn=function(e){t.SetColWidth(".table-header .headerColGroup col",a.Show,e),t.SetColWidth(".table-body .bodyColGroup col",a.Show,e),t.configStore.SetHiddenOnConfig(!1,e)},this.hideColumn=function(e){t.SetColWidth(".table-header .headerColGroup col",a.Hide,e),t.SetColWidth(".table-body .bodyColGroup col",a.Hide,e),t.configStore.SetHiddenOnConfig(!0,e)},this.hideAllColumns=function(){t.SetColWidth(".table-header .headerColGroup col",a.HideAll),t.SetColWidth(".table-body .bodyColGroup col",a.HideAll),t.configStore.SetHiddenOnConfig(!0)},this.applyColumnConfig=function(e){for(var n=0,a=e;n<a.length;n++){var i=a[n];i.hidden?t.hideColumn(i.id):t.showColumn(i.id)}},this.SetColWidth=function(e,n,o){t.parentElement.find(e).each(function(e,l){var r=0,s=jQuery(l),c=s.attr("data-header-id");if(void 0!==c){var u=void 0;if([a.Show,a.Hide].indexOf(n)>-1&&c===o)return n===a.Show&&(u=i.CommonUtil.GetColumnObject(c,t.configStore.options.columns),r=u.width),void s.width(r+"px");[a.ShowAll,a.HideAll].indexOf(n)>-1&&(n===a.ShowAll&&(u=i.CommonUtil.GetColumnObject(c,t.configStore.options.columns),r=u.width),s.width(r+"px"))}})},this.configStore=e,this.parentElement=n}return e}();n.ToggleColumnHandler=o},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=t(6),i=t(7),o=t(9),l=t(24),r=t(26),s=t(2),c=function(){function e(e){var n=this;this.GetFirstTemplate=function(e,t,a){n.data=e;var i=n.GetRowsHtml(t,a);return n.templateFunctionForGrid({columns:n.configStore.Options.columns,mainRowArray:i,paginationData:s.Pager.PaginationData,caption:n.configStore.Options.caption})},this.getTemplate=function(e,t){var a=n.GetRowsHtml(e,t);return n.templateFunctionForMainRow({columns:n.configStore.Options.columns,mainRowArray:a,caption:n.configStore.Options.caption})},this.GetManageColumnsHtml=function(){return n.templateFunctionForManageCol({columns:n.configStore.Options.columns})},this.GetRowsHtml=function(e,t){for(var a=[],i=(n.configStore.Options.columns.length,e);i<=t;i++){for(var o=n.data[i],l=[],r=0,s=n.configStore.Options.columns;r<s.length;r++){var c=s[r],u=o[c.id];c.renderHybrid&&(u=n.configStore.Options.hybridFunction(c,o)),l.push({columnValue:u,type:c.type,hidden:c.hidden,actualValue:o[c.id],columnName:c.name,id:c.id,filterable:c.filterable})}a.push({rowData:JSON.stringify(o),keyColumn:o[n.configStore.Options.keyColumn],mainRowColArray:l,length:n.configStore.Options.columns.length})}return a},this.configStore=e,this.templateFunctionForGrid=r,this.templateFunctionForMainRow=o,this.templateFunctionForDetailsRow=a,this.templateFunctionForFooter=i,this.templateFunctionForManageCol=l}return Object.defineProperty(e.prototype,"Data",{get:function(){return this.data},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"DataLength",{get:function(){return this.data.length},enumerable:!0,configurable:!0}),e}();n.GridTemplateService=c},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=function(e,n){return e===n?"selected":""};n.default=a},function(e,n,t){function a(e){return e&&(e.__esModule?e.default:e)}var i=t(0);e.exports=(i.default||i).template({1:function(e,n,i,o,l){var r=e.lambda,s=e.escapeExpression;return'                <tr data-header-id="'+s(r(null!=n?n.name:n,n))+'">\r\n                    <td>\r\n                        <label>\r\n                            <input type="checkbox" class="col-settings-hidden-checkbox gui m-r-10" value="'+s(r(null!=n?n.id:n,n))+'" '+s(a(t(25)).call(null!=n?n:e.nullContext||{},null!=n?n.hidden:n,{name:"Checked",hash:{},data:l}))+">\r\n                            "+s(r(null!=n?n.name:n,n))+"\r\n                        </label>\r\n                    </td>\r\n                </tr>\r\n"},compiler:[7,">= 4.0.0"],main:function(e,n,t,a,i){var o;return'<div class="gui of-hidden p-10 min-w-50 w-auto fluid-h flex column container" >\r\n    <div class="col-settings-header" style="width: 100%">\r\n        <div class="gui mini fluid icon input">\r\n            <input class="col-settings-filter" type="text" placeholder="Search filter...">\r\n            <i class="search icon"></i>\r\n        </div>\r\n        <div class="gui m-t-10">\r\n            <a class="gui left show-all-column">Show All</a>\r\n            <a class="gui right hide-all-column">Hide All</a>\r\n        </div>\r\n        <div class="gui clear"></div>\r\n    </div>\r\n    <div class="gui clear"></div>\r\n    <div class="col-settings-table gui fluid h-90 of-auto p-5 m-t-10" >\r\n        <table class="gui small very border-less basic compact table">\r\n            <tbody>\r\n'+(null!=(o=t.each.call(null!=n?n:e.nullContext||{},null!=n?n.columns:n,{name:"each",hash:{},fn:e.program(1,i,0),inverse:e.noop,data:i}))?o:"")+"            </tbody>\r\n        </table>\r\n    </div>\r\n</div>"},useData:!0})},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=function(e){return e?"":"checked"};n.default=a},function(e,n,t){function a(e){return e&&(e.__esModule?e.default:e)}var i=t(0);e.exports=(i.default||i).template({1:function(e,n,t,a,i){return'                <caption class="gui gui-subheading-2 m-0 p-0 text-left">'+e.escapeExpression(e.lambda(null!=n?n.caption:n,n))+"</caption>\n"},3:function(e,n,i,o,l){var r;return"                    "+(null!=(r=a(t(27)).call(null!=n?n:e.nullContext||{},n,{name:"Column",hash:{},data:l}))?r:"")+"\n"},5:function(e,n,t,a,i){var o,l=e.lambda,r=e.escapeExpression;return'                        <th class="gui cursor-pointer" id="header-'+r(l(null!=n?n.id:n,n))+'" data-header-id="'+r(l(null!=n?n.id:n,n))+'">\n                            <span class="gui sub header">'+r(l(null!=n?n.name:n,n))+"</span>\n"+(null!=(o=t.if.call(null!=n?n:e.nullContext||{},null!=n?n.sortable:n,{name:"if",hash:{},fn:e.program(6,i,0),inverse:e.noop,data:i}))?o:"")+"                        </th>\n"},6:function(e,n,i,o,l){var r;return"                                "+(null!=(r=a(t(28)).call(null!=n?n:e.nullContext||{},null!=n?n.order:n,{name:"Ordered",hash:{},data:l}))?r:"")+"\n"},compiler:[7,">= 4.0.0"],main:function(e,n,a,i,o){var l,r=null!=n?n:e.nullContext||{};return'<style>\n    .inner-container {\n        height: 100%;\n        overflow: hidden;\n        width: 100%;\n        display: flex;\n        flex-direction: column;\n    }\n    .table-header {\n        position: relative;\n        top:0 !important;\n    }\n    .table-body {\n        overflow: auto;\n        flex: 5;\n    }\n    .margin-auto{\n        margin: auto !important;\n    }\n    .border-less tr td,.border-less { border: 0px !important; }\n    .ui.supercompact.icon.button, .ui.supercompact.icon.buttons .button {\n        padding: .3em .3em .3em .3em !important;\n    }\n</style>\n<div class="inner-container gui fluid container" style="padding:0%;">\n    <div class="table-header">\n        <table id="headertable" class="gui basic large compact sortable fixed single line table">\n'+(null!=(l=a.if.call(r,null!=n?n.caption:n,{name:"if",hash:{},fn:e.program(1,o,0),inverse:e.noop,data:o}))?l:"")+'            <colgroup class="headerColGroup">\n                <col style="width:40px;" />\n                <col style="width:40px;" />\n'+(null!=(l=a.each.call(r,null!=n?n.columns:n,{name:"each",hash:{},fn:e.program(3,o,0),inverse:e.noop,data:o}))?l:"")+'            </colgroup>\n            <thead>\n                <tr>\n                    <th></th>\n                    <th><input type="checkbox" class="select-all-checkbox cursor-pointer"></th>\n'+(null!=(l=a.each.call(r,null!=n?n.columns:n,{name:"each",hash:{},fn:e.program(5,o,0),inverse:e.noop,data:o}))?l:"")+'                </tr>\n            </thead>\n        </table>\n    </div>\n    <div class="table-body">\n        <table class="gui basic large compact fixed selectable single line table mainTable">\n            <colgroup class="bodyColGroup">\n                <col style="width:40px;" /> \n                <col style="width:40px;" />\n'+(null!=(l=a.each.call(r,null!=n?n.columns:n,{name:"each",hash:{},fn:e.program(3,o,0),inverse:e.noop,data:o}))?l:"")+'            </colgroup>\n            <tbody class="mainTableBody">\n'+(null!=(l=e.invokePartial(t(9),n,{name:"grid-main-row",data:o,indent:"                ",helpers:a,partials:i,decorators:e.decorators}))?l:"")+'            </tbody>\n        </table>\n    </div>\n    <div class="table-footer gui h-auto fluid-w flex jc-sb p-5 m-0">\n'+(null!=(l=e.invokePartial(t(7),n,{name:"grid-footer",data:o,indent:"           ",helpers:a,partials:i,decorators:e.decorators}))?l:"")+"    </div>\n</div>"},usePartial:!0,useData:!0})},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=function(e){return'<col style="width : '+(e.hidden?0:e.width)+'px;"data-header-id="'+e.id+'" />'};n.default=a},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=t(5),i=function(e){return e===a.GridOrderDirection.Asc?'<i class="gui gui-icon gui-icon-arrow-up" ></i> ':e===a.GridOrderDirection.Desc?'<i class="gui gui-icon gui-icon-arrow-down" ></i> ':'<i class="gui gui-icon gui-icon-arrow-up gui-hidden" aria-hidden="true" ></i> <i class="gui gui-icon gui-icon-arrow-down gui-hidden" aria-hidden="true" ></i>'};n.default=i}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy9ncmlkb28ubWluLmpzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCA0NDE3NTNkZTRmNGU0NWVlNTY5NCIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwge1wicm9vdFwiOlwiSGFuZGxlYmFyc1wiLFwiYW1kXCI6XCJoYW5kbGViYXJzLnJ1bnRpbWVcIixcImNvbW1vbmpzMlwiOlwiaGFuZGxlYmFycy9ydW50aW1lXCIsXCJjb21tb25qc1wiOlwiaGFuZGxlYmFycy9ydW50aW1lXCJ9Iiwid2VicGFjazovLy8uL3NyYy9oYnMvaGVscGVycy9EaXNhYmxlZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvcGFnaW5hdGlvbi9QYWdlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvdXRpbC9Db2x1bW5VdGlsLnRzIiwid2VicGFjazovLy9leHRlcm5hbCBcImpRdWVyeVwiIiwid2VicGFjazovLy8uL3NyYy9qcy9tb2RlbHMvR3JpZE9yZGVyRGlyZWN0aW9uLnRzIiwid2VicGFjazovLy8uL3NyYy9oYnMvZ3JpZC1kZXRhaWxzLXJvdy5oYnMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2hicy9ncmlkLWZvb3Rlci5oYnMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2hicy9oZWxwZXJzL21hdGgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2hicy9ncmlkLW1haW4tcm93LmhicyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbWFpbi9HcmlkLnRzIiwid2VicGFjazovLy8uL3NyYy9qcy9jb25maWcvQ29uZmlnU3RvcmUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2V2ZW50SGFuZGxlcnMvQ29sU2V0dGluZ3NIYW5kbGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9qcy9ldmVudEhhbmRsZXJzL1NlbGVjdEV2ZW50SGFuZGxlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvZXZlbnRIYW5kbGVycy9EZXRhaWxzUm93SGFuZGxlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvZXZlbnRIYW5kbGVycy9GaWx0ZXJDbGlja0hhbmRsZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL21vZGVscy9GaWx0ZXJBY3Rpb25UeXBlLnRzIiwid2VicGFjazovLy8uL3NyYy9qcy9ldmVudEhhbmRsZXJzL0hhbmRsZXJOYW1lcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvZXZlbnRIYW5kbGVycy9IZWFkZXJDbGlja0hhbmRsZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2V2ZW50SGFuZGxlcnMvUGFnZVNlYXJjaENsaWNrSGFuZGxlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvZXZlbnRIYW5kbGVycy9TY3JvbGxIYW5kbGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9qcy9ldmVudEhhbmRsZXJzL1RvZ2dsZUNvbHVtbkhhbmRsZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3NlcnZpY2VzL0dyaWRUZW1wbGF0ZVNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2hicy9oZWxwZXJzL1NlbGVjdGVkLnRzIiwid2VicGFjazovLy8uL3NyYy9oYnMvZ3JpZC1tYW5hZ2UtY29sdW1ucy5oYnMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2hicy9oZWxwZXJzL0NoZWNrZWQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2hicy9ncmlkLmhicyIsIndlYnBhY2s6Ly8vLi9zcmMvaGJzL2hlbHBlcnMvQ29sdW1uLnRzIiwid2VicGFjazovLy8uL3NyYy9oYnMvaGVscGVycy9PcmRlcmVkLnRzIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsInJlcXVpcmUiLCJkZWZpbmUiLCJhbWQiLCJzZWxmIiwidGhpcyIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfMF9fIiwiX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV80X18iLCJtb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaW5zdGFsbGVkTW9kdWxlcyIsImkiLCJsIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwibiIsIl9fZXNNb2R1bGUiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJ2YWx1ZSIsImRpc2FibGVkIiwiYm9vbCIsImRlZmF1bHQiLCJQYWdlciIsInBhZ2luYXRpb25EYXRhIiwiQ2FsY3VsYXRlUGFnaW5hdGlvbkRhdGEiLCJwYWdpbmF0aW9uSW5wdXQiLCJwYWdlSW5kZXgiLCJwYWdlU2l6ZSIsInBhZ2VTaXplcyIsInRvdGFsQ291bnQiLCJub09mUGFnZXMiLCJNYXRoIiwiY2VpbCIsIm1pbk51bSIsImxvd2VyTGltaXRPZmZzZXQiLCJyYW5nZSIsIm1pbiIsIm1heCIsImZpcnN0UGFnZUxpbmtEaXNhYmxlZCIsImxhc3RQYWdlTGlua0Rpc2FibGVkIiwicHJldlBhZ2VMaW5rRGlzYWJsZWQiLCJuZXh0UGFnZUxpbmtEaXNhYmxlZCIsIkNvbW1vblV0aWwiLCJHZXRDb2x1bW5PYmplY3QiLCJjb2x1bW5JZCIsImNvbHVtbnMiLCJyZXRDb2wiLCJmb3JFYWNoIiwiY29sIiwiaWQiLCJTZXRPcmRlciIsIm9yZGVyIiwiR3JpZE9yZGVyRGlyZWN0aW9uIiwiSGFuZGxlYmFycyIsInRlbXBsYXRlIiwiMSIsImNvbnRhaW5lciIsImRlcHRoMCIsImhlbHBlcnMiLCJwYXJ0aWFscyIsImRhdGEiLCJzdGFjazEiLCJoZWxwZXIiLCJhbGlhczEiLCJudWxsQ29udGV4dCIsImFsaWFzMiIsImhlbHBlck1pc3NpbmciLCJhbGlhczMiLCJhbGlhczQiLCJlc2NhcGVFeHByZXNzaW9uIiwidHlwZSIsImhhc2giLCJhY3R1YWxWYWx1ZSIsImNvbHVtbk5hbWUiLCJmaWx0ZXJhYmxlIiwiZm4iLCJwcm9ncmFtIiwiaW52ZXJzZSIsIm5vb3AiLCJjb2x1bW5WYWx1ZSIsIjIiLCJjb21waWxlciIsIm1haW4iLCJsZW5ndGgiLCJlYWNoIiwibWFpblJvd0NvbEFycmF5IiwidXNlRGF0YSIsIl9fZGVmYXVsdCIsIm9iaiIsImJsb2NrUGFyYW1zIiwiZGVwdGhzIiwibGFtYmRhIiwibm9PRnBhZ2VzIiwidXNlRGVwdGhzIiwibWF0aCIsImx2YWx1ZSIsIm9wZXJhdG9yIiwicnZhbHVlIiwib3B0aW9ucyIsIisiLCItIiwiKiIsIi8iLCIlIiwia2V5Q29sdW1uIiwicm93RGF0YSIsImludm9rZVBhcnRpYWwiLCJkZWNvcmF0b3JzIiwibWFpblJvd0FycmF5IiwidXNlUGFydGlhbCIsImpRdWVyeSIsIkNvbmZpZ1N0b3JlXzEiLCJDb2xTZXR0aW5nc0hhbmRsZXJfMSIsIlNlbGVjdEV2ZW50SGFuZGxlcl8xIiwiUGFnZXJfMSIsIkRldGFpbHNSb3dIYW5kbGVyXzEiLCJGaWx0ZXJDbGlja0hhbmRsZXJfMSIsIkhhbmRsZXJOYW1lc18xIiwiSGVhZGVyQ2xpY2tIYW5kbGVyXzEiLCJQYWdlU2VhcmNoQ2xpY2tIYW5kbGVyXzEiLCJTY3JvbGxIYW5kbGVyXzEiLCJUb2dnbGVDb2x1bW5IYW5kbGVyXzEiLCJHcmlkVGVtcGxhdGVTZXJ2aWNlXzEiLCJHcmlkIiwiX3RoaXMiLCJiaW5kRGF0YSIsImxhc3RJbmRleCIsImNvbmZpZ1N0b3JlIiwiT3B0aW9ucyIsImNodW5rU2l6ZSIsImdldEluaXRpYWxSb3dDb3VudCIsImdyaWRDb250ZW50IiwiZ3JpZFRlbXBsYXRlU2VydmljZSIsIkdldEZpcnN0VGVtcGxhdGUiLCJjb250YWluZXJFbGVtZW50IiwiaW5uZXJIVE1MIiwidW5kZWZpbmVkIiwibWFuYWdlQ29sU2V0dGluZ3NDb250YWluZXIiLCJiaW5kTWFuYWdlQ29sdW1zIiwic2Nyb2xsSGFuZGxlciIsInJlbW92ZUhhbmRsZXIiLCJyZXNldFBhcmVudE9mZnNldCIsIlNjcm9sbEhhbmRsZXIiLCJ3YXRjaFdpZHRoIiwiUmVnaXN0ZXJEb21IYW5kbGVyIiwibWFuYWdlQ29sQ29udGFpbmVyIiwiZm9yY2UiLCJtYW5hZ2VDb2xIYW5kbGVyIiwiaHRtbCIsIkdldE1hbmFnZUNvbHVtbnNIdG1sIiwiZWxlbWVudCIsInRvZ2dsZUhhbmRsZXIiLCJUb2dnbGVDb2x1bW5IYW5kbGVyIiwiQ29sU2V0dGluZ3NIYW5kbGVyIiwiZmluZCIsIndpbmRvdyIsInJlc2l6ZSIsImRvY3VtZW50UmVzaXplSGFuZGxlckZvckNzIiwiZG9jdW1lbnQiLCJjbGljayIsImRvY3VtZW50Q2xpY2tIYW5kbGVyRm9yQ3MiLCJhcHBseUNvbHVtbkNvbmZpZyIsInNldE9yZGVyIiwib3JkZXJCeUxpc3QiLCJfaSIsIl9hIiwiX2IiLCJvcmRlckJ5TGlzdF8xIiwib3JkZXJDb2wiLCJfYyIsIl9kIiwiY29sSWQiLCJkZXN0cm95IiwicGFyZW50RWxlbWVudCIsIm9mZiIsIm1hbmFnZUNvbnRhaW5lckVsZW1lbnQiLCIkIiwiZG9jdW1lbnRSZXNpemVIYW5kbGVyIiwiZG9jdW1lbnRDbGlja0hhbmRsZXIiLCJ1bldhdGNoV2lkdGgiLCJmbG9vciIsImlubmVySGVpZ2h0IiwiSW5pdEhhbmRsZXJzIiwiaGFuZGxlQ2hhaW4iLCJwdXNoIiwiaGFuZGxlciIsIkRldGFpbHNSb3dIYW5kbGVyIiwiSGFuZGxlck5hbWVzIiwiRGV0YWlsc1JvdyIsIkZpbHRlckNsaWNrSGFuZGxlciIsIkZpbHRlckFjdGlvbiIsIkhlYWRlckNsaWNrSGFuZGxlciIsIkhlYWRlckNsaWNrIiwiUGFnZVNlYXJjaEhhbmRsZXIiLCJQYWdlU2VhcmNoIiwiU2VsZWN0RXZlbnRIYW5kbGVyIiwiQ29sU2V0dGluZ3MiLCJldmVudCIsIm9uUmVzaXplIiwic3RvcFByb3BhZ2F0aW9uIiwib25Eb2N1bWVudENsaWNrIiwiZG9jdW1lbnRSZXNpemVIYW5kbGVyRm9yU2Nyb2xsIiwiQ29uZmlnU3RvcmUiLCJHcmlkVGVtcGxhdGVTZXJ2aWNlIiwiZGVmYXVsdEdyaWRPcHRpb25zIiwiYW5pbWF0aW9uVGltZSIsImh5YnJpZEZ1bmN0aW9uIiwiY29sdW1uIiwicm93Iiwib25Db2xTZXR0aW5nc0NoYW5nZSIsImNvbENvbmZpZyIsIm9uQ2xpY2tGaWx0ZXIiLCJhY3Rpb25UeXBlIiwib25DbGlja0hlYWRlciIsImRpcmVjdGlvbiIsIm9uUGFnZVNlYXJjaCIsIm9uU2VsZWN0Iiwicm93cyIsIlNldEhpZGRlbk9uQ29uZmlnIiwiaGlkZGVuIiwiZXh0ZW5kT3B0aW9ucyIsImlucHV0T3B0aW9ucyIsImV4dGVuZCIsIkVycm9yIiwic2V0IiwidG9nZ2xlQ29sdW1uSGFuZGxlciIsInRhcmdldEVsZW1lbnQiLCJ0YXJnZXQiLCJpcyIsInBhcmVudHMiLCJyZW1vdmVDbGFzcyIsInNsaWRlVXAiLCJvbiIsInNldHRuZ3NQb3B1cCIsImFkZENsYXNzIiwic2xpZGVUb2dnbGUiLCJ2YWwiLCJ0b1N0cmluZyIsInRvTG93ZXJDYXNlIiwiY29uc29sZSIsImxvZyIsImUiLCJzaG93IiwiYXR0ciIsImluZGV4T2YiLCJoaWRlIiwiaW5kZXgiLCJwcm9wIiwic2hvd0FsbENvbHVtbnMiLCJoaWRlQWxsQ29sdW1ucyIsIm9yaWdpbmFsRXZlbnQiLCJjaGVja2JveCIsInNob3dDb2x1bW4iLCJoaWRlQ29sdW1uIiwiY2hlY2tlZCIsIkRhdGEiLCJhcnJvdyIsImRldGFpbHNSb3ciLCJjbG9zZXN0IiwibmV4dCIsInNpYmxpbmdzIiwiaGFzQ2xhc3MiLCJzbGlkZURvd24iLCJDb2x1bW5VdGlsXzEiLCJGaWx0ZXJBY3Rpb25UeXBlXzEiLCJwYXJlbnRUZCIsImtleSIsImZpbHRlckFjdGlvbiIsIkZpbHRlckFjdGlvblR5cGUiLCJBZGQiLCJNaW51cyIsIkdyaWRPcmRlckRpcmVjdGlvbl8xIiwiaGVhZGVySWQiLCJzb3J0YWJsZSIsImFycm93SWNvbnMiLCJ1cEFycm93SWNvbiIsImZpcnN0IiwiZG93bkFycm93SWNvbiIsImxhc3QiLCJEZXNjIiwiQXNjIiwiUGFnaW5hdGlvbkRhdGEiLCJpcCIsInBhZ2VEYXRhIiwia2V5Q29kZSIsImlzTmFOIiwiY3VycmVudEluZGV4IiwicmVuZGVyaW5nIiwid2F0Y2hlcyIsImhhbmRsZVJlc2l6ZSIsInBhcmVudE9mZlNldExlZnQiLCJvZmZzZXQiLCJsZWZ0IiwibGVmdE9mZnNldCIsInNldEludGVydmFsIiwic2V0SGVhZGVyT2Zmc2V0Iiwid2F0Y2giLCJjbGVhckludGVydmFsIiwidEJvZHlPYmoiLCJzY3JvbGxMZWZ0IiwidG9wIiwiYWN0dWFsVGFibGVIZWlnaHQiLCJoZWlnaHQiLCJzY3JvbGxDb250YWluZXJIZWlnaHQiLCJwcmV2ZW50RGVmYXVsdCIsInNjcm9sbFRvcCIsIkRhdGFMZW5ndGgiLCJnZXRUZW1wbGF0ZSIsImFwcGVuZCIsIlNob3dIaWRlIiwiU2V0Q29sV2lkdGgiLCJTaG93QWxsIiwiU2hvdyIsIkhpZGUiLCJIaWRlQWxsIiwiY29sdW1uc18xIiwic2VsZWN0b3IiLCJjb250cm9sIiwid2lkdGgiLCJjdXJyZW50Q29sRWxlbSIsImN1cnJlbnRDb2wiLCJHcmlkRGV0YWlsc1Jvd1RlbXBsYXRlIiwiR3JpZEZvb3RlciIsIkdyaWRNYWluUm93VGVtcGxhdGUiLCJNYW5hZ2VDb2x1bW5UZW1wbGF0ZSIsIkdyaWRUZW1wbGF0ZSIsImZpcnN0SW5kZXgiLCJHZXRSb3dzSHRtbCIsInRlbXBsYXRlRnVuY3Rpb25Gb3JHcmlkIiwiY2FwdGlvbiIsInRlbXBsYXRlRnVuY3Rpb25Gb3JNYWluUm93IiwidGVtcGxhdGVGdW5jdGlvbkZvck1hbmFnZUNvbCIsInJlbmRlckh5YnJpZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0ZW1wbGF0ZUZ1bmN0aW9uRm9yRGV0YWlsc1JvdyIsInRlbXBsYXRlRnVuY3Rpb25Gb3JGb290ZXIiLCJzZWxlY3RlZCIsImlucHV0IiwiMyIsIjUiLCI2IiwiaW5kZW50IiwiQ29sdW1uIiwib3JkZXJlZCJdLCJtYXBwaW5ncyI6IkNBQUEsU0FBQUEsRUFBQUMsR0FDQSxnQkFBQUMsVUFBQSxnQkFBQUMsUUFDQUEsT0FBQUQsUUFB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LE9BQUEsY0FBQTVSLFVBQUFDLFdBQUFnRCxXQUFBbkQsRUFBQW1ELGNBQWdJOUMsRUFBQSxJQUNoUixzQkFDQ2dELFlBQUEsRUFBQXZCLFNBQUEsSzVCZzdDSyxTQUFVdEcsRUFBUUQsRUFBU1UsR0FFakMsWUFFQVksUUFBT0MsZUFBZXZCLEVBQVMsY0FBZ0JtQyxPQUFPLEc2QmwrQ3RELElBQU1xVSxHQUFTLFNBQUN2UyxHQUdaLE1BQU8sd0JBRm1CQSxFQUFJMkssT0FBUyxFQUFJM0ssRUFBSThRLE9BRUgsdUJBREo5USxFQUFJQyxHQUFLLE9BSXJEbEUsR0FBQXNDLFFBQWVrVSxHN0I0K0NULFNBQVV2VyxFQUFRRCxFQUFTVSxHQUVqQyxZQUVBWSxRQUFPQyxlQUFldkIsRUFBUyxjQUFnQm1DLE9BQU8sRzhCdC9DdEQsSUFBQTZQLEdBQUF0UixFQUFBLEdBRU0rVixFQUFVLFNBQUNyUyxHQUNiLE1BQUlBLEtBQVU0TixFQUFBM04sbUJBQW1Cb08sSUFDdEIsbURBQ0FyTyxJQUFVNE4sRUFBQTNOLG1CQUFtQm1PLEtBQzdCLHFEQUVBLGdLQUtmeFMsR0FBQXNDLFFBQWVtVSIsImZpbGUiOiJncmlkb28ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiaGFuZGxlYmFycy9ydW50aW1lXCIpLCByZXF1aXJlKFwialF1ZXJ5XCIpKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtcImhhbmRsZWJhcnMucnVudGltZVwiLCBcImpRdWVyeVwiXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJHcmlkb29cIl0gPSBmYWN0b3J5KHJlcXVpcmUoXCJoYW5kbGViYXJzL3J1bnRpbWVcIiksIHJlcXVpcmUoXCJqUXVlcnlcIikpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIkdyaWRvb1wiXSA9IGZhY3Rvcnkocm9vdFtcIkhhbmRsZWJhcnNcIl0sIHJvb3RbXCJqUXVlcnlcIl0pO1xufSkodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHRoaXMsIGZ1bmN0aW9uKF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfMF9fLCBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzRfXykge1xucmV0dXJuIFxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCJoYW5kbGViYXJzL3J1bnRpbWVcIiksIHJlcXVpcmUoXCJqUXVlcnlcIikpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW1wiaGFuZGxlYmFycy5ydW50aW1lXCIsIFwialF1ZXJ5XCJdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIkdyaWRvb1wiXSA9IGZhY3RvcnkocmVxdWlyZShcImhhbmRsZWJhcnMvcnVudGltZVwiKSwgcmVxdWlyZShcImpRdWVyeVwiKSk7XG5cdGVsc2Vcblx0XHRyb290W1wiR3JpZG9vXCJdID0gZmFjdG9yeShyb290W1wiSGFuZGxlYmFyc1wiXSwgcm9vdFtcImpRdWVyeVwiXSk7XG59KSh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDogdGhpcywgZnVuY3Rpb24oX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8wX18sIF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfNF9fKSB7XG5yZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEwKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogZXh0ZXJuYWwge1wicm9vdFwiOlwiSGFuZGxlYmFyc1wiLFwiYW1kXCI6XCJoYW5kbGViYXJzLnJ1bnRpbWVcIixcImNvbW1vbmpzMlwiOlwiaGFuZGxlYmFycy9ydW50aW1lXCIsXCJjb21tb25qc1wiOlwiaGFuZGxlYmFycy9ydW50aW1lXCJ9ICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzBfXztcblxuLyoqKi8gfSksXG4vKiAxICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2hicy9oZWxwZXJzL0Rpc2FibGVkLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgZGlzYWJsZWQgPSBmdW5jdGlvbiAoYm9vbCkge1xyXG4gICAgcmV0dXJuIGJvb2wgPyBcImRpc2FibGVkXCIgOiBcIlwiO1xyXG59O1xyXG5leHBvcnRzLmRlZmF1bHQgPSBkaXNhYmxlZDtcclxuXG5cbi8qKiovIH0pLFxuLyogMiAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2pzL3BhZ2luYXRpb24vUGFnZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIFBhZ2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUGFnZXIoKSB7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUGFnZXIsIFwiUGFnaW5hdGlvbkRhdGFcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gUGFnZXIucGFnaW5hdGlvbkRhdGE7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBQYWdlci5DYWxjdWxhdGVQYWdpbmF0aW9uRGF0YSA9IGZ1bmN0aW9uIChwYWdpbmF0aW9uSW5wdXQpIHtcclxuICAgICAgICB2YXIgcGFnaW5hdGlvbkRhdGEgPSB7fTtcclxuICAgICAgICBwYWdpbmF0aW9uRGF0YS5wYWdlSW5kZXggPSBwYWdpbmF0aW9uSW5wdXQucGFnZUluZGV4O1xyXG4gICAgICAgIHBhZ2luYXRpb25EYXRhLnBhZ2VTaXplID0gcGFnaW5hdGlvbklucHV0LnBhZ2VTaXplO1xyXG4gICAgICAgIHBhZ2luYXRpb25EYXRhLnBhZ2VTaXplcyA9IHBhZ2luYXRpb25JbnB1dC5wYWdlU2l6ZXM7XHJcbiAgICAgICAgcGFnaW5hdGlvbkRhdGEudG90YWxDb3VudCA9IHBhZ2luYXRpb25JbnB1dC50b3RhbENvdW50O1xyXG4gICAgICAgIHBhZ2luYXRpb25EYXRhLm5vT2ZQYWdlcyA9IE1hdGguY2VpbChwYWdpbmF0aW9uSW5wdXQudG90YWxDb3VudCAvIHBhZ2luYXRpb25JbnB1dC5wYWdlU2l6ZSk7XHJcbiAgICAgICAgdmFyIG1pbk51bSA9ICgocGFnaW5hdGlvbklucHV0LnBhZ2VJbmRleCAtIDEpICogcGFnaW5hdGlvbklucHV0LnBhZ2VTaXplKTtcclxuICAgICAgICB2YXIgbG93ZXJMaW1pdE9mZnNldCA9IHBhZ2luYXRpb25JbnB1dC5wYWdlU2l6ZSA+IHBhZ2luYXRpb25JbnB1dC50b3RhbENvdW50ID9cclxuICAgICAgICAgICAgcGFnaW5hdGlvbklucHV0LnRvdGFsQ291bnQgOlxyXG4gICAgICAgICAgICBwYWdpbmF0aW9uSW5wdXQucGFnZVNpemU7XHJcbiAgICAgICAgcGFnaW5hdGlvbkRhdGEucmFuZ2UgPSB7XHJcbiAgICAgICAgICAgIG1pbjogbWluTnVtICsgMSxcclxuICAgICAgICAgICAgbWF4OiBtaW5OdW0gKyBsb3dlckxpbWl0T2Zmc2V0LFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcGFnaW5hdGlvbkRhdGEuZmlyc3RQYWdlTGlua0Rpc2FibGVkID0gcGFnaW5hdGlvbkRhdGEubm9PZlBhZ2VzID09PSAxIHx8IHBhZ2luYXRpb25EYXRhLnBhZ2VJbmRleCA9PT0gMTtcclxuICAgICAgICBwYWdpbmF0aW9uRGF0YS5sYXN0UGFnZUxpbmtEaXNhYmxlZCA9IHBhZ2luYXRpb25EYXRhLm5vT2ZQYWdlcyA9PT0gMVxyXG4gICAgICAgICAgICB8fCAocGFnaW5hdGlvbkRhdGEucGFnZUluZGV4ID09PSBwYWdpbmF0aW9uRGF0YS5ub09mUGFnZXMpO1xyXG4gICAgICAgIHBhZ2luYXRpb25EYXRhLnByZXZQYWdlTGlua0Rpc2FibGVkID0gcGFnaW5hdGlvbkRhdGEucGFnZUluZGV4ID09PSAxXHJcbiAgICAgICAgICAgIHx8IChwYWdpbmF0aW9uRGF0YS5wYWdlSW5kZXggLSAxKSA8PSAwO1xyXG4gICAgICAgIHBhZ2luYXRpb25EYXRhLm5leHRQYWdlTGlua0Rpc2FibGVkID0gcGFnaW5hdGlvbkRhdGEubm9PZlBhZ2VzID09PSBwYWdpbmF0aW9uRGF0YS5wYWdlSW5kZXhcclxuICAgICAgICAgICAgfHwgKHBhZ2luYXRpb25EYXRhLnBhZ2VJbmRleCArIDEpID49IHBhZ2luYXRpb25EYXRhLm5vT2ZQYWdlcztcclxuICAgICAgICBQYWdlci5wYWdpbmF0aW9uRGF0YSA9IHBhZ2luYXRpb25EYXRhO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBQYWdlcjtcclxufSgpKTtcclxuZXhwb3J0cy5QYWdlciA9IFBhZ2VyO1xyXG5cblxuLyoqKi8gfSksXG4vKiAzICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9qcy91dGlsL0NvbHVtblV0aWwudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgQ29tbW9uVXRpbCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIENvbW1vblV0aWwoKSB7XHJcbiAgICB9XHJcbiAgICBDb21tb25VdGlsLkdldENvbHVtbk9iamVjdCA9IGZ1bmN0aW9uIChjb2x1bW5JZCwgY29sdW1ucykge1xyXG4gICAgICAgIGlmIChjb2x1bW5JZCA9PSBudWxsIHx8IGNvbHVtbnMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHJldENvbDtcclxuICAgICAgICBjb2x1bW5zLmZvckVhY2goZnVuY3Rpb24gKGNvbCkge1xyXG4gICAgICAgICAgICBpZiAoY29sLmlkID09PSBjb2x1bW5JZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0Q29sID0gY29sO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHJldENvbDtcclxuICAgIH07XHJcbiAgICBDb21tb25VdGlsLlNldE9yZGVyID0gZnVuY3Rpb24gKGNvbHVtbklkLCBvcmRlciwgY29sdW1ucykge1xyXG4gICAgICAgIGlmIChjb2x1bW5JZCA9PSBudWxsIHx8IGNvbHVtbnMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHJldENvbDtcclxuICAgICAgICBjb2x1bW5zLmZvckVhY2goZnVuY3Rpb24gKGNvbCkge1xyXG4gICAgICAgICAgICBpZiAoY29sLmlkID09PSBjb2x1bW5JZCkge1xyXG4gICAgICAgICAgICAgICAgY29sLm9yZGVyID0gb3JkZXI7XHJcbiAgICAgICAgICAgICAgICByZXRDb2wgPSBjb2w7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcmV0Q29sO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBDb21tb25VdGlsO1xyXG59KCkpO1xyXG5leHBvcnRzLkNvbW1vblV0aWwgPSBDb21tb25VdGlsO1xyXG5cblxuLyoqKi8gfSksXG4vKiA0ICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIGV4dGVybmFsIFwialF1ZXJ5XCIgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZHluYW1pYyBleHBvcnRzIHByb3ZpZGVkICovXG4vKiEgYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfNF9fO1xuXG4vKioqLyB9KSxcbi8qIDUgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9qcy9tb2RlbHMvR3JpZE9yZGVyRGlyZWN0aW9uLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZHluYW1pYyBleHBvcnRzIHByb3ZpZGVkICovXG4vKiEgYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBHcmlkT3JkZXJEaXJlY3Rpb247XHJcbihmdW5jdGlvbiAoR3JpZE9yZGVyRGlyZWN0aW9uKSB7XHJcbiAgICBHcmlkT3JkZXJEaXJlY3Rpb25bXCJOb25lXCJdID0gXCJOb25lXCI7XHJcbiAgICBHcmlkT3JkZXJEaXJlY3Rpb25bXCJBc2NcIl0gPSBcIkFzY1wiO1xyXG4gICAgR3JpZE9yZGVyRGlyZWN0aW9uW1wiRGVzY1wiXSA9IFwiRGVzY1wiO1xyXG59KShHcmlkT3JkZXJEaXJlY3Rpb24gPSBleHBvcnRzLkdyaWRPcmRlckRpcmVjdGlvbiB8fCAoZXhwb3J0cy5HcmlkT3JkZXJEaXJlY3Rpb24gPSB7fSkpO1xyXG5cblxuLyoqKi8gfSksXG4vKiA2ICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9oYnMvZ3JpZC1kZXRhaWxzLXJvdy5oYnMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIEhhbmRsZWJhcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBoYW5kbGViYXJzICovIDApO1xuZnVuY3Rpb24gX19kZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIChvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmopOyB9XG5tb2R1bGUuZXhwb3J0cyA9IChIYW5kbGViYXJzW1wiZGVmYXVsdFwiXSB8fCBIYW5kbGViYXJzKS50ZW1wbGF0ZSh7XCIxXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxLCBoZWxwZXIsIGFsaWFzMT1kZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLCBhbGlhczI9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBhbGlhczM9XCJmdW5jdGlvblwiLCBhbGlhczQ9Y29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb247XG5cbiAgcmV0dXJuIFwiICAgICAgICAgICAgICAgIDx0cj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFwiZ3VpIHJ2LXBhcmVudFxcXCIgdmFsaWduPVxcXCJ0b3BcXFwiIGRhdGEtZmlsdGVyLXR5cGU9XFxcIlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy50eXBlIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC50eXBlIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJ0eXBlXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcXCIgZGF0YS1maWx0ZXIta2V5PVxcXCJcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuaWQgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmlkIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJpZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXFwiIGRhdGEtZmlsdGVyLXZhbHVlPVxcXCJcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuYWN0dWFsVmFsdWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmFjdHVhbFZhbHVlIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJhY3R1YWxWYWx1ZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5jb2x1bW5OYW1lIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jb2x1bW5OYW1lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJjb2x1bW5OYW1lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIjwvc3Bhbj5cXHJcXG5cIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzW1wiaWZcIl0uY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmZpbHRlcmFibGUgOiBkZXB0aDApLHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDIsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIiAgICAgICAgICAgICAgICAgICAgPC90ZD5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDx0ZD5cIlxuICAgICsgKChzdGFjazEgPSAoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmNvbHVtblZhbHVlIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jb2x1bW5WYWx1ZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwiY29sdW1uVmFsdWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIjwvdGQ+XFxyXFxuICAgICAgICAgICAgICAgIDwvdHI+XFxyXFxuXCI7XG59LFwiMlwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgcmV0dXJuIFwiICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImd1aSBtLWwtNSBydi1jaGlsZCBndWktY2FwdGlvblxcXCIgPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cXFwiZ3VpIGd1aS1pY29uIGd1aS1pY29uLWFkZCBob3ZlciBtLWwtNSBjdXJzb3ItcG9pbnRlciBhZGRGaWx0ZXJcXFwiPjwvaT5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XFxcImd1aSBndWktaWNvbiBndWktaWNvbi1taW51cyBob3ZlciBtLWwtNSBjdXJzb3ItcG9pbnRlciByZW1vdmVGaWx0ZXJcXFwiPjwvaT5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxyXFxuXCI7XG59LFwiY29tcGlsZXJcIjpbNyxcIj49IDQuMC4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMSwgaGVscGVyLCBhbGlhczE9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KTtcblxuICByZXR1cm4gXCI8dHIgY2xhc3M9XFxcImd1aSBndWktaGlkZGVuIGRldGFpbHNSb3dcXFwiPlxcclxcbiAgICA8dGQgY29sc3Bhbj1cXFwiXCJcbiAgICArIGNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubGVuZ3RoIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5sZW5ndGggOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVycy5oZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gXCJmdW5jdGlvblwiID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcImxlbmd0aFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXFwiPlxcclxcbiAgICAgICAgPHRhYmxlIGNsYXNzPVxcXCJndWkgdmVyeSBjb21wYWN0IHNlbGVjdGFibGUgY2VsbGVkIHRhYmxlIGRldGFpbHNUYWJsZSBtLWwtMzcgcC01XFxcIiBzdHlsZT1cXFwid2lkdGg6IGF1dG87XFxcIiA+XFxyXFxuICAgICAgICAgICAgPHRib2R5PlxcclxcblwiXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGFsaWFzMSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubWFpblJvd0NvbEFycmF5IDogZGVwdGgwKSx7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDEsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIiAgICAgICAgICAgIDwvdGJvZHk+XFxyXFxuICAgICAgICA8L3RhYmxlPlxcclxcbiAgICA8L3RkPlxcclxcbjwvdHI+XCI7XG59LFwidXNlRGF0YVwiOnRydWV9KTtcblxuLyoqKi8gfSksXG4vKiA3ICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvaGJzL2dyaWQtZm9vdGVyLmhicyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIEhhbmRsZWJhcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBoYW5kbGViYXJzICovIDApO1xuZnVuY3Rpb24gX19kZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIChvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmopOyB9XG5tb2R1bGUuZXhwb3J0cyA9IChIYW5kbGViYXJzW1wiZGVmYXVsdFwiXSB8fCBIYW5kbGViYXJzKS50ZW1wbGF0ZSh7XCIxXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEsYmxvY2tQYXJhbXMsZGVwdGhzKSB7XG4gICAgdmFyIHN0YWNrMSwgYWxpYXMxPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uO1xuXG4gIHJldHVybiBcIiAgICAgICAgPG9wdGlvbiBcIlxuICAgICsgYWxpYXMxKF9fZGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3NyYy9oYnMvaGVscGVycy9TZWxlY3RlZC50cyAqLyAyMykpLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwoKHN0YWNrMSA9IChkZXB0aHNbMV0gIT0gbnVsbCA/IGRlcHRoc1sxXS5wYWdpbmF0aW9uRGF0YSA6IGRlcHRoc1sxXSkpICE9IG51bGwgPyBzdGFjazEucGFnZVNpemUgOiBzdGFjazEpLGRlcHRoMCx7XCJuYW1lXCI6XCJTZWxlY3RlZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSlcbiAgICArIFwiPlwiXG4gICAgKyBhbGlhczEoY29udGFpbmVyLmxhbWJkYShkZXB0aDAsIGRlcHRoMCkpXG4gICAgKyBcIjwvb3B0aW9uPlxcclxcblwiO1xufSxcImNvbXBpbGVyXCI6WzcsXCI+PSA0LjAuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSxibG9ja1BhcmFtcyxkZXB0aHMpIHtcbiAgICB2YXIgc3RhY2sxLCBhbGlhczE9Y29udGFpbmVyLmxhbWJkYSwgYWxpYXMyPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uLCBhbGlhczM9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KTtcblxuICByZXR1cm4gXCI8ZGl2IGRhdGEtcm9sZT1cXFwicGFnZXJcXFwiIGNsYXNzPVxcXCJndWkgZ3VpLXN1YmhlYWRpbmctMSB0ZXh0LWxlZnQgbS0wXFxcIj5cXHJcXG4gICAgPHNwYW4gY2xhc3M9XFxcImd1aSBtaW5pIGNvbXBhY3QgXFxcIj5cXHJcXG4gICAgICAgIDxidXR0b24gY2xhc3M9XFxcImd1aSBtaW5pIGNvbXBhY3QgZmlyc3RMaW5rXFxcIiBhcmlhLWRpc2FibGVkPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5wYWdpbmF0aW9uRGF0YSA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEuZmlyc3RQYWdlTGlua0Rpc2FibGVkIDogc3RhY2sxKSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIiBcIlxuICAgICsgYWxpYXMyKF9fZGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3NyYy9oYnMvaGVscGVycy9EaXNhYmxlZC50cyAqLyAxKSkuY2FsbChhbGlhczMsKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucGFnaW5hdGlvbkRhdGEgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLmZpcnN0UGFnZUxpbmtEaXNhYmxlZCA6IHN0YWNrMSkse1wibmFtZVwiOlwiRGlzYWJsZWRcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpXG4gICAgKyBcIlxcclxcbiAgICAgICAgICAgIGFyaWEtbGFiZWw9XFxcIkdvIHRvIHRoZSBmaXJzdCBwYWdlXFxcIiB0aXRsZT1cXFwiR28gdG8gdGhlIGZpcnN0IHBhZ2VcXFwiIGRhdGEtcGFnZT1cXFwiMVxcXCIgdGFiaW5kZXg9XFxcIjBcXFwiPlxcclxcbiAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJndWktaWNvbiBndWktaWNvbi1wcmV2aW91c1xcXCI+PC9pPlxcclxcbiAgICAgICAgPC9idXR0b24+XFxyXFxuICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJndWkgbWluaSBjb21wYWN0IHByZXZMaW5rXFxcIiBhcmlhLWRpc2FibGVkPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5wYWdpbmF0aW9uRGF0YSA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEucHJldlBhZ2VMaW5rRGlzYWJsZWQgOiBzdGFjazEpLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIFwiXG4gICAgKyBhbGlhczIoX19kZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc3JjL2hicy9oZWxwZXJzL0Rpc2FibGVkLnRzICovIDEpKS5jYWxsKGFsaWFzMywoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5wYWdpbmF0aW9uRGF0YSA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEucHJldlBhZ2VMaW5rRGlzYWJsZWQgOiBzdGFjazEpLHtcIm5hbWVcIjpcIkRpc2FibGVkXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKVxuICAgICsgXCJcXHJcXG4gICAgICAgICAgICBhcmlhLWxhYmVsPVxcXCJHbyB0byB0aGUgcHJldmlvdXMgcGFnZVxcXCIgdGl0bGU9XFxcIkdvIHRvIHRoZSBwcmV2aW91cyBwYWdlXFxcIiBkYXRhLXBhZ2U9XFxcIlwiXG4gICAgKyBhbGlhczIoX19kZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc3JjL2hicy9oZWxwZXJzL21hdGgudHMgKi8gOCkpLmNhbGwoYWxpYXMzLCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnBhZ2luYXRpb25EYXRhIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5wYWdlSW5kZXggOiBzdGFjazEpLFwiLVwiLDEse1wibmFtZVwiOlwibWF0aFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSlcbiAgICArIFwiXFxcIlxcclxcbiAgICAgICAgICAgIHRhYmluZGV4PVxcXCIwXFxcIj5cXHJcXG4gICAgICAgICAgICA8aSBjbGFzcz1cXFwiZ3VpLWljb24gZ3VpLWljb24tY2hldnJvbi1sZWZ0XFxcIj48L2k+XFxyXFxuICAgICAgICAgICAgUHJldlxcclxcbiAgICAgICAgPC9idXR0b24+XFxyXFxuICAgIDwvc3Bhbj5cXHJcXG4gICAgPHNwYW4gY2xhc3M9XFxcImd1aSBwYWdlci1pbnB1dC1jb250YWluZXIgaW5wdXRcXFwiPlxcclxcbiAgICAgICAgPHNwYW4gY2xhc3M9XFxcImd1aSBtLXItNVxcXCI+IFBhZ2UgPC9zcGFuPlxcclxcbiAgICAgICAgPGlucHV0IGNsYXNzPVxcXCJndWkgcGFnZXItaW5wdXQgdy0yNSBwLTAgbS1yLTVcXFwiIGFyaWEtbGFiZWw9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnBhZ2luYXRpb25EYXRhIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5wYWdlSW5kZXggOiBzdGFjazEpLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIHZhbHVlPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5wYWdpbmF0aW9uRGF0YSA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEucGFnZUluZGV4IDogc3RhY2sxKSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIiB0eXBlPVxcXCJ0ZXh0XFxcIiBwbGFjZWhvbGRlcj1cXFwiUGFnZSBOdW1iZXIgLi4uXFxcIj5cXHJcXG4gICAgICAgIDxzcGFuIGNsYXNzPVxcXCJuby1vZi1wYWdlcy1zY2FuXFxcIiBkYXRhLW51bWJlci1vZi1wYWdlcz1cXFwiXCJcbiAgICArIGFsaWFzMihhbGlhczEoKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucGFnaW5hdGlvbkRhdGEgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLm5vT2ZQYWdlcyA6IHN0YWNrMSksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCI+IG9mIFwiXG4gICAgKyBhbGlhczIoYWxpYXMxKCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnBhZ2luYXRpb25EYXRhIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5ub09mUGFnZXMgOiBzdGFjazEpLCBkZXB0aDApKVxuICAgICsgXCI8L3NwYW4+XFxyXFxuICAgIDwvc3Bhbj5cXHJcXG4gICAgPHNwYW4gY2xhc3M9XFxcImd1aSBtaW5pIGNvbXBhY3QgXFxcIj5cXHJcXG4gICAgICAgIDxidXR0b24gY2xhc3M9XFxcImd1aSBtaW5pIGNvbXBhY3QgbmV4dExpbmtcXFwiIGFyaWEtZGlzYWJsZWQ9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnBhZ2luYXRpb25EYXRhIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5uZXh0UGFnZUxpbmtEaXNhYmxlZCA6IHN0YWNrMSksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCIgXCJcbiAgICArIGFsaWFzMihfX2RlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9zcmMvaGJzL2hlbHBlcnMvRGlzYWJsZWQudHMgKi8gMSkpLmNhbGwoYWxpYXMzLCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnBhZ2luYXRpb25EYXRhIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5uZXh0UGFnZUxpbmtEaXNhYmxlZCA6IHN0YWNrMSkse1wibmFtZVwiOlwiRGlzYWJsZWRcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpXG4gICAgKyBcIlxcclxcbiAgICAgICAgICAgIGFyaWEtbGFiZWw9XFxcIkdvIHRvIHRoZSBuZXh0IHBhZ2VcXFwiIHRpdGxlPVxcXCJHbyB0byB0aGUgbmV4dCBwYWdlXFxcIiBkYXRhLXBhZ2U9XFxcIlwiXG4gICAgKyBhbGlhczIoX19kZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc3JjL2hicy9oZWxwZXJzL21hdGgudHMgKi8gOCkpLmNhbGwoYWxpYXMzLCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnBhZ2luYXRpb25EYXRhIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5wYWdlSW5kZXggOiBzdGFjazEpLFwiK1wiLDEse1wibmFtZVwiOlwibWF0aFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSlcbiAgICArIFwiXFxcIiB0YWJpbmRleD1cXFwiMFxcXCI+XFxyXFxuICAgICAgICAgICAgTmV4dFxcclxcbiAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJndWktaWNvbiBndWktaWNvbi1jaGV2cm9uLXJpZ2h0XFxcIj48L2k+XFxyXFxuICAgICAgICA8L2J1dHRvbj5cXHJcXG4gICAgICAgIDxidXR0b24gY2xhc3M9XFxcImd1aSBtaW5pIGNvbXBhY3QgbGFzdExpbmtcXFwiIGFyaWEtZGlzYWJsZWQ9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnBhZ2luYXRpb25EYXRhIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5sYXN0UGFnZUxpbmtEaXNhYmxlZCA6IHN0YWNrMSksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCIgXCJcbiAgICArIGFsaWFzMihfX2RlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9zcmMvaGJzL2hlbHBlcnMvRGlzYWJsZWQudHMgKi8gMSkpLmNhbGwoYWxpYXMzLCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnBhZ2luYXRpb25EYXRhIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5sYXN0UGFnZUxpbmtEaXNhYmxlZCA6IHN0YWNrMSkse1wibmFtZVwiOlwiRGlzYWJsZWRcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpXG4gICAgKyBcIlxcclxcbiAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPVxcXCJHbyB0byB0aGUgbGFzdCBwYWdlXFxcIiB0aXRsZT1cXFwiR28gdG8gdGhlIGxhc3QgcGFnZVxcXCIgZGF0YS1wYWdlPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5wYWdpbmF0aW9uRGF0YSA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEubm9PRnBhZ2VzIDogc3RhY2sxKSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIiB0YWJpbmRleD1cXFwiMFxcXCI+XFxyXFxuICAgICAgICAgICAgPGkgY2xhc3M9XFxcImd1aS1pY29uIGd1aS1pY29uLW5leHRcXFwiPjwvaT5cXHJcXG4gICAgICAgIDwvYnV0dG9uPlxcclxcbiAgICA8L3NwYW4+XFxyXFxuPC9kaXY+XFxyXFxuPGRpdiBjbGFzcz1cXFwiZ3VpIGd1aS1zdWJoZWFkaW5nLTEgdGV4dC1yaWdodCBtLTBcXFwiPlxcclxcbiAgICA8c3Bhbj5Sb3dzIFBlciBQYWdlPC9zcGFuPlxcclxcbiAgICA8c2VsZWN0IGNsYXNzPVxcXCJndWkgcGFnZVNpemVTZWxlY3RvclxcXCI+XFxyXFxuXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoYWxpYXMzLCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnBhZ2luYXRpb25EYXRhIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5wYWdlU2l6ZXMgOiBzdGFjazEpLHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMSwgZGF0YSwgMCwgYmxvY2tQYXJhbXMsIGRlcHRocyksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiICAgIDwvc2VsZWN0PlxcclxcbiAgICA8c3BhbiBjbGFzcz1cXFwiZ3VpIG0tbC0xMFxcXCI+XCJcbiAgICArIGFsaWFzMihhbGlhczEoKChzdGFjazEgPSAoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5wYWdpbmF0aW9uRGF0YSA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEucmFuZ2UgOiBzdGFjazEpKSAhPSBudWxsID8gc3RhY2sxLm1pbiA6IHN0YWNrMSksIGRlcHRoMCkpXG4gICAgKyBcIiAtIFwiXG4gICAgKyBhbGlhczIoYWxpYXMxKCgoc3RhY2sxID0gKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucGFnaW5hdGlvbkRhdGEgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLnJhbmdlIDogc3RhY2sxKSkgIT0gbnVsbCA/IHN0YWNrMS5tYXggOiBzdGFjazEpLCBkZXB0aDApKVxuICAgICsgXCIgb2YgXCJcbiAgICArIGFsaWFzMihhbGlhczEoKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucGFnaW5hdGlvbkRhdGEgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLnRvdGFsQ291bnQgOiBzdGFjazEpLCBkZXB0aDApKVxuICAgICsgXCIgaXRlbXM8L3NwYW4+XFxyXFxuPC9kaXY+XCI7XG59LFwidXNlRGF0YVwiOnRydWUsXCJ1c2VEZXB0aHNcIjp0cnVlfSk7XG5cbi8qKiovIH0pLFxuLyogOCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2hicy9oZWxwZXJzL21hdGgudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIG1hdGggPSBmdW5jdGlvbiAobHZhbHVlLCBvcGVyYXRvciwgcnZhbHVlLCBvcHRpb25zKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIFwiK1wiOiBsdmFsdWUgKyBydmFsdWUsXHJcbiAgICAgICAgXCItXCI6IGx2YWx1ZSAtIHJ2YWx1ZSxcclxuICAgICAgICBcIipcIjogbHZhbHVlICogcnZhbHVlLFxyXG4gICAgICAgIFwiL1wiOiBsdmFsdWUgLyBydmFsdWUsXHJcbiAgICAgICAgXCIlXCI6IGx2YWx1ZSAlIHJ2YWx1ZSxcclxuICAgIH1bb3BlcmF0b3JdO1xyXG59O1xyXG5leHBvcnRzLmRlZmF1bHQgPSBtYXRoO1xyXG5cblxuLyoqKi8gfSksXG4vKiA5ICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9oYnMvZ3JpZC1tYWluLXJvdy5oYnMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIEhhbmRsZWJhcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBoYW5kbGViYXJzICovIDApO1xuZnVuY3Rpb24gX19kZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIChvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmopOyB9XG5tb2R1bGUuZXhwb3J0cyA9IChIYW5kbGViYXJzW1wiZGVmYXVsdFwiXSB8fCBIYW5kbGViYXJzKS50ZW1wbGF0ZSh7XCIxXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxLCBhbGlhczE9Y29udGFpbmVyLmxhbWJkYSwgYWxpYXMyPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uO1xuXG4gIHJldHVybiBcIjx0ciBjbGFzcz1cXFwibWFpblJvd1xcXCIgZGF0YS1way1hdHRyPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAua2V5Q29sdW1uIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIiA+XFxyXFxuICAgIDx0ZCBjbGFzcz1cXFwiZXhwYW5zaW9uQXJyb3dzXFxcIiBzdHlsZT1cXFwiZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXI7XFxcIj5cXHJcXG4gICAgICAgIDxpIGNsYXNzPVxcXCJndWkgZ3VpLWljb24gZ3VpLWljb24tY2hldnJvbi1kb3duIGV4cGFuZERldGFpbHNSb3dJY29uIGN1cnNvci1wb2ludGVyXFxcIiBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCI+PC9pPlxcclxcbiAgICAgICAgPGkgY2xhc3M9XFxcImd1aSBndWktaWNvbiBndWktaWNvbi1jaGV2cm9uLXVwIENvbGxhcHNlRGV0YWlsc1Jvd0ljb24gY3Vyc29yLXBvaW50ZXIgZ3VpLWhpZGRlblxcXCIgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiPjwvaT5cXHJcXG4gICAgPC90ZD5cXHJcXG4gICAgPHRkPlxcclxcbiAgICAgICAgPGlucHV0IHR5cGU9XFxcImNoZWNrYm94XFxcIiBkYXRhLXZhbHVlPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucm93RGF0YSA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCIgdmFsdWU9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5rZXlDb2x1bW4gOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIGNsYXNzPVxcXCJzZWxlY3Qta2V5LWNoZWNrYm94IGN1cnNvci1wb2ludGVyXFxcIj5cXHJcXG4gICAgPC90ZD5cXHJcXG5cIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzLmVhY2guY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5tYWluUm93Q29sQXJyYXkgOiBkZXB0aDApLHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMiwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiPC90cj5cXHJcXG5cIlxuICAgICsgKChzdGFjazEgPSBjb250YWluZXIuaW52b2tlUGFydGlhbChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3NyYy9oYnMvZ3JpZC1kZXRhaWxzLXJvdy5oYnMgKi8gNiksZGVwdGgwLHtcIm5hbWVcIjpcImdyaWQtZGV0YWlscy1yb3dcIixcImRhdGFcIjpkYXRhLFwiaGVscGVyc1wiOmhlbHBlcnMsXCJwYXJ0aWFsc1wiOnBhcnRpYWxzLFwiZGVjb3JhdG9yc1wiOmNvbnRhaW5lci5kZWNvcmF0b3JzfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCIgXCI7XG59LFwiMlwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMSwgYWxpYXMxPWNvbnRhaW5lci5sYW1iZGEsIGFsaWFzMj1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbjtcblxuICByZXR1cm4gXCIgICAgICAgIDx0ZCB0aXRsZT1cXFwiXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmFjdHVhbFZhbHVlIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIiBjbGFzcz1cXFwiYm9keS1cIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuaWQgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCJcXFwiPlwiXG4gICAgKyAoKHN0YWNrMSA9IGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY29sdW1uVmFsdWUgOiBkZXB0aDApLCBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiPC90ZD5cXHJcXG5cIjtcbn0sXCJjb21waWxlclwiOls3LFwiPj0gNC4wLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxO1xuXG4gIHJldHVybiAoKHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm1haW5Sb3dBcnJheSA6IGRlcHRoMCkse1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgxLCBkYXRhLCAwKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKTtcbn0sXCJ1c2VQYXJ0aWFsXCI6dHJ1ZSxcInVzZURhdGFcIjp0cnVlfSk7XG5cbi8qKiovIH0pLFxuLyogMTAgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2pzL21haW4vR3JpZC50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZHluYW1pYyBleHBvcnRzIHByb3ZpZGVkICovXG4vKiEgYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBqUXVlcnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBqcXVlcnkgKi8gNCk7XHJcbnZhciBDb25maWdTdG9yZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vY29uZmlnL0NvbmZpZ1N0b3JlICovIDExKTtcclxudmFyIENvbFNldHRpbmdzSGFuZGxlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vZXZlbnRIYW5kbGVycy9Db2xTZXR0aW5nc0hhbmRsZXIgKi8gMTIpO1xyXG52YXIgU2VsZWN0RXZlbnRIYW5kbGVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9ldmVudEhhbmRsZXJzL1NlbGVjdEV2ZW50SGFuZGxlciAqLyAxMyk7XHJcbnZhciBQYWdlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vcGFnaW5hdGlvbi9QYWdlciAqLyAyKTtcclxudmFyIERldGFpbHNSb3dIYW5kbGVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLy4uL2V2ZW50SGFuZGxlcnMvRGV0YWlsc1Jvd0hhbmRsZXIgKi8gMTQpO1xyXG52YXIgRmlsdGVyQ2xpY2tIYW5kbGVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLy4uL2V2ZW50SGFuZGxlcnMvRmlsdGVyQ2xpY2tIYW5kbGVyICovIDE1KTtcclxudmFyIEhhbmRsZXJOYW1lc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi8uLi9ldmVudEhhbmRsZXJzL0hhbmRsZXJOYW1lcyAqLyAxNyk7XHJcbnZhciBIZWFkZXJDbGlja0hhbmRsZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vLi4vZXZlbnRIYW5kbGVycy9IZWFkZXJDbGlja0hhbmRsZXIgKi8gMTgpO1xyXG52YXIgUGFnZVNlYXJjaENsaWNrSGFuZGxlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi8uLi9ldmVudEhhbmRsZXJzL1BhZ2VTZWFyY2hDbGlja0hhbmRsZXIgKi8gMTkpO1xyXG52YXIgU2Nyb2xsSGFuZGxlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi8uLi9ldmVudEhhbmRsZXJzL1Njcm9sbEhhbmRsZXIgKi8gMjApO1xyXG52YXIgVG9nZ2xlQ29sdW1uSGFuZGxlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi8uLi9ldmVudEhhbmRsZXJzL1RvZ2dsZUNvbHVtbkhhbmRsZXIgKi8gMjEpO1xyXG52YXIgR3JpZFRlbXBsYXRlU2VydmljZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi8uLi9zZXJ2aWNlcy9HcmlkVGVtcGxhdGVTZXJ2aWNlICovIDIyKTtcclxudmFyIEdyaWQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBHcmlkKG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuYmluZERhdGEgPSBmdW5jdGlvbiAoZGF0YSwgcGFnaW5hdGlvbklucHV0KSB7XHJcbiAgICAgICAgICAgIHZhciBmaXJzdEluZGV4ID0gMDtcclxuICAgICAgICAgICAgdmFyIGxhc3RJbmRleCA9IF90aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuY2h1bmtTaXplICsgX3RoaXMuZ2V0SW5pdGlhbFJvd0NvdW50KCk7XHJcbiAgICAgICAgICAgIGxhc3RJbmRleCA9IGxhc3RJbmRleCA+PSBkYXRhLmxlbmd0aCA/IGRhdGEubGVuZ3RoIC0gMSA6IGxhc3RJbmRleDtcclxuICAgICAgICAgICAgUGFnZXJfMS5QYWdlci5DYWxjdWxhdGVQYWdpbmF0aW9uRGF0YShwYWdpbmF0aW9uSW5wdXQpO1xyXG4gICAgICAgICAgICB2YXIgZ3JpZENvbnRlbnQgPSBfdGhpcy5ncmlkVGVtcGxhdGVTZXJ2aWNlLkdldEZpcnN0VGVtcGxhdGUoZGF0YSwgZmlyc3RJbmRleCwgbGFzdEluZGV4KTtcclxuICAgICAgICAgICAgX3RoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5jb250YWluZXJFbGVtZW50LmlubmVySFRNTCA9IGdyaWRDb250ZW50O1xyXG4gICAgICAgICAgICBpZiAoX3RoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5tYW5hZ2VDb2xTZXR0aW5nc0NvbnRhaW5lciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5iaW5kTWFuYWdlQ29sdW1zKF90aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMubWFuYWdlQ29sU2V0dGluZ3NDb250YWluZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIEhhdmUgdG8gYmluZCBTY3JvbGwgSGFuZGxlciBBZnRlciBET00gaGFzIGJlZW4gY3JlYXRlZFxyXG4gICAgICAgICAgICBpZiAoX3RoaXMuc2Nyb2xsSGFuZGxlciAhPT0gdW5kZWZpbmVkICYmIF90aGlzLnNjcm9sbEhhbmRsZXIgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLnNjcm9sbEhhbmRsZXIucmVtb3ZlSGFuZGxlcigpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuc2Nyb2xsSGFuZGxlci5yZXNldFBhcmVudE9mZnNldCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuc2Nyb2xsSGFuZGxlciA9IG5ldyBTY3JvbGxIYW5kbGVyXzEuU2Nyb2xsSGFuZGxlcihfdGhpcy5jb25maWdTdG9yZSwgX3RoaXMuZ3JpZFRlbXBsYXRlU2VydmljZSwgbGFzdEluZGV4ICsgMSk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5zY3JvbGxIYW5kbGVyLndhdGNoV2lkdGgoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfdGhpcy5zY3JvbGxIYW5kbGVyLlJlZ2lzdGVyRG9tSGFuZGxlcigpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5iaW5kTWFuYWdlQ29sdW1zID0gZnVuY3Rpb24gKG1hbmFnZUNvbENvbnRhaW5lciwgZm9yY2UpIHtcclxuICAgICAgICAgICAgaWYgKF90aGlzLm1hbmFnZUNvbEhhbmRsZXIgIT09IHVuZGVmaW5lZCAmJiAhZm9yY2UpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgaHRtbCA9IF90aGlzLmdyaWRUZW1wbGF0ZVNlcnZpY2UuR2V0TWFuYWdlQ29sdW1uc0h0bWwoKTtcclxuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBqUXVlcnkobWFuYWdlQ29sQ29udGFpbmVyXHJcbiAgICAgICAgICAgICAgICB8fCBfdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLm1hbmFnZUNvbFNldHRpbmdzQ29udGFpbmVyXHJcbiAgICAgICAgICAgICAgICB8fCBfdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmNvbnRhaW5lckVsZW1lbnQpO1xyXG4gICAgICAgICAgICBfdGhpcy50b2dnbGVIYW5kbGVyID0gbmV3IFRvZ2dsZUNvbHVtbkhhbmRsZXJfMS5Ub2dnbGVDb2x1bW5IYW5kbGVyKF90aGlzLmNvbmZpZ1N0b3JlLCBqUXVlcnkoX3RoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5jb250YWluZXJFbGVtZW50KSk7XHJcbiAgICAgICAgICAgIF90aGlzLmNvbmZpZ1N0b3JlLm9wdGlvbnMubWFuYWdlQ29sU2V0dGluZ3NDb250YWluZXIgPSBlbGVtZW50WzBdO1xyXG4gICAgICAgICAgICBfdGhpcy5tYW5hZ2VDb2xIYW5kbGVyID0gbmV3IENvbFNldHRpbmdzSGFuZGxlcl8xLkNvbFNldHRpbmdzSGFuZGxlcihqUXVlcnkoZWxlbWVudCksIF90aGlzLmNvbmZpZ1N0b3JlLCBfdGhpcy50b2dnbGVIYW5kbGVyKTtcclxuICAgICAgICAgICAgZWxlbWVudC5maW5kKFwiLmNvbC1zZXR0aW5ncy1jb250YWluZXJcIikuaHRtbChodG1sKTtcclxuICAgICAgICAgICAgX3RoaXMubWFuYWdlQ29sSGFuZGxlci5SZWdpc3RlckRvbUhhbmRsZXIoKTtcclxuICAgICAgICAgICAgalF1ZXJ5KHdpbmRvdykucmVzaXplKF90aGlzLmRvY3VtZW50UmVzaXplSGFuZGxlckZvckNzKTtcclxuICAgICAgICAgICAgalF1ZXJ5KGRvY3VtZW50KS5jbGljayhfdGhpcy5kb2N1bWVudENsaWNrSGFuZGxlckZvckNzKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuYXBwbHlDb2x1bW5Db25maWcgPSBmdW5jdGlvbiAoY29sdW1ucykge1xyXG4gICAgICAgICAgICBfdGhpcy50b2dnbGVIYW5kbGVyLmFwcGx5Q29sdW1uQ29uZmlnKGNvbHVtbnMpO1xyXG4gICAgICAgICAgICB2YXIgaHRtbCA9IF90aGlzLmdyaWRUZW1wbGF0ZVNlcnZpY2UuR2V0TWFuYWdlQ29sdW1uc0h0bWwoKTtcclxuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBqUXVlcnkoX3RoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5tYW5hZ2VDb2xTZXR0aW5nc0NvbnRhaW5lclxyXG4gICAgICAgICAgICAgICAgfHwgX3RoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5jb250YWluZXJFbGVtZW50KTtcclxuICAgICAgICAgICAgZWxlbWVudC5maW5kKFwiLmNvbC1zZXR0aW5ncy1jb250YWluZXJcIikuaHRtbChodG1sKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuc2V0T3JkZXIgPSBmdW5jdGlvbiAob3JkZXJCeUxpc3QpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IF90aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuY29sdW1uczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb2wgPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICBjb2wub3JkZXIgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKG9yZGVyQnlMaXN0ID09PSB1bmRlZmluZWQgfHwgb3JkZXJCeUxpc3QgPT09IG51bGwgfHwgb3JkZXJCeUxpc3QubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIgX2IgPSAwLCBvcmRlckJ5TGlzdF8xID0gb3JkZXJCeUxpc3Q7IF9iIDwgb3JkZXJCeUxpc3RfMS5sZW5ndGg7IF9iKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBvcmRlckNvbCA9IG9yZGVyQnlMaXN0XzFbX2JdO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2MgPSAwLCBfZCA9IF90aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuY29sdW1uczsgX2MgPCBfZC5sZW5ndGg7IF9jKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY29sID0gX2RbX2NdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcmRlckNvbC5jb2xJZCA9PT0gY29sLmlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbC5vcmRlciA9IG9yZGVyQ29sLm9yZGVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHBhcmVudEVsZW1lbnQgPSBqUXVlcnkoX3RoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5jb250YWluZXJFbGVtZW50KTtcclxuICAgICAgICAgICAgaWYgKHBhcmVudEVsZW1lbnQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcGFyZW50RWxlbWVudC5vZmYoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgbWFuYWdlQ29udGFpbmVyRWxlbWVudCA9IGpRdWVyeShfdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLm1hbmFnZUNvbFNldHRpbmdzQ29udGFpbmVyKTtcclxuICAgICAgICAgICAgaWYgKG1hbmFnZUNvbnRhaW5lckVsZW1lbnQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgbWFuYWdlQ29udGFpbmVyRWxlbWVudC5vZmYoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkKHdpbmRvdykub2ZmKFwicmVzaXplXCIsIF90aGlzLmRvY3VtZW50UmVzaXplSGFuZGxlcik7XHJcbiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9mZihcImNsaWNrXCIsIF90aGlzLmRvY3VtZW50Q2xpY2tIYW5kbGVyKTtcclxuICAgICAgICAgICAgJCh3aW5kb3cpLm9mZihcInJlc2l6ZVwiLCBfdGhpcy5kb2N1bWVudFJlc2l6ZUhhbmRsZXJGb3JDcyk7XHJcbiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9mZihcImNsaWNrXCIsIF90aGlzLmRvY3VtZW50Q2xpY2tIYW5kbGVyRm9yQ3MpO1xyXG4gICAgICAgICAgICBpZiAoX3RoaXMuc2Nyb2xsSGFuZGxlciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5zY3JvbGxIYW5kbGVyLnVuV2F0Y2hXaWR0aCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmdldEluaXRpYWxSb3dDb3VudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoKGpRdWVyeSh3aW5kb3cpLmlubmVySGVpZ2h0KCkgKiAwLjY1KSAvIDMyKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuSW5pdEhhbmRsZXJzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcGFyZW50RWxlbWVudCA9IGpRdWVyeShfdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmNvbnRhaW5lckVsZW1lbnQpO1xyXG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVDaGFpbiA9IFtdO1xyXG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVDaGFpbi5wdXNoKHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IG5ldyBEZXRhaWxzUm93SGFuZGxlcl8xLkRldGFpbHNSb3dIYW5kbGVyKF90aGlzLmNvbmZpZ1N0b3JlLCBwYXJlbnRFbGVtZW50KSxcclxuICAgICAgICAgICAgICAgIG5hbWU6IEhhbmRsZXJOYW1lc18xLkhhbmRsZXJOYW1lcy5EZXRhaWxzUm93LFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgX3RoaXMuaGFuZGxlQ2hhaW4ucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBuZXcgRmlsdGVyQ2xpY2tIYW5kbGVyXzEuRmlsdGVyQ2xpY2tIYW5kbGVyKF90aGlzLmNvbmZpZ1N0b3JlLCBwYXJlbnRFbGVtZW50KSxcclxuICAgICAgICAgICAgICAgIG5hbWU6IEhhbmRsZXJOYW1lc18xLkhhbmRsZXJOYW1lcy5GaWx0ZXJBY3Rpb24sXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVDaGFpbi5wdXNoKHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IG5ldyBIZWFkZXJDbGlja0hhbmRsZXJfMS5IZWFkZXJDbGlja0hhbmRsZXIoX3RoaXMuY29uZmlnU3RvcmUsIHBhcmVudEVsZW1lbnQpLFxyXG4gICAgICAgICAgICAgICAgbmFtZTogSGFuZGxlck5hbWVzXzEuSGFuZGxlck5hbWVzLkhlYWRlckNsaWNrLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgX3RoaXMuaGFuZGxlQ2hhaW4ucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBuZXcgUGFnZVNlYXJjaENsaWNrSGFuZGxlcl8xLlBhZ2VTZWFyY2hIYW5kbGVyKF90aGlzLmNvbmZpZ1N0b3JlLCBwYXJlbnRFbGVtZW50KSxcclxuICAgICAgICAgICAgICAgIG5hbWU6IEhhbmRsZXJOYW1lc18xLkhhbmRsZXJOYW1lcy5QYWdlU2VhcmNoLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdmFyIGNvbnRhaW5lciA9IHBhcmVudEVsZW1lbnQ7XHJcbiAgICAgICAgICAgIF90aGlzLmhhbmRsZUNoYWluLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogbmV3IFNlbGVjdEV2ZW50SGFuZGxlcl8xLlNlbGVjdEV2ZW50SGFuZGxlcihfdGhpcy5jb25maWdTdG9yZSwgcGFyZW50RWxlbWVudCwgX3RoaXMuZ3JpZFRlbXBsYXRlU2VydmljZSksXHJcbiAgICAgICAgICAgICAgICBuYW1lOiBIYW5kbGVyTmFtZXNfMS5IYW5kbGVyTmFtZXMuQ29sU2V0dGluZ3MsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVDaGFpbi5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUuaGFuZGxlci5SZWdpc3RlckRvbUhhbmRsZXIoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGpRdWVyeSh3aW5kb3cpLnJlc2l6ZShfdGhpcy5kb2N1bWVudFJlc2l6ZUhhbmRsZXIpO1xyXG4gICAgICAgICAgICBqUXVlcnkoZG9jdW1lbnQpLmNsaWNrKF90aGlzLmRvY3VtZW50Q2xpY2tIYW5kbGVyKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZG9jdW1lbnRSZXNpemVIYW5kbGVyRm9yQ3MgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgX3RoaXMubWFuYWdlQ29sSGFuZGxlci5vblJlc2l6ZSgpO1xyXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZG9jdW1lbnRDbGlja0hhbmRsZXJGb3JDcyA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICBfdGhpcy5tYW5hZ2VDb2xIYW5kbGVyLm9uRG9jdW1lbnRDbGljayhldmVudCk7XHJcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5kb2N1bWVudFJlc2l6ZUhhbmRsZXJGb3JTY3JvbGwgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgX3RoaXMubWFuYWdlQ29sSGFuZGxlci5vblJlc2l6ZSgpO1xyXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZG9jdW1lbnRDbGlja0hhbmRsZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgX3RoaXMuaGFuZGxlQ2hhaW4uZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlLmhhbmRsZXIub25Eb2N1bWVudENsaWNrKGV2ZW50KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5kb2N1bWVudFJlc2l6ZUhhbmRsZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgX3RoaXMuaGFuZGxlQ2hhaW4uZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlLmhhbmRsZXIub25Eb2N1bWVudENsaWNrKGV2ZW50KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5jb25maWdTdG9yZSA9IG5ldyBDb25maWdTdG9yZV8xLkNvbmZpZ1N0b3JlKG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuZ3JpZFRlbXBsYXRlU2VydmljZSA9IG5ldyBHcmlkVGVtcGxhdGVTZXJ2aWNlXzEuR3JpZFRlbXBsYXRlU2VydmljZSh0aGlzLmNvbmZpZ1N0b3JlKTtcclxuICAgICAgICB0aGlzLkluaXRIYW5kbGVycygpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEdyaWQ7XHJcbn0oKSk7XHJcbmV4cG9ydHMuR3JpZCA9IEdyaWQ7XHJcblxuXG4vKioqLyB9KSxcbi8qIDExICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9qcy9jb25maWcvQ29uZmlnU3RvcmUudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgQ29uZmlnU3RvcmUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBDb25maWdTdG9yZShvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLmRlZmF1bHRHcmlkT3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgYW5pbWF0aW9uVGltZTogMjAwLFxyXG4gICAgICAgICAgICBjaHVua1NpemU6IDUsXHJcbiAgICAgICAgICAgIGNvbHVtbnM6IFtdLFxyXG4gICAgICAgICAgICBjb250YWluZXJFbGVtZW50OiBudWxsLFxyXG4gICAgICAgICAgICBtYW5hZ2VDb2xTZXR0aW5nc0NvbnRhaW5lcjogbnVsbCxcclxuICAgICAgICAgICAgaHlicmlkRnVuY3Rpb246IGZ1bmN0aW9uIChjb2x1bW4sIHJvdykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwidHJ1ZVwiO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBrZXlDb2x1bW46IFwiXCIsXHJcbiAgICAgICAgICAgIG9uQ29sU2V0dGluZ3NDaGFuZ2U6IGZ1bmN0aW9uIChjb2xDb25maWcpIHtcclxuICAgICAgICAgICAgICAgIC8vIE5vIENvZGVcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25DbGlja0ZpbHRlcjogZnVuY3Rpb24gKGNvbHVtbiwgdmFsdWUsIGFjdGlvblR5cGUpIHtcclxuICAgICAgICAgICAgICAgIC8vIE5vIGNvZGVcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25DbGlja0hlYWRlcjogZnVuY3Rpb24gKGNvbHVtbiwgZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBObyBjb2RlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uUGFnZVNlYXJjaDogZnVuY3Rpb24gKHBhZ2VTaXplLCBwYWdlSW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIC8vIE5vIGNvZGVcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25TZWxlY3Q6IGZ1bmN0aW9uIChyb3dzKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBObyBDb2RlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLlNldEhpZGRlbk9uQ29uZmlnID0gZnVuY3Rpb24gKGJvb2wsIGNvbHVtbklkKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBfdGhpcy5PcHRpb25zLmNvbHVtbnM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY29sID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbklkID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb2wuaGlkZGVuID0gYm9vbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2wuaWQgPT09IGNvbHVtbklkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbC5oaWRkZW4gPSBib29sO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZXh0ZW5kT3B0aW9ucyA9IGZ1bmN0aW9uIChpbnB1dE9wdGlvbnMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLm9wdGlvbnMgPSBqUXVlcnkuZXh0ZW5kKHt9LCBfdGhpcy5kZWZhdWx0R3JpZE9wdGlvbnMsIGlucHV0T3B0aW9ucyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmV4dGVuZE9wdGlvbnMob3B0aW9ucyk7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuY29udGFpbmVyRWxlbWVudCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQbGVhc2UgUHJvdmlkZSBhIHZhbGlkIGNvbnRhaW5lciBFbGVtZW50IG9iamVjdFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uZmlnU3RvcmUucHJvdG90eXBlLCBcIk9wdGlvbnNcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIENvbmZpZ1N0b3JlO1xyXG59KCkpO1xyXG5leHBvcnRzLkNvbmZpZ1N0b3JlID0gQ29uZmlnU3RvcmU7XHJcblxuXG4vKioqLyB9KSxcbi8qIDEyICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2pzL2V2ZW50SGFuZGxlcnMvQ29sU2V0dGluZ3NIYW5kbGVyLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgQ29sU2V0dGluZ3NIYW5kbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQ29sU2V0dGluZ3NIYW5kbGVyKGVsZW1lbnQsIGNvbmZpZ1N0b3JlLCB0b2dnbGVDb2x1bW5IYW5kbGVyKSB7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRFbGVtZW50ID0gZWxlbWVudDtcclxuICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlID0gY29uZmlnU3RvcmU7XHJcbiAgICAgICAgdGhpcy50b2dnbGVDb2x1bW5IYW5kbGVyID0gdG9nZ2xlQ29sdW1uSGFuZGxlcjtcclxuICAgIH1cclxuICAgIENvbFNldHRpbmdzSGFuZGxlci5wcm90b3R5cGUub25SZXNpemUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gY29uc3Qgc2V0dG5nc1BvcHVwID0gdGhpcy5wYXJlbnRFbGVtZW50LmZpbmQoXCIuY29sLXNldHRpbmdzLWNvbnRhaW5lclwiKTtcclxuICAgICAgICAvLyBjb25zdCB0Ym9keUhlaWdodCA9IHRoaXMucGFyZW50RWxlbWVudC5maW5kKFwiLnRhYmxlLWJvZHlcIikuaW5uZXJIZWlnaHQoKTtcclxuICAgICAgICAvLyBzZXR0bmdzUG9wdXAuaW5uZXJIZWlnaHQodGJvZHlIZWlnaHQgLSAxMCk7XHJcbiAgICAgICAgLy8gc2V0dG5nc1BvcHVwLmZpbmQoXCIuY29sLXNldHRpbmdzLXRhYmxlXCIpLmlubmVySGVpZ2h0KHNldHRuZ3NQb3B1cC5pbm5lckhlaWdodCgpIC1cclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0bmdzUG9wdXAuZmluZChcIi5jb2wtc2V0dGluZ3MtaGVhZGVyXCIpLmlubmVySGVpZ2h0KCkpO1xyXG4gICAgfTtcclxuICAgIENvbFNldHRpbmdzSGFuZGxlci5wcm90b3R5cGUub25Eb2N1bWVudENsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgdmFyIHRhcmdldEVsZW1lbnQgPSBqUXVlcnkoZXZlbnQudGFyZ2V0KTtcclxuICAgICAgICBpZiAodGFyZ2V0RWxlbWVudC5pcyhcIi5jb2wtc2V0dGluZ3MtdHJpZ2dlclwiKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGFyZ2V0RWxlbWVudC5wYXJlbnRzKCkuaXMoXCIuY29sLXNldHRpbmdzLWNvbnRhaW5lclwiKSkge1xyXG4gICAgICAgICAgICBqUXVlcnkoXCIuY29sLXNldHRpbmdzLXRyaWdnZXJcIikucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgIGpRdWVyeShcIi5jb2wtc2V0dGluZ3MtY29udGFpbmVyXCIpLnNsaWRlVXAodGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmFuaW1hdGlvblRpbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBDb2xTZXR0aW5nc0hhbmRsZXIucHJvdG90eXBlLlJlZ2lzdGVyRG9tSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMucGFyZW50RWxlbWVudC5vbihcImNsaWNrXCIsIFwiLmNvbC1zZXR0aW5ncy10cmlnZ2VyXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IGpRdWVyeShldmVudC50YXJnZXQpO1xyXG4gICAgICAgICAgICB2YXIgc2V0dG5nc1BvcHVwID0gX3RoaXMucGFyZW50RWxlbWVudC5maW5kKFwiLmNvbC1zZXR0aW5ncy1jb250YWluZXJcIik7XHJcbiAgICAgICAgICAgIF90aGlzLm9uUmVzaXplKCk7XHJcbiAgICAgICAgICAgIGpRdWVyeShcIi5jb2wtc2V0dGluZ3MtdHJpZ2dlclwiKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgc2V0dG5nc1BvcHVwLnNsaWRlVG9nZ2xlKF90aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuYW5pbWF0aW9uVGltZSk7XHJcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMucGFyZW50RWxlbWVudC5vbihcImtleXVwXCIsIFwiLmNvbC1zZXR0aW5ncy1oZWFkZXIgLmNvbC1zZXR0aW5ncy1maWx0ZXJcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0galF1ZXJ5KGV2ZW50LnRhcmdldCk7XHJcbiAgICAgICAgICAgIHZhciB2YWwgPSBlbGVtZW50LnZhbCgpLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2codmFsKTtcclxuICAgICAgICAgICAgX3RoaXMucGFyZW50RWxlbWVudC5maW5kKFwiLmNvbC1zZXR0aW5ncy10YWJsZSB0YWJsZSB0Ym9keSB0clwiKS5lYWNoKGZ1bmN0aW9uIChpLCBlKSB7XHJcbiAgICAgICAgICAgICAgICBqUXVlcnkoZSkuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGpRdWVyeShlKS5hdHRyKFwiZGF0YS1oZWFkZXItaWRcIikudG9Mb3dlckNhc2UoKS5pbmRleE9mKHZhbCkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KGUpLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMucGFyZW50RWxlbWVudC5vbihcImNsaWNrXCIsIFwiLnNob3ctYWxsLWNvbHVtblwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgX3RoaXMucGFyZW50RWxlbWVudC5maW5kKFwiLmNvbC1zZXR0aW5ncy1oaWRkZW4tY2hlY2tib3hcIilcclxuICAgICAgICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgalF1ZXJ5KGVsZW1lbnQpLnByb3AoXCJjaGVja2VkXCIsIHRydWUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgX3RoaXMudG9nZ2xlQ29sdW1uSGFuZGxlci5zaG93QWxsQ29sdW1ucygpO1xyXG4gICAgICAgICAgICBfdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLm9uQ29sU2V0dGluZ3NDaGFuZ2UoX3RoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5jb2x1bW5zKTtcclxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRFbGVtZW50Lm9uKFwiY2xpY2tcIiwgXCIuaGlkZS1hbGwtY29sdW1uXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICBfdGhpcy5wYXJlbnRFbGVtZW50LmZpbmQoXCIuY29sLXNldHRpbmdzLWhpZGRlbi1jaGVja2JveFwiKVxyXG4gICAgICAgICAgICAgICAgLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICBqUXVlcnkoZWxlbWVudCkucHJvcChcImNoZWNrZWRcIiwgZmFsc2UpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgX3RoaXMudG9nZ2xlQ29sdW1uSGFuZGxlci5oaWRlQWxsQ29sdW1ucygpO1xyXG4gICAgICAgICAgICBfdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLm9uQ29sU2V0dGluZ3NDaGFuZ2UoX3RoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5jb2x1bW5zKTtcclxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRFbGVtZW50Lm9uKFwiY2xpY2tcIiwgXCIuY29sLXNldHRpbmdzLWhpZGRlbi1jaGVja2JveFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgaWYgKGV2ZW50Lm9yaWdpbmFsRXZlbnQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNoZWNrYm94ID0galF1ZXJ5KGV2ZW50LnRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgaWQgPSBjaGVja2JveC52YWwoKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrYm94LmlzKFwiOmNoZWNrZWRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy50b2dnbGVDb2x1bW5IYW5kbGVyLnNob3dDb2x1bW4oaWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMudG9nZ2xlQ29sdW1uSGFuZGxlci5oaWRlQ29sdW1uKGlkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLm9uQ29sU2V0dGluZ3NDaGFuZ2UoX3RoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5jb2x1bW5zKTtcclxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIENvbFNldHRpbmdzSGFuZGxlcjtcclxufSgpKTtcclxuZXhwb3J0cy5Db2xTZXR0aW5nc0hhbmRsZXIgPSBDb2xTZXR0aW5nc0hhbmRsZXI7XHJcblxuXG4vKioqLyB9KSxcbi8qIDEzICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2pzL2V2ZW50SGFuZGxlcnMvU2VsZWN0RXZlbnRIYW5kbGVyLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgU2VsZWN0RXZlbnRIYW5kbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU2VsZWN0RXZlbnRIYW5kbGVyKGNvbmZpZ1N0b3JlLCBlbGVtZW50LCBncmlkVGVtcGxhdGVTZXJ2aWNlKSB7XHJcbiAgICAgICAgdGhpcy5jb25maWdTdG9yZSA9IGNvbmZpZ1N0b3JlO1xyXG4gICAgICAgIHRoaXMucGFyZW50RWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy5ncmlkVGVtcGxhdGVTZXJ2aWNlID0gZ3JpZFRlbXBsYXRlU2VydmljZTtcclxuICAgIH1cclxuICAgIFNlbGVjdEV2ZW50SGFuZGxlci5wcm90b3R5cGUuUmVnaXN0ZXJEb21IYW5kbGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRFbGVtZW50Lm9uKFwiY2hhbmdlXCIsIFwiLnNlbGVjdC1rZXktY2hlY2tib3hcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0galF1ZXJ5KGV2ZW50LnRhcmdldCk7XHJcbiAgICAgICAgICAgIHZhciByb3cgPSBlbGVtZW50LmRhdGEoXCJ2YWx1ZVwiKTtcclxuICAgICAgICAgICAgdmFyIGNoZWNrZWQgPSBlbGVtZW50LmlzKFwiOmNoZWNrZWRcIik7XHJcbiAgICAgICAgICAgIGlmIChjaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LnBhcmVudHMoXCIubWFpblJvd1wiKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQucGFyZW50cyhcIi5tYWluUm93XCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChldmVudC5vcmlnaW5hbEV2ZW50ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLm9uU2VsZWN0KFtyb3ddLCBjaGVja2VkKTtcclxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRFbGVtZW50Lm9uKFwiY2hhbmdlXCIsIFwiLnNlbGVjdC1hbGwtY2hlY2tib3hcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0galF1ZXJ5KGV2ZW50LnRhcmdldCk7XHJcbiAgICAgICAgICAgIHZhciBjaGVja2VkID0gZWxlbWVudC5pcyhcIjpjaGVja2VkXCIpO1xyXG4gICAgICAgICAgICBfdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLm9uU2VsZWN0KF90aGlzLmdyaWRUZW1wbGF0ZVNlcnZpY2UuRGF0YSwgY2hlY2tlZCk7XHJcbiAgICAgICAgICAgIF90aGlzLnBhcmVudEVsZW1lbnQuZmluZChcIi5zZWxlY3Qta2V5LWNoZWNrYm94XCIpLnByb3AoXCJjaGVja2VkXCIsIGNoZWNrZWQpO1xyXG4gICAgICAgICAgICBpZiAoY2hlY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMucGFyZW50RWxlbWVudC5maW5kKFwiLm1haW5UYWJsZSAubWFpblJvd1wiKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLnBhcmVudEVsZW1lbnQuZmluZChcIi5tYWluVGFibGUgLm1haW5Sb3dcIikucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgU2VsZWN0RXZlbnRIYW5kbGVyLnByb3RvdHlwZS5vblJlc2l6ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBJZ25vcmVcclxuICAgIH07XHJcbiAgICBTZWxlY3RFdmVudEhhbmRsZXIucHJvdG90eXBlLm9uRG9jdW1lbnRDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIC8vIElnbm9yZVxyXG4gICAgfTtcclxuICAgIHJldHVybiBTZWxlY3RFdmVudEhhbmRsZXI7XHJcbn0oKSk7XHJcbmV4cG9ydHMuU2VsZWN0RXZlbnRIYW5kbGVyID0gU2VsZWN0RXZlbnRIYW5kbGVyO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxNCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2pzL2V2ZW50SGFuZGxlcnMvRGV0YWlsc1Jvd0hhbmRsZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIERldGFpbHNSb3dIYW5kbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRGV0YWlsc1Jvd0hhbmRsZXIoY29uZmlnU3RvcmUsIGVsZW1lbnQpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuY29uZmlnU3RvcmUgPSBjb25maWdTdG9yZTtcclxuICAgICAgICB0aGlzLlJlZ2lzdGVyRG9tSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMucGFyZW50RWxlbWVudC5vbihcImNsaWNrXCIsIFwiLnRhYmxlLWJvZHkgLmV4cGFuc2lvbkFycm93cyBpXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFycm93ID0galF1ZXJ5KGV2ZW50LnRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGV0YWlsc1JvdyA9IGFycm93LmNsb3Nlc3QoXCJ0clwiKS5uZXh0KCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudEljb24gPSBhcnJvdy5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgb3RoZXJJY29uID0gYXJyb3cuc2libGluZ3MoXCJpXCIpLnNob3coKTtcclxuICAgICAgICAgICAgICAgIGlmIChhcnJvdy5oYXNDbGFzcyhcImV4cGFuZERldGFpbHNSb3dJY29uXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGV0YWlsc1Jvdy5zbGlkZURvd24oX3RoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5hbmltYXRpb25UaW1lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGRldGFpbHNSb3cuc2xpZGVVcChfdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmFuaW1hdGlvblRpbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5wYXJlbnRFbGVtZW50ID0gZWxlbWVudDtcclxuICAgIH1cclxuICAgIERldGFpbHNSb3dIYW5kbGVyLnByb3RvdHlwZS5vblJlc2l6ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBOb3RoaW5nIHRvIERvLlxyXG4gICAgfTtcclxuICAgIERldGFpbHNSb3dIYW5kbGVyLnByb3RvdHlwZS5vbkRvY3VtZW50Q2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAvLyBOb3RoaW5nIHRvIERvLlxyXG4gICAgfTtcclxuICAgIHJldHVybiBEZXRhaWxzUm93SGFuZGxlcjtcclxufSgpKTtcclxuZXhwb3J0cy5EZXRhaWxzUm93SGFuZGxlciA9IERldGFpbHNSb3dIYW5kbGVyO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxNSAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9qcy9ldmVudEhhbmRsZXJzL0ZpbHRlckNsaWNrSGFuZGxlci50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIENvbHVtblV0aWxfMSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL3V0aWwvQ29sdW1uVXRpbCAqLyAzKTtcclxudmFyIEZpbHRlckFjdGlvblR5cGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vLi4vbW9kZWxzL0ZpbHRlckFjdGlvblR5cGUgKi8gMTYpO1xyXG52YXIgRmlsdGVyQ2xpY2tIYW5kbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRmlsdGVyQ2xpY2tIYW5kbGVyKGNvbmZpZ1N0b3JlLCBlbGVtZW50KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLlJlZ2lzdGVyRG9tSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMucGFyZW50RWxlbWVudC5vbihcImNsaWNrXCIsIFwiLnRhYmxlLWJvZHkgLmRldGFpbHNSb3cgLmRldGFpbHNUYWJsZSB0ZCBpXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBqUXVlcnkoZXZlbnQudGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgIHZhciBwYXJlbnRUZCA9IGVsZW1lbnQucGFyZW50cyhcInRkXCIpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IHBhcmVudFRkLmF0dHIoXCJkYXRhLWZpbHRlci1rZXlcIik7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBwYXJlbnRUZC5hdHRyKFwiZGF0YS1maWx0ZXItdmFsdWVcIik7XHJcbiAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IHBhcmVudFRkLmF0dHIoXCJkYXRhLWZpbHRlci10eXBlXCIpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbCA9IENvbHVtblV0aWxfMS5Db21tb25VdGlsLkdldENvbHVtbk9iamVjdChrZXksIF90aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuY29sdW1ucyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29sID09PSB1bmRlZmluZWQgfHwgY29sID09PSBudWxsIHx8ICFjb2wuZmlsdGVyYWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBmaWx0ZXJBY3Rpb24gPSBGaWx0ZXJBY3Rpb25UeXBlXzEuRmlsdGVyQWN0aW9uVHlwZS5BZGQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5oYXNDbGFzcyhcInJlbW92ZUZpbHRlclwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlckFjdGlvbiA9IEZpbHRlckFjdGlvblR5cGVfMS5GaWx0ZXJBY3Rpb25UeXBlLk1pbnVzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgX3RoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5vbkNsaWNrRmlsdGVyKGtleSwgdmFsdWUsIGZpbHRlckFjdGlvbiwgdHlwZSk7XHJcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlID0gY29uZmlnU3RvcmU7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRFbGVtZW50ID0gZWxlbWVudDtcclxuICAgIH1cclxuICAgIEZpbHRlckNsaWNrSGFuZGxlci5wcm90b3R5cGUub25SZXNpemUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gTm90aGluZyB0byBEby5cclxuICAgIH07XHJcbiAgICBGaWx0ZXJDbGlja0hhbmRsZXIucHJvdG90eXBlLm9uRG9jdW1lbnRDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIC8vIE5vdGhpbmcgdG8gRG8uXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEZpbHRlckNsaWNrSGFuZGxlcjtcclxufSgpKTtcclxuZXhwb3J0cy5GaWx0ZXJDbGlja0hhbmRsZXIgPSBGaWx0ZXJDbGlja0hhbmRsZXI7XHJcblxuXG4vKioqLyB9KSxcbi8qIDE2ICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2pzL21vZGVscy9GaWx0ZXJBY3Rpb25UeXBlLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgRmlsdGVyQWN0aW9uVHlwZTtcclxuKGZ1bmN0aW9uIChGaWx0ZXJBY3Rpb25UeXBlKSB7XHJcbiAgICBGaWx0ZXJBY3Rpb25UeXBlW1wiQWRkXCJdID0gXCJBZGRcIjtcclxuICAgIEZpbHRlckFjdGlvblR5cGVbXCJNaW51c1wiXSA9IFwiTWludXNcIjtcclxufSkoRmlsdGVyQWN0aW9uVHlwZSA9IGV4cG9ydHMuRmlsdGVyQWN0aW9uVHlwZSB8fCAoZXhwb3J0cy5GaWx0ZXJBY3Rpb25UeXBlID0ge30pKTtcclxuXG5cbi8qKiovIH0pLFxuLyogMTcgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvanMvZXZlbnRIYW5kbGVycy9IYW5kbGVyTmFtZXMudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZHluYW1pYyBleHBvcnRzIHByb3ZpZGVkICovXG4vKiEgYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBIYW5kbGVyTmFtZXM7XHJcbihmdW5jdGlvbiAoSGFuZGxlck5hbWVzKSB7XHJcbiAgICBIYW5kbGVyTmFtZXNbSGFuZGxlck5hbWVzW1wiRmlsdGVyQWN0aW9uXCJdID0gMF0gPSBcIkZpbHRlckFjdGlvblwiO1xyXG4gICAgSGFuZGxlck5hbWVzW0hhbmRsZXJOYW1lc1tcIkhlYWRlckNsaWNrXCJdID0gMV0gPSBcIkhlYWRlckNsaWNrXCI7XHJcbiAgICBIYW5kbGVyTmFtZXNbSGFuZGxlck5hbWVzW1wiU2Nyb2xsXCJdID0gMl0gPSBcIlNjcm9sbFwiO1xyXG4gICAgSGFuZGxlck5hbWVzW0hhbmRsZXJOYW1lc1tcIlBhZ2VTZWFyY2hcIl0gPSAzXSA9IFwiUGFnZVNlYXJjaFwiO1xyXG4gICAgSGFuZGxlck5hbWVzW0hhbmRsZXJOYW1lc1tcIkRldGFpbHNSb3dcIl0gPSA0XSA9IFwiRGV0YWlsc1Jvd1wiO1xyXG4gICAgSGFuZGxlck5hbWVzW0hhbmRsZXJOYW1lc1tcIlRvZ2dsZUNvbHVtblwiXSA9IDVdID0gXCJUb2dnbGVDb2x1bW5cIjtcclxuICAgIEhhbmRsZXJOYW1lc1tIYW5kbGVyTmFtZXNbXCJDb2xTZXR0aW5nc1wiXSA9IDZdID0gXCJDb2xTZXR0aW5nc1wiO1xyXG59KShIYW5kbGVyTmFtZXMgPSBleHBvcnRzLkhhbmRsZXJOYW1lcyB8fCAoZXhwb3J0cy5IYW5kbGVyTmFtZXMgPSB7fSkpO1xyXG5cblxuLyoqKi8gfSksXG4vKiAxOCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9qcy9ldmVudEhhbmRsZXJzL0hlYWRlckNsaWNrSGFuZGxlci50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIENvbHVtblV0aWxfMSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL3V0aWwvQ29sdW1uVXRpbCAqLyAzKTtcclxudmFyIEdyaWRPcmRlckRpcmVjdGlvbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi8uLi9tb2RlbHMvR3JpZE9yZGVyRGlyZWN0aW9uICovIDUpO1xyXG52YXIgSGVhZGVyQ2xpY2tIYW5kbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gSGVhZGVyQ2xpY2tIYW5kbGVyKGNvbmZpZ1N0b3JlLCBlbGVtZW50KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLlJlZ2lzdGVyRG9tSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy8gUmVnaXN0ZXJpbmcgSlF1ZXJ5IEV2ZW50IEhhbmRsZXIgaWYgSGVhZGVyIGlzIENsaWNrZWQuXHJcbiAgICAgICAgICAgIF90aGlzLnBhcmVudEVsZW1lbnQub24oXCJjbGlja1wiLCBcIi50YWJsZS1oZWFkZXIgdGhcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IGpRdWVyeShldmVudC50YXJnZXQpLmNsb3Nlc3QoXCJ0aFwiKTtcclxuICAgICAgICAgICAgICAgIHZhciBoZWFkZXJJZCA9IGVsZW1lbnQuYXR0cihcImRhdGEtaGVhZGVyLWlkXCIpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbCA9IENvbHVtblV0aWxfMS5Db21tb25VdGlsLkdldENvbHVtbk9iamVjdChoZWFkZXJJZCwgX3RoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5jb2x1bW5zKTtcclxuICAgICAgICAgICAgICAgIGlmIChjb2wgPT09IHVuZGVmaW5lZCB8fCBjb2wgPT09IG51bGwgfHwgIWNvbC5zb3J0YWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBhcnJvd0ljb25zID0gZWxlbWVudC5maW5kKFwiaVwiKTtcclxuICAgICAgICAgICAgICAgIHZhciB1cEFycm93SWNvbiA9IGFycm93SWNvbnMuZmlyc3QoKTtcclxuICAgICAgICAgICAgICAgIHZhciBkb3duQXJyb3dJY29uID0gYXJyb3dJY29ucy5sYXN0KCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGlyZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgaWYgKGFycm93SWNvbnMuaXMoXCI6dmlzaWJsZVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1cEFycm93SWNvbi5pcyhcIjp2aXNpYmxlXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbiA9IEdyaWRPcmRlckRpcmVjdGlvbl8xLkdyaWRPcmRlckRpcmVjdGlvbi5EZXNjO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cEFycm93SWNvbi5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvd25BcnJvd0ljb24uc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uID0gR3JpZE9yZGVyRGlyZWN0aW9uXzEuR3JpZE9yZGVyRGlyZWN0aW9uLkFzYztcclxuICAgICAgICAgICAgICAgICAgICAgICAgZG93bkFycm93SWNvbi5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwQXJyb3dJY29uLnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb24gPSBHcmlkT3JkZXJEaXJlY3Rpb25fMS5HcmlkT3JkZXJEaXJlY3Rpb24uQXNjO1xyXG4gICAgICAgICAgICAgICAgICAgIHVwQXJyb3dJY29uLnNob3coKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIENvbHVtblV0aWxfMS5Db21tb25VdGlsLlNldE9yZGVyKGhlYWRlcklkLCBkaXJlY3Rpb24sIF90aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuY29sdW1ucyk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLm9uQ2xpY2tIZWFkZXIoaGVhZGVySWQsIGRpcmVjdGlvbik7XHJcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlID0gY29uZmlnU3RvcmU7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRFbGVtZW50ID0gZWxlbWVudDtcclxuICAgIH1cclxuICAgIEhlYWRlckNsaWNrSGFuZGxlci5wcm90b3R5cGUub25SZXNpemUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gTm90aGluZyB0byBEby5cclxuICAgIH07XHJcbiAgICBIZWFkZXJDbGlja0hhbmRsZXIucHJvdG90eXBlLm9uRG9jdW1lbnRDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIC8vIE5vdGhpbmcgdG8gRG8uXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEhlYWRlckNsaWNrSGFuZGxlcjtcclxufSgpKTtcclxuZXhwb3J0cy5IZWFkZXJDbGlja0hhbmRsZXIgPSBIZWFkZXJDbGlja0hhbmRsZXI7XHJcblxuXG4vKioqLyB9KSxcbi8qIDE5ICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9qcy9ldmVudEhhbmRsZXJzL1BhZ2VTZWFyY2hDbGlja0hhbmRsZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgalF1ZXJ5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEganF1ZXJ5ICovIDQpO1xyXG52YXIgUGFnZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL3BhZ2luYXRpb24vUGFnZXIgKi8gMik7XHJcbnZhciBQYWdlU2VhcmNoSGFuZGxlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFBhZ2VTZWFyY2hIYW5kbGVyKGNvbmZpZ1N0b3JlLCBlbGVtZW50KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLlJlZ2lzdGVyRG9tSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMucGFyZW50RWxlbWVudC5vbihcImNsaWNrXCIsIFwiLnRhYmxlLWZvb3RlciAuZmlyc3RMaW5rXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuY29uZmlnU3RvcmUub3B0aW9ucy5vblBhZ2VTZWFyY2goUGFnZXJfMS5QYWdlci5QYWdpbmF0aW9uRGF0YS5wYWdlU2l6ZSwgMSk7XHJcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIF90aGlzLnBhcmVudEVsZW1lbnQub24oXCJjbGlja1wiLCBcIi50YWJsZS1mb290ZXIgLm5leHRMaW5rXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuY29uZmlnU3RvcmUub3B0aW9ucy5vblBhZ2VTZWFyY2goUGFnZXJfMS5QYWdlci5QYWdpbmF0aW9uRGF0YS5wYWdlU2l6ZSwgUGFnZXJfMS5QYWdlci5QYWdpbmF0aW9uRGF0YS5wYWdlSW5kZXggKyAxKTtcclxuICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgX3RoaXMucGFyZW50RWxlbWVudC5vbihcImNsaWNrXCIsIFwiLnRhYmxlLWZvb3RlciAucHJldkxpbmtcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5jb25maWdTdG9yZS5vcHRpb25zLm9uUGFnZVNlYXJjaChQYWdlcl8xLlBhZ2VyLlBhZ2luYXRpb25EYXRhLnBhZ2VTaXplLCBQYWdlcl8xLlBhZ2VyLlBhZ2luYXRpb25EYXRhLnBhZ2VJbmRleCAtIDEpO1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBfdGhpcy5wYXJlbnRFbGVtZW50Lm9uKFwiY2xpY2tcIiwgXCIudGFibGUtZm9vdGVyIC5sYXN0TGlua1wiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmNvbmZpZ1N0b3JlLm9wdGlvbnMub25QYWdlU2VhcmNoKFBhZ2VyXzEuUGFnZXIuUGFnaW5hdGlvbkRhdGEucGFnZVNpemUsIFBhZ2VyXzEuUGFnZXIuUGFnaW5hdGlvbkRhdGEubm9PZlBhZ2VzKTtcclxuICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgX3RoaXMucGFyZW50RWxlbWVudC5vbihcImNoYW5nZVwiLCBcIi50YWJsZS1mb290ZXIgLnBhZ2VTaXplU2VsZWN0b3JcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsID0gK2pRdWVyeShldmVudC50YXJnZXQpLnZhbCgpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5jb25maWdTdG9yZS5vcHRpb25zLm9uUGFnZVNlYXJjaCh2YWwsIFBhZ2VyXzEuUGFnZXIuUGFnaW5hdGlvbkRhdGEucGFnZUluZGV4KTtcclxuICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgX3RoaXMucGFyZW50RWxlbWVudC5vbihcImtleXByZXNzXCIsIFwiLnRhYmxlLWZvb3RlciAucGFnZXItaW5wdXRcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaXAgPSBqUXVlcnkoZXZlbnQudGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgIHZhciBwYWdlRGF0YSA9IFBhZ2VyXzEuUGFnZXIuUGFnaW5hdGlvbkRhdGE7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gMTMpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gK2lwLnZhbCgpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKHZhbCkgfHwgdmFsID4gcGFnZURhdGEubm9PZlBhZ2VzIHx8IHZhbCA8IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXAudmFsKHBhZ2VEYXRhLnBhZ2VJbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5jb25maWdTdG9yZS5vcHRpb25zLm9uUGFnZVNlYXJjaChwYWdlRGF0YS5wYWdlU2l6ZSwgdmFsKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlID0gY29uZmlnU3RvcmU7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRFbGVtZW50ID0gZWxlbWVudDtcclxuICAgIH1cclxuICAgIFBhZ2VTZWFyY2hIYW5kbGVyLnByb3RvdHlwZS5vblJlc2l6ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuICAgIH07XHJcbiAgICBQYWdlU2VhcmNoSGFuZGxlci5wcm90b3R5cGUub25Eb2N1bWVudENsaWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBQYWdlU2VhcmNoSGFuZGxlcjtcclxufSgpKTtcclxuZXhwb3J0cy5QYWdlU2VhcmNoSGFuZGxlciA9IFBhZ2VTZWFyY2hIYW5kbGVyO1xyXG5cblxuLyoqKi8gfSksXG4vKiAyMCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvanMvZXZlbnRIYW5kbGVycy9TY3JvbGxIYW5kbGVyLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIFNjcm9sbEhhbmRsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBTY3JvbGxIYW5kbGVyKGNvbmZpZ1N0b3JlLCBncmlkVGVtcGxhdGVTZXJ2aWNlLCBjdXJyZW50SW5kZXgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMucmVuZGVyaW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy53YXRjaGVzID0gW107XHJcbiAgICAgICAgdGhpcy5SZWdpc3RlckRvbUhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIFJlZ2lzdGVyaW5nIEpRdWVyeSBFdmVudCBIYW5kbGVyIGlmIEhlYWRlciBpcyBDbGlja2VkLlxyXG4gICAgICAgICAgICBfdGhpcy5wYXJlbnRFbGVtZW50LmZpbmQoXCIudGFibGUtYm9keVwiKS5vbihcInNjcm9sbFwiLCBfdGhpcy5oYW5kbGVSZXNpemUpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5yZW1vdmVIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBfdGhpcy5wYXJlbnRFbGVtZW50LmZpbmQoXCIudGFibGUtYm9keVwiKS5vZmYoXCJzY3JvbGxcIiwgX3RoaXMuaGFuZGxlUmVzaXplKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMucmVzZXRQYXJlbnRPZmZzZXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLnBhcmVudE9mZlNldExlZnQgPSBfdGhpcy5wYXJlbnRFbGVtZW50Lm9mZnNldCgpLmxlZnQ7XHJcbiAgICAgICAgICAgIF90aGlzLmxlZnRPZmZzZXQgPSBfdGhpcy5wYXJlbnRFbGVtZW50LmZpbmQoXCIudGFibGUtaGVhZGVyXCIpLm9mZnNldCgpLmxlZnQ7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLndhdGNoV2lkdGggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLnBhcmVudE9mZlNldExlZnQgPSBfdGhpcy5wYXJlbnRFbGVtZW50Lm9mZnNldCgpLmxlZnQ7XHJcbiAgICAgICAgICAgIF90aGlzLndhdGNoZXMucHVzaChzZXRJbnRlcnZhbChfdGhpcy5zZXRIZWFkZXJPZmZzZXQsIDMwMCkpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy51bldhdGNoV2lkdGggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChfdGhpcy53YXRjaGVzID09PSB1bmRlZmluZWQgfHwgX3RoaXMud2F0Y2hlcyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBfdGhpcy53YXRjaGVzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHdhdGNoID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh3YXRjaCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuaGFuZGxlUmVzaXplID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIHZhciB0Qm9keU9iaiA9IF90aGlzLnBhcmVudEVsZW1lbnQuZmluZChcIi50YWJsZS1ib2R5XCIpO1xyXG4gICAgICAgICAgICBpZiAoX3RoaXMubGVmdE9mZnNldCA9PT0gdW5kZWZpbmVkIHx8IF90aGlzLmxlZnRPZmZzZXQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmxlZnRPZmZzZXQgPSBfdGhpcy5wYXJlbnRFbGVtZW50LmZpbmQoXCIudGFibGUtaGVhZGVyXCIpLm9mZnNldCgpLmxlZnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgX3RoaXMucGFyZW50RWxlbWVudC5maW5kKFwiLnRhYmxlLWhlYWRlclwiKS5vZmZzZXQoe1xyXG4gICAgICAgICAgICAgICAgbGVmdDogX3RoaXMubGVmdE9mZnNldCArIC0xICogdEJvZHlPYmouc2Nyb2xsTGVmdCgpLFxyXG4gICAgICAgICAgICAgICAgdG9wOiAwLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdmFyIGFjdHVhbFRhYmxlSGVpZ2h0ID0gdEJvZHlPYmouZmluZChcIi5tYWluVGFibGVcIikuaGVpZ2h0KCk7XHJcbiAgICAgICAgICAgIHZhciBzY3JvbGxDb250YWluZXJIZWlnaHQgPSB0Qm9keU9iai5oZWlnaHQoKTtcclxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgaWYgKF90aGlzLnJlbmRlcmluZykge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHNjcm9sbFRvcCA9IHRCb2R5T2JqLnNjcm9sbFRvcCgpO1xyXG4gICAgICAgICAgICBpZiAoKHNjcm9sbENvbnRhaW5lckhlaWdodCArIHNjcm9sbFRvcCkgLSAoYWN0dWFsVGFibGVIZWlnaHQgKiAwLjgpID4gMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLmN1cnJlbnRJbmRleCA+PSBfdGhpcy5ncmlkVGVtcGxhdGVTZXJ2aWNlLkRhdGFMZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5yZW5kZXJpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdmFyIGxhc3RJbmRleCA9IF90aGlzLmN1cnJlbnRJbmRleCArIF90aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuY2h1bmtTaXplO1xyXG4gICAgICAgICAgICAgICAgaWYgKGxhc3RJbmRleCA+PSBfdGhpcy5ncmlkVGVtcGxhdGVTZXJ2aWNlLkRhdGFMZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBsYXN0SW5kZXggPSBfdGhpcy5ncmlkVGVtcGxhdGVTZXJ2aWNlLkRhdGFMZW5ndGggLSAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIGh0bWwgPSBqUXVlcnkoX3RoaXMuZ3JpZFRlbXBsYXRlU2VydmljZS5nZXRUZW1wbGF0ZShfdGhpcy5jdXJyZW50SW5kZXgsIGxhc3RJbmRleCkpO1xyXG4gICAgICAgICAgICAgICAgdEJvZHlPYmouZmluZChcIi5tYWluVGFibGVCb2R5XCIpLmFwcGVuZChodG1sKTtcclxuICAgICAgICAgICAgICAgIF90aGlzLmN1cnJlbnRJbmRleCA9IGxhc3RJbmRleCArIDE7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5yZW5kZXJpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuc2V0SGVhZGVyT2Zmc2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgbGVmdCA9IF90aGlzLnBhcmVudEVsZW1lbnQub2Zmc2V0KCkubGVmdDtcclxuICAgICAgICAgICAgaWYgKF90aGlzLnBhcmVudE9mZlNldExlZnQgIT09IGxlZnQpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0Qm9keU9iaiA9IF90aGlzLnBhcmVudEVsZW1lbnQuZmluZChcIi50YWJsZS1ib2R5XCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLmxlZnRPZmZzZXQgPT09IHVuZGVmaW5lZCB8fCBfdGhpcy5sZWZ0T2Zmc2V0ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMubGVmdE9mZnNldCA9IF90aGlzLnBhcmVudEVsZW1lbnQuZmluZChcIi50YWJsZS1oZWFkZXJcIikub2Zmc2V0KCkubGVmdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIF90aGlzLmxlZnRPZmZzZXQgPSBfdGhpcy5sZWZ0T2Zmc2V0IC0gKF90aGlzLnBhcmVudE9mZlNldExlZnQgLSBsZWZ0KTtcclxuICAgICAgICAgICAgICAgIF90aGlzLnBhcmVudEVsZW1lbnRcclxuICAgICAgICAgICAgICAgICAgICAuZmluZChcIi50YWJsZS1oZWFkZXJcIilcclxuICAgICAgICAgICAgICAgICAgICAub2Zmc2V0KHsgbGVmdDogX3RoaXMubGVmdE9mZnNldCwgdG9wOiAwIH0pO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMucGFyZW50T2ZmU2V0TGVmdCA9IGxlZnQ7XHJcbiAgICAgICAgICAgICAgICB0Qm9keU9iai5zY3JvbGxMZWZ0KHRCb2R5T2JqLnNjcm9sbExlZnQoKSAtIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlID0gY29uZmlnU3RvcmU7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRFbGVtZW50ID0galF1ZXJ5KHRoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5jb250YWluZXJFbGVtZW50KTtcclxuICAgICAgICB0aGlzLmdyaWRUZW1wbGF0ZVNlcnZpY2UgPSBncmlkVGVtcGxhdGVTZXJ2aWNlO1xyXG4gICAgICAgIHRoaXMuY3VycmVudEluZGV4ID0gY3VycmVudEluZGV4O1xyXG4gICAgfVxyXG4gICAgU2Nyb2xsSGFuZGxlci5wcm90b3R5cGUub25SZXNpemUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy9cclxuICAgIH07XHJcbiAgICBTY3JvbGxIYW5kbGVyLnByb3RvdHlwZS5vbkRvY3VtZW50Q2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAvLyBObyBPcFxyXG4gICAgfTtcclxuICAgIHJldHVybiBTY3JvbGxIYW5kbGVyO1xyXG59KCkpO1xyXG5leHBvcnRzLlNjcm9sbEhhbmRsZXIgPSBTY3JvbGxIYW5kbGVyO1xyXG5cblxuLyoqKi8gfSksXG4vKiAyMSAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvanMvZXZlbnRIYW5kbGVycy9Ub2dnbGVDb2x1bW5IYW5kbGVyLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIENvbHVtblV0aWxfMSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vLi4vdXRpbC9Db2x1bW5VdGlsICovIDMpO1xyXG52YXIgU2hvd0hpZGU7XHJcbihmdW5jdGlvbiAoU2hvd0hpZGUpIHtcclxuICAgIFNob3dIaWRlW1Nob3dIaWRlW1wiU2hvd1wiXSA9IDBdID0gXCJTaG93XCI7XHJcbiAgICBTaG93SGlkZVtTaG93SGlkZVtcIkhpZGVcIl0gPSAxXSA9IFwiSGlkZVwiO1xyXG4gICAgU2hvd0hpZGVbU2hvd0hpZGVbXCJTaG93QWxsXCJdID0gMl0gPSBcIlNob3dBbGxcIjtcclxuICAgIFNob3dIaWRlW1Nob3dIaWRlW1wiSGlkZUFsbFwiXSA9IDNdID0gXCJIaWRlQWxsXCI7XHJcbn0pKFNob3dIaWRlIHx8IChTaG93SGlkZSA9IHt9KSk7XHJcbnZhciBUb2dnbGVDb2x1bW5IYW5kbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gVG9nZ2xlQ29sdW1uSGFuZGxlcihjb25maWdTdG9yZSwgZWxlbWVudCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5zaG93QWxsQ29sdW1ucyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMuU2V0Q29sV2lkdGgoXCIudGFibGUtaGVhZGVyIC5oZWFkZXJDb2xHcm91cCBjb2xcIiwgU2hvd0hpZGUuU2hvd0FsbCk7XHJcbiAgICAgICAgICAgIF90aGlzLlNldENvbFdpZHRoKFwiLnRhYmxlLWJvZHkgLmJvZHlDb2xHcm91cCBjb2xcIiwgU2hvd0hpZGUuU2hvd0FsbCk7XHJcbiAgICAgICAgICAgIF90aGlzLmNvbmZpZ1N0b3JlLlNldEhpZGRlbk9uQ29uZmlnKGZhbHNlKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuc2hvd0NvbHVtbiA9IGZ1bmN0aW9uIChjb2x1bW5JZCkge1xyXG4gICAgICAgICAgICBfdGhpcy5TZXRDb2xXaWR0aChcIi50YWJsZS1oZWFkZXIgLmhlYWRlckNvbEdyb3VwIGNvbFwiLCBTaG93SGlkZS5TaG93LCBjb2x1bW5JZCk7XHJcbiAgICAgICAgICAgIF90aGlzLlNldENvbFdpZHRoKFwiLnRhYmxlLWJvZHkgLmJvZHlDb2xHcm91cCBjb2xcIiwgU2hvd0hpZGUuU2hvdywgY29sdW1uSWQpO1xyXG4gICAgICAgICAgICBfdGhpcy5jb25maWdTdG9yZS5TZXRIaWRkZW5PbkNvbmZpZyhmYWxzZSwgY29sdW1uSWQpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5oaWRlQ29sdW1uID0gZnVuY3Rpb24gKGNvbHVtbklkKSB7XHJcbiAgICAgICAgICAgIF90aGlzLlNldENvbFdpZHRoKFwiLnRhYmxlLWhlYWRlciAuaGVhZGVyQ29sR3JvdXAgY29sXCIsIFNob3dIaWRlLkhpZGUsIGNvbHVtbklkKTtcclxuICAgICAgICAgICAgX3RoaXMuU2V0Q29sV2lkdGgoXCIudGFibGUtYm9keSAuYm9keUNvbEdyb3VwIGNvbFwiLCBTaG93SGlkZS5IaWRlLCBjb2x1bW5JZCk7XHJcbiAgICAgICAgICAgIF90aGlzLmNvbmZpZ1N0b3JlLlNldEhpZGRlbk9uQ29uZmlnKHRydWUsIGNvbHVtbklkKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuaGlkZUFsbENvbHVtbnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF90aGlzLlNldENvbFdpZHRoKFwiLnRhYmxlLWhlYWRlciAuaGVhZGVyQ29sR3JvdXAgY29sXCIsIFNob3dIaWRlLkhpZGVBbGwpO1xyXG4gICAgICAgICAgICBfdGhpcy5TZXRDb2xXaWR0aChcIi50YWJsZS1ib2R5IC5ib2R5Q29sR3JvdXAgY29sXCIsIFNob3dIaWRlLkhpZGVBbGwpO1xyXG4gICAgICAgICAgICBfdGhpcy5jb25maWdTdG9yZS5TZXRIaWRkZW5PbkNvbmZpZyh0cnVlKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuYXBwbHlDb2x1bW5Db25maWcgPSBmdW5jdGlvbiAoY29sdW1ucykge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGNvbHVtbnNfMSA9IGNvbHVtbnM7IF9pIDwgY29sdW1uc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbHVtbiA9IGNvbHVtbnNfMVtfaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uLmhpZGRlbikge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmhpZGVDb2x1bW4oY29sdW1uLmlkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnNob3dDb2x1bW4oY29sdW1uLmlkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5TZXRDb2xXaWR0aCA9IGZ1bmN0aW9uIChzZWxlY3RvciwgY29udHJvbCwgY29sdW1uSWQpIHtcclxuICAgICAgICAgICAgX3RoaXMucGFyZW50RWxlbWVudC5maW5kKHNlbGVjdG9yKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHdpZHRoID0gMDtcclxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50Q29sRWxlbSA9IGpRdWVyeShlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50Q29sID0gY3VycmVudENvbEVsZW0uYXR0cihcImRhdGEtaGVhZGVyLWlkXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRDb2wgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb2wgPSB2b2lkIDA7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKFtTaG93SGlkZS5TaG93LCBTaG93SGlkZS5IaWRlXS5pbmRleE9mKGNvbnRyb2wpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRDb2wgPT09IGNvbHVtbklkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbCA9PT0gU2hvd0hpZGUuU2hvdykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbCA9IENvbHVtblV0aWxfMS5Db21tb25VdGlsLkdldENvbHVtbk9iamVjdChjdXJyZW50Q29sLCBfdGhpcy5jb25maWdTdG9yZS5vcHRpb25zLmNvbHVtbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoID0gY29sLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudENvbEVsZW0ud2lkdGgod2lkdGggKyBcInB4XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChbU2hvd0hpZGUuU2hvd0FsbCwgU2hvd0hpZGUuSGlkZUFsbF0uaW5kZXhPZihjb250cm9sKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250cm9sID09PSBTaG93SGlkZS5TaG93QWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2wgPSBDb2x1bW5VdGlsXzEuQ29tbW9uVXRpbC5HZXRDb2x1bW5PYmplY3QoY3VycmVudENvbCwgX3RoaXMuY29uZmlnU3RvcmUub3B0aW9ucy5jb2x1bW5zKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoID0gY29sLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRDb2xFbGVtLndpZHRoKHdpZHRoICsgXCJweFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5jb25maWdTdG9yZSA9IGNvbmZpZ1N0b3JlO1xyXG4gICAgICAgIHRoaXMucGFyZW50RWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gVG9nZ2xlQ29sdW1uSGFuZGxlcjtcclxufSgpKTtcclxuZXhwb3J0cy5Ub2dnbGVDb2x1bW5IYW5kbGVyID0gVG9nZ2xlQ29sdW1uSGFuZGxlcjtcclxuXG5cbi8qKiovIH0pLFxuLyogMjIgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9qcy9zZXJ2aWNlcy9HcmlkVGVtcGxhdGVTZXJ2aWNlLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZHluYW1pYyBleHBvcnRzIHByb3ZpZGVkICovXG4vKiEgYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBHcmlkRGV0YWlsc1Jvd1RlbXBsYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vLi4vaGJzL2dyaWQtZGV0YWlscy1yb3cuaGJzICovIDYpO1xyXG52YXIgR3JpZEZvb3RlciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uLy4uL2hicy9ncmlkLWZvb3Rlci5oYnMgKi8gNyk7XHJcbnZhciBHcmlkTWFpblJvd1RlbXBsYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vLi4vaGJzL2dyaWQtbWFpbi1yb3cuaGJzICovIDkpO1xyXG52YXIgTWFuYWdlQ29sdW1uVGVtcGxhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi8uLi9oYnMvZ3JpZC1tYW5hZ2UtY29sdW1ucy5oYnMgKi8gMjQpO1xyXG52YXIgR3JpZFRlbXBsYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vLi4vaGJzL2dyaWQuaGJzICovIDI2KTtcclxudmFyIFBhZ2VyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9wYWdpbmF0aW9uL1BhZ2VyICovIDIpO1xyXG52YXIgR3JpZFRlbXBsYXRlU2VydmljZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEdyaWRUZW1wbGF0ZVNlcnZpY2UoY29uZmlnU3RvcmUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuR2V0Rmlyc3RUZW1wbGF0ZSA9IGZ1bmN0aW9uIChkYXRhLCBmaXJzdEluZGV4LCBsYXN0SW5kZXgpIHtcclxuICAgICAgICAgICAgX3RoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgICAgIHZhciBtYWluUm93QXJyYXkgPSBfdGhpcy5HZXRSb3dzSHRtbChmaXJzdEluZGV4LCBsYXN0SW5kZXgpO1xyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMudGVtcGxhdGVGdW5jdGlvbkZvckdyaWQoe1xyXG4gICAgICAgICAgICAgICAgY29sdW1uczogX3RoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5jb2x1bW5zLFxyXG4gICAgICAgICAgICAgICAgbWFpblJvd0FycmF5OiBtYWluUm93QXJyYXksXHJcbiAgICAgICAgICAgICAgICBwYWdpbmF0aW9uRGF0YTogUGFnZXJfMS5QYWdlci5QYWdpbmF0aW9uRGF0YSxcclxuICAgICAgICAgICAgICAgIGNhcHRpb246IF90aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuY2FwdGlvbixcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmdldFRlbXBsYXRlID0gZnVuY3Rpb24gKGZpcnN0SW5kZXgsIGxhc3RJbmRleCkge1xyXG4gICAgICAgICAgICB2YXIgbWFpblJvd0FycmF5ID0gX3RoaXMuR2V0Um93c0h0bWwoZmlyc3RJbmRleCwgbGFzdEluZGV4KTtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnRlbXBsYXRlRnVuY3Rpb25Gb3JNYWluUm93KHtcclxuICAgICAgICAgICAgICAgIGNvbHVtbnM6IF90aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuY29sdW1ucyxcclxuICAgICAgICAgICAgICAgIG1haW5Sb3dBcnJheTogbWFpblJvd0FycmF5LFxyXG4gICAgICAgICAgICAgICAgY2FwdGlvbjogX3RoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5jYXB0aW9uLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuR2V0TWFuYWdlQ29sdW1uc0h0bWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy50ZW1wbGF0ZUZ1bmN0aW9uRm9yTWFuYWdlQ29sKHsgY29sdW1uczogX3RoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5jb2x1bW5zIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5HZXRSb3dzSHRtbCA9IGZ1bmN0aW9uIChmaXJzdEluZGV4LCBsYXN0SW5kZXgpIHtcclxuICAgICAgICAgICAgdmFyIG1haW5Sb3dBcnJheSA9IFtdO1xyXG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gX3RoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5jb2x1bW5zLmxlbmd0aCArIDE7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBmaXJzdEluZGV4OyBpIDw9IGxhc3RJbmRleDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcm93ID0gX3RoaXMuZGF0YVtpXTtcclxuICAgICAgICAgICAgICAgIHZhciBtYWluUm93Q29sQXJyYXkgPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBfdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmNvbHVtbnM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbCA9IF9hW19pXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY29sdW1uVmFsdWUgPSByb3dbY29sLmlkXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29sLnJlbmRlckh5YnJpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5WYWx1ZSA9IF90aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuaHlicmlkRnVuY3Rpb24oY29sLCByb3cpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBtYWluUm93Q29sQXJyYXkucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtblZhbHVlOiBjb2x1bW5WYWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogY29sLnR5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpZGRlbjogY29sLmhpZGRlbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0dWFsVmFsdWU6IHJvd1tjb2wuaWRdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5OYW1lOiBjb2wubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGNvbC5pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyYWJsZTogY29sLmZpbHRlcmFibGUsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBtYWluUm93QXJyYXkucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgcm93RGF0YTogSlNPTi5zdHJpbmdpZnkocm93KSxcclxuICAgICAgICAgICAgICAgICAgICBrZXlDb2x1bW46IHJvd1tfdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmtleUNvbHVtbl0sXHJcbiAgICAgICAgICAgICAgICAgICAgbWFpblJvd0NvbEFycmF5OiBtYWluUm93Q29sQXJyYXksXHJcbiAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiBfdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmNvbHVtbnMubGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG1haW5Sb3dBcnJheTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuY29uZmlnU3RvcmUgPSBjb25maWdTdG9yZTtcclxuICAgICAgICB0aGlzLnRlbXBsYXRlRnVuY3Rpb25Gb3JHcmlkID0gR3JpZFRlbXBsYXRlO1xyXG4gICAgICAgIHRoaXMudGVtcGxhdGVGdW5jdGlvbkZvck1haW5Sb3cgPSBHcmlkTWFpblJvd1RlbXBsYXRlO1xyXG4gICAgICAgIHRoaXMudGVtcGxhdGVGdW5jdGlvbkZvckRldGFpbHNSb3cgPSBHcmlkRGV0YWlsc1Jvd1RlbXBsYXRlO1xyXG4gICAgICAgIHRoaXMudGVtcGxhdGVGdW5jdGlvbkZvckZvb3RlciA9IEdyaWRGb290ZXI7XHJcbiAgICAgICAgdGhpcy50ZW1wbGF0ZUZ1bmN0aW9uRm9yTWFuYWdlQ29sID0gTWFuYWdlQ29sdW1uVGVtcGxhdGU7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoR3JpZFRlbXBsYXRlU2VydmljZS5wcm90b3R5cGUsIFwiRGF0YVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGE7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoR3JpZFRlbXBsYXRlU2VydmljZS5wcm90b3R5cGUsIFwiRGF0YUxlbmd0aFwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGEubGVuZ3RoO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIEdyaWRUZW1wbGF0ZVNlcnZpY2U7XHJcbn0oKSk7XHJcbmV4cG9ydHMuR3JpZFRlbXBsYXRlU2VydmljZSA9IEdyaWRUZW1wbGF0ZVNlcnZpY2U7XHJcblxuXG4vKioqLyB9KSxcbi8qIDIzICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2hicy9oZWxwZXJzL1NlbGVjdGVkLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgc2VsZWN0ZWQgPSBmdW5jdGlvbiAoaW5wdXQsIHZhbHVlKSB7XHJcbiAgICByZXR1cm4gaW5wdXQgPT09IHZhbHVlID8gXCJzZWxlY3RlZFwiIDogXCJcIjtcclxufTtcclxuZXhwb3J0cy5kZWZhdWx0ID0gc2VsZWN0ZWQ7XHJcblxuXG4vKioqLyB9KSxcbi8qIDI0ICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9oYnMvZ3JpZC1tYW5hZ2UtY29sdW1ucy5oYnMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIEhhbmRsZWJhcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBoYW5kbGViYXJzICovIDApO1xuZnVuY3Rpb24gX19kZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIChvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmopOyB9XG5tb2R1bGUuZXhwb3J0cyA9IChIYW5kbGViYXJzW1wiZGVmYXVsdFwiXSB8fCBIYW5kbGViYXJzKS50ZW1wbGF0ZSh7XCIxXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgYWxpYXMxPWNvbnRhaW5lci5sYW1iZGEsIGFsaWFzMj1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbjtcblxuICByZXR1cm4gXCIgICAgICAgICAgICAgICAgPHRyIGRhdGEtaGVhZGVyLWlkPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8dGQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwiY2hlY2tib3hcXFwiIGNsYXNzPVxcXCJjb2wtc2V0dGluZ3MtaGlkZGVuLWNoZWNrYm94IGd1aSBtLXItMTBcXFwiIHZhbHVlPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuaWQgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIFwiXG4gICAgKyBhbGlhczIoX19kZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc3JjL2hicy9oZWxwZXJzL0NoZWNrZWQudHMgKi8gMjUpKS5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmhpZGRlbiA6IGRlcHRoMCkse1wibmFtZVwiOlwiQ2hlY2tlZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSlcbiAgICArIFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L3RkPlxcclxcbiAgICAgICAgICAgICAgICA8L3RyPlxcclxcblwiO1xufSxcImNvbXBpbGVyXCI6WzcsXCI+PSA0LjAuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBzdGFjazE7XG5cbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwiZ3VpIG9mLWhpZGRlbiBwLTEwIG1pbi13LTUwIHctYXV0byBmbHVpZC1oIGZsZXggY29sdW1uIGNvbnRhaW5lclxcXCIgPlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtc2V0dGluZ3MtaGVhZGVyXFxcIiBzdHlsZT1cXFwid2lkdGg6IDEwMCVcXFwiPlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiZ3VpIG1pbmkgZmx1aWQgaWNvbiBpbnB1dFxcXCI+XFxyXFxuICAgICAgICAgICAgPGlucHV0IGNsYXNzPVxcXCJjb2wtc2V0dGluZ3MtZmlsdGVyXFxcIiB0eXBlPVxcXCJ0ZXh0XFxcIiBwbGFjZWhvbGRlcj1cXFwiU2VhcmNoIGZpbHRlci4uLlxcXCI+XFxyXFxuICAgICAgICAgICAgPGkgY2xhc3M9XFxcInNlYXJjaCBpY29uXFxcIj48L2k+XFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImd1aSBtLXQtMTBcXFwiPlxcclxcbiAgICAgICAgICAgIDxhIGNsYXNzPVxcXCJndWkgbGVmdCBzaG93LWFsbC1jb2x1bW5cXFwiPlNob3cgQWxsPC9hPlxcclxcbiAgICAgICAgICAgIDxhIGNsYXNzPVxcXCJndWkgcmlnaHQgaGlkZS1hbGwtY29sdW1uXFxcIj5IaWRlIEFsbDwvYT5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiZ3VpIGNsZWFyXFxcIj48L2Rpdj5cXHJcXG4gICAgPC9kaXY+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImd1aSBjbGVhclxcXCI+PC9kaXY+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImNvbC1zZXR0aW5ncy10YWJsZSBndWkgZmx1aWQgaC05MCBvZi1hdXRvIHAtNSBtLXQtMTBcXFwiID5cXHJcXG4gICAgICAgIDx0YWJsZSBjbGFzcz1cXFwiZ3VpIHNtYWxsIHZlcnkgYm9yZGVyLWxlc3MgYmFzaWMgY29tcGFjdCB0YWJsZVxcXCI+XFxyXFxuICAgICAgICAgICAgPHRib2R5PlxcclxcblwiXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNvbHVtbnMgOiBkZXB0aDApLHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMSwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiICAgICAgICAgICAgPC90Ym9keT5cXHJcXG4gICAgICAgIDwvdGFibGU+XFxyXFxuICAgIDwvZGl2PlxcclxcbjwvZGl2PlwiO1xufSxcInVzZURhdGFcIjp0cnVlfSk7XG5cbi8qKiovIH0pLFxuLyogMjUgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9oYnMvaGVscGVycy9DaGVja2VkLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZHluYW1pYyBleHBvcnRzIHByb3ZpZGVkICovXG4vKiEgYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBjaGVja2VkID0gZnVuY3Rpb24gKGJvb2wpIHtcclxuICAgIHJldHVybiAhYm9vbCA/IFwiY2hlY2tlZFwiIDogXCJcIjtcclxufTtcclxuZXhwb3J0cy5kZWZhdWx0ID0gY2hlY2tlZDtcclxuXG5cbi8qKiovIH0pLFxuLyogMjYgKi9cbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2hicy9ncmlkLmhicyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZHluYW1pYyBleHBvcnRzIHByb3ZpZGVkICovXG4vKiEgYWxsIGV4cG9ydHMgdXNlZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgSGFuZGxlYmFycyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIGhhbmRsZWJhcnMgKi8gMCk7XG5mdW5jdGlvbiBfX2RlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgKG9iai5fX2VzTW9kdWxlID8gb2JqW1wiZGVmYXVsdFwiXSA6IG9iaik7IH1cbm1vZHVsZS5leHBvcnRzID0gKEhhbmRsZWJhcnNbXCJkZWZhdWx0XCJdIHx8IEhhbmRsZWJhcnMpLnRlbXBsYXRlKHtcIjFcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHJldHVybiBcIiAgICAgICAgICAgICAgICA8Y2FwdGlvbiBjbGFzcz1cXFwiZ3VpIGd1aS1zdWJoZWFkaW5nLTIgbS0wIHAtMCB0ZXh0LWxlZnRcXFwiPlwiXG4gICAgKyBjb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbihjb250YWluZXIubGFtYmRhKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jYXB0aW9uIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiPC9jYXB0aW9uPlxcblwiO1xufSxcIjNcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBzdGFjazE7XG5cbiAgcmV0dXJuIFwiICAgICAgICAgICAgICAgICAgICBcIlxuICAgICsgKChzdGFjazEgPSBfX2RlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9zcmMvaGJzL2hlbHBlcnMvQ29sdW1uLnRzICovIDI3KSkuY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLGRlcHRoMCx7XCJuYW1lXCI6XCJDb2x1bW5cIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCJcXG5cIjtcbn0sXCI1XCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxLCBhbGlhczE9Y29udGFpbmVyLmxhbWJkYSwgYWxpYXMyPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uO1xuXG4gIHJldHVybiBcIiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz1cXFwiZ3VpIGN1cnNvci1wb2ludGVyXFxcIiBpZD1cXFwiaGVhZGVyLVwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5pZCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCIgZGF0YS1oZWFkZXItaWQ9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5pZCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJndWkgc3ViIGhlYWRlclxcXCI+XCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCI8L3NwYW4+XFxuXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVyc1tcImlmXCJdLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuc29ydGFibGUgOiBkZXB0aDApLHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDYsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+XFxuXCI7XG59LFwiNlwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMTtcblxuICByZXR1cm4gXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXG4gICAgKyAoKHN0YWNrMSA9IF9fZGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3NyYy9oYnMvaGVscGVycy9PcmRlcmVkLnRzICovIDI4KSkuY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5vcmRlciA6IGRlcHRoMCkse1wibmFtZVwiOlwiT3JkZXJlZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIlxcblwiO1xufSxcImNvbXBpbGVyXCI6WzcsXCI+PSA0LjAuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBzdGFjazEsIGFsaWFzMT1kZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pO1xuXG4gIHJldHVybiBcIjxzdHlsZT5cXG4gICAgLmlubmVyLWNvbnRhaW5lciB7XFxuICAgICAgICBoZWlnaHQ6IDEwMCU7XFxuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgfVxcbiAgICAudGFibGUtaGVhZGVyIHtcXG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgICAgIHRvcDowICFpbXBvcnRhbnQ7XFxuICAgIH1cXG4gICAgLnRhYmxlLWJvZHkge1xcbiAgICAgICAgb3ZlcmZsb3c6IGF1dG87XFxuICAgICAgICBmbGV4OiA1O1xcbiAgICB9XFxuICAgIC5tYXJnaW4tYXV0b3tcXG4gICAgICAgIG1hcmdpbjogYXV0byAhaW1wb3J0YW50O1xcbiAgICB9XFxuICAgIC5ib3JkZXItbGVzcyB0ciB0ZCwuYm9yZGVyLWxlc3MgeyBib3JkZXI6IDBweCAhaW1wb3J0YW50OyB9XFxuICAgIC51aS5zdXBlcmNvbXBhY3QuaWNvbi5idXR0b24sIC51aS5zdXBlcmNvbXBhY3QuaWNvbi5idXR0b25zIC5idXR0b24ge1xcbiAgICAgICAgcGFkZGluZzogLjNlbSAuM2VtIC4zZW0gLjNlbSAhaW1wb3J0YW50O1xcbiAgICB9XFxuPC9zdHlsZT5cXG48ZGl2IGNsYXNzPVxcXCJpbm5lci1jb250YWluZXIgZ3VpIGZsdWlkIGNvbnRhaW5lclxcXCIgc3R5bGU9XFxcInBhZGRpbmc6MCU7XFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwidGFibGUtaGVhZGVyXFxcIj5cXG4gICAgICAgIDx0YWJsZSBpZD1cXFwiaGVhZGVydGFibGVcXFwiIGNsYXNzPVxcXCJndWkgYmFzaWMgbGFyZ2UgY29tcGFjdCBzb3J0YWJsZSBmaXhlZCBzaW5nbGUgbGluZSB0YWJsZVxcXCI+XFxuXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVyc1tcImlmXCJdLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jYXB0aW9uIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgxLCBkYXRhLCAwKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCIgICAgICAgICAgICA8Y29sZ3JvdXAgY2xhc3M9XFxcImhlYWRlckNvbEdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgPGNvbCBzdHlsZT1cXFwid2lkdGg6NDBweDtcXFwiIC8+XFxuICAgICAgICAgICAgICAgIDxjb2wgc3R5bGU9XFxcIndpZHRoOjQwcHg7XFxcIiAvPlxcblwiXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGFsaWFzMSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY29sdW1ucyA6IGRlcHRoMCkse1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgzLCBkYXRhLCAwKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCIgICAgICAgICAgICA8L2NvbGdyb3VwPlxcbiAgICAgICAgICAgIDx0aGVhZD5cXG4gICAgICAgICAgICAgICAgPHRyPlxcbiAgICAgICAgICAgICAgICAgICAgPHRoPjwvdGg+XFxuICAgICAgICAgICAgICAgICAgICA8dGg+PGlucHV0IHR5cGU9XFxcImNoZWNrYm94XFxcIiBjbGFzcz1cXFwic2VsZWN0LWFsbC1jaGVja2JveCBjdXJzb3ItcG9pbnRlclxcXCI+PC90aD5cXG5cIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzLmVhY2guY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNvbHVtbnMgOiBkZXB0aDApLHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oNSwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiICAgICAgICAgICAgICAgIDwvdHI+XFxuICAgICAgICAgICAgPC90aGVhZD5cXG4gICAgICAgIDwvdGFibGU+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJ0YWJsZS1ib2R5XFxcIj5cXG4gICAgICAgIDx0YWJsZSBjbGFzcz1cXFwiZ3VpIGJhc2ljIGxhcmdlIGNvbXBhY3QgZml4ZWQgc2VsZWN0YWJsZSBzaW5nbGUgbGluZSB0YWJsZSBtYWluVGFibGVcXFwiPlxcbiAgICAgICAgICAgIDxjb2xncm91cCBjbGFzcz1cXFwiYm9keUNvbEdyb3VwXFxcIj5cXG4gICAgICAgICAgICAgICAgPGNvbCBzdHlsZT1cXFwid2lkdGg6NDBweDtcXFwiIC8+IFxcbiAgICAgICAgICAgICAgICA8Y29sIHN0eWxlPVxcXCJ3aWR0aDo0MHB4O1xcXCIgLz5cXG5cIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzLmVhY2guY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNvbHVtbnMgOiBkZXB0aDApLHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMywgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiICAgICAgICAgICAgPC9jb2xncm91cD5cXG4gICAgICAgICAgICA8dGJvZHkgY2xhc3M9XFxcIm1haW5UYWJsZUJvZHlcXFwiPlxcblwiXG4gICAgKyAoKHN0YWNrMSA9IGNvbnRhaW5lci5pbnZva2VQYXJ0aWFsKF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc3JjL2hicy9ncmlkLW1haW4tcm93LmhicyAqLyA5KSxkZXB0aDAse1wibmFtZVwiOlwiZ3JpZC1tYWluLXJvd1wiLFwiZGF0YVwiOmRhdGEsXCJpbmRlbnRcIjpcIiAgICAgICAgICAgICAgICBcIixcImhlbHBlcnNcIjpoZWxwZXJzLFwicGFydGlhbHNcIjpwYXJ0aWFscyxcImRlY29yYXRvcnNcIjpjb250YWluZXIuZGVjb3JhdG9yc30pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiICAgICAgICAgICAgPC90Ym9keT5cXG4gICAgICAgIDwvdGFibGU+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJ0YWJsZS1mb290ZXIgZ3VpIGgtYXV0byBmbHVpZC13IGZsZXggamMtc2IgcC01IG0tMFxcXCI+XFxuXCJcbiAgICArICgoc3RhY2sxID0gY29udGFpbmVyLmludm9rZVBhcnRpYWwoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9zcmMvaGJzL2dyaWQtZm9vdGVyLmhicyAqLyA3KSxkZXB0aDAse1wibmFtZVwiOlwiZ3JpZC1mb290ZXJcIixcImRhdGFcIjpkYXRhLFwiaW5kZW50XCI6XCIgICAgICAgICAgIFwiLFwiaGVscGVyc1wiOmhlbHBlcnMsXCJwYXJ0aWFsc1wiOnBhcnRpYWxzLFwiZGVjb3JhdG9yc1wiOmNvbnRhaW5lci5kZWNvcmF0b3JzfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCIgICAgPC9kaXY+XFxuPC9kaXY+XCI7XG59LFwidXNlUGFydGlhbFwiOnRydWUsXCJ1c2VEYXRhXCI6dHJ1ZX0pO1xuXG4vKioqLyB9KSxcbi8qIDI3ICovXG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9oYnMvaGVscGVycy9Db2x1bW4udHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGR5bmFtaWMgZXhwb3J0cyBwcm92aWRlZCAqL1xuLyohIGFsbCBleHBvcnRzIHVzZWQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgQ29sdW1uID0gZnVuY3Rpb24gKGNvbCkge1xyXG4gICAgdmFyIGNhbGNXaWR0aCA9IGNvbC5oaWRkZW4gPyAwIDogY29sLndpZHRoO1xyXG4gICAgdmFyIGRhdGFBdHRySWQgPSAnZGF0YS1oZWFkZXItaWQ9XCInICsgY29sLmlkICsgJ1wiJztcclxuICAgIHJldHVybiAnPGNvbCBzdHlsZT1cIndpZHRoIDogJyArIGNhbGNXaWR0aCArICdweDtcIicgKyBkYXRhQXR0cklkICsgXCIgLz5cIjtcclxufTtcclxuZXhwb3J0cy5kZWZhdWx0ID0gQ29sdW1uO1xyXG5cblxuLyoqKi8gfSksXG4vKiAyOCAqL1xuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL2hicy9oZWxwZXJzL09yZGVyZWQudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBkeW5hbWljIGV4cG9ydHMgcHJvdmlkZWQgKi9cbi8qISBhbGwgZXhwb3J0cyB1c2VkICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIEdyaWRPcmRlckRpcmVjdGlvbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vLi4vanMvbW9kZWxzL0dyaWRPcmRlckRpcmVjdGlvbiAqLyA1KTtcclxudmFyIG9yZGVyZWQgPSBmdW5jdGlvbiAob3JkZXIpIHtcclxuICAgIGlmIChvcmRlciA9PT0gR3JpZE9yZGVyRGlyZWN0aW9uXzEuR3JpZE9yZGVyRGlyZWN0aW9uLkFzYykge1xyXG4gICAgICAgIHJldHVybiBcIjxpIGNsYXNzPVxcXCJndWkgZ3VpLWljb24gZ3VpLWljb24tYXJyb3ctdXBcXFwiID48L2k+IFwiO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAob3JkZXIgPT09IEdyaWRPcmRlckRpcmVjdGlvbl8xLkdyaWRPcmRlckRpcmVjdGlvbi5EZXNjKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiPGkgY2xhc3M9XFxcImd1aSBndWktaWNvbiBndWktaWNvbi1hcnJvdy1kb3duXFxcIiA+PC9pPiBcIjtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBcIjxpIGNsYXNzPVxcXCJndWkgZ3VpLWljb24gZ3VpLWljb24tYXJyb3ctdXAgZ3VpLWhpZGRlblxcXCIgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiID48L2k+IFwiICtcclxuICAgICAgICAgICAgXCI8aSBjbGFzcz1cXFwiZ3VpIGd1aS1pY29uIGd1aS1pY29uLWFycm93LWRvd24gZ3VpLWhpZGRlblxcXCIgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiID48L2k+XCI7XHJcbiAgICB9XHJcbn07XHJcbmV4cG9ydHMuZGVmYXVsdCA9IG9yZGVyZWQ7XHJcblxuXG4vKioqLyB9KVxuLyoqKioqKi8gXSk7XG59KTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gZ3JpZG9vLm1pbi5qcyIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEwKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCA0NDE3NTNkZTRmNGU0NWVlNTY5NCIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8wX187XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwge1wicm9vdFwiOlwiSGFuZGxlYmFyc1wiLFwiYW1kXCI6XCJoYW5kbGViYXJzLnJ1bnRpbWVcIixcImNvbW1vbmpzMlwiOlwiaGFuZGxlYmFycy9ydW50aW1lXCIsXCJjb21tb25qc1wiOlwiaGFuZGxlYmFycy9ydW50aW1lXCJ9XG4vLyBtb2R1bGUgaWQgPSAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiY29uc3QgZGlzYWJsZWQgPSAoYm9vbDogYm9vbGVhbik6IHN0cmluZyA9PiB7XHJcbiAgICByZXR1cm4gYm9vbCA/IFwiZGlzYWJsZWRcIiA6IFwiXCI7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBkaXNhYmxlZDtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy9oYnMvaGVscGVycy9EaXNhYmxlZC50cyIsImltcG9ydCB7IElQYWdpbmF0aW9uIH0gZnJvbSBcIi4uL21vZGVscy9JUGFnaW5hdGlvblwiO1xyXG5pbXBvcnQgeyBJUGFnaW5hdGlvbklucHV0IH0gZnJvbSBcIi4uL21vZGVscy9JUGFnaW5hdGlvbklucHV0XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgUGFnZXIge1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgcGFnaW5hdGlvbkRhdGE6IElQYWdpbmF0aW9uO1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgQ2FsY3VsYXRlUGFnaW5hdGlvbkRhdGEgPSAocGFnaW5hdGlvbklucHV0OiBJUGFnaW5hdGlvbklucHV0KTogdm9pZCA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhZ2luYXRpb25EYXRhOiBhbnkgPSB7fTtcclxuICAgICAgICAgICAgcGFnaW5hdGlvbkRhdGEucGFnZUluZGV4ID0gcGFnaW5hdGlvbklucHV0LnBhZ2VJbmRleDtcclxuICAgICAgICAgICAgcGFnaW5hdGlvbkRhdGEucGFnZVNpemUgPSBwYWdpbmF0aW9uSW5wdXQucGFnZVNpemU7XHJcbiAgICAgICAgICAgIHBhZ2luYXRpb25EYXRhLnBhZ2VTaXplcyA9IHBhZ2luYXRpb25JbnB1dC5wYWdlU2l6ZXM7XHJcbiAgICAgICAgICAgIHBhZ2luYXRpb25EYXRhLnRvdGFsQ291bnQgPSBwYWdpbmF0aW9uSW5wdXQudG90YWxDb3VudDtcclxuICAgICAgICAgICAgcGFnaW5hdGlvbkRhdGEubm9PZlBhZ2VzID0gTWF0aC5jZWlsKHBhZ2luYXRpb25JbnB1dC50b3RhbENvdW50IC8gcGFnaW5hdGlvbklucHV0LnBhZ2VTaXplKTtcclxuICAgICAgICAgICAgY29uc3QgbWluTnVtID0gKChwYWdpbmF0aW9uSW5wdXQucGFnZUluZGV4IC0gMSkgKiBwYWdpbmF0aW9uSW5wdXQucGFnZVNpemUpO1xyXG4gICAgICAgICAgICBjb25zdCBsb3dlckxpbWl0T2Zmc2V0ID0gcGFnaW5hdGlvbklucHV0LnBhZ2VTaXplID4gcGFnaW5hdGlvbklucHV0LnRvdGFsQ291bnQgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbklucHV0LnRvdGFsQ291bnQgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnaW5hdGlvbklucHV0LnBhZ2VTaXplO1xyXG4gICAgICAgICAgICBwYWdpbmF0aW9uRGF0YS5yYW5nZSA9IHtcclxuICAgICAgICAgICAgICAgIG1pbiA6IG1pbk51bSArIDEsXHJcbiAgICAgICAgICAgICAgICBtYXggOiBtaW5OdW0gKyBsb3dlckxpbWl0T2Zmc2V0LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBwYWdpbmF0aW9uRGF0YS5maXJzdFBhZ2VMaW5rRGlzYWJsZWQgPSBwYWdpbmF0aW9uRGF0YS5ub09mUGFnZXMgPT09IDEgfHwgcGFnaW5hdGlvbkRhdGEucGFnZUluZGV4ID09PSAxO1xyXG4gICAgICAgICAgICBwYWdpbmF0aW9uRGF0YS5sYXN0UGFnZUxpbmtEaXNhYmxlZCAgPSBwYWdpbmF0aW9uRGF0YS5ub09mUGFnZXMgPT09IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IChwYWdpbmF0aW9uRGF0YS5wYWdlSW5kZXggPT09IHBhZ2luYXRpb25EYXRhLm5vT2ZQYWdlcyk7XHJcbiAgICAgICAgICAgIHBhZ2luYXRpb25EYXRhLnByZXZQYWdlTGlua0Rpc2FibGVkICA9IHBhZ2luYXRpb25EYXRhLnBhZ2VJbmRleCA9PT0gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgKHBhZ2luYXRpb25EYXRhLnBhZ2VJbmRleCAtIDEpIDw9IDA7XHJcbiAgICAgICAgICAgIHBhZ2luYXRpb25EYXRhLm5leHRQYWdlTGlua0Rpc2FibGVkICA9IHBhZ2luYXRpb25EYXRhLm5vT2ZQYWdlcyA9PT0gcGFnaW5hdGlvbkRhdGEucGFnZUluZGV4XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCAocGFnaW5hdGlvbkRhdGEucGFnZUluZGV4ICsgMSkgPj0gcGFnaW5hdGlvbkRhdGEubm9PZlBhZ2VzO1xyXG4gICAgICAgICAgICBQYWdlci5wYWdpbmF0aW9uRGF0YSA9IHBhZ2luYXRpb25EYXRhO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IFBhZ2luYXRpb25EYXRhKCk6IElQYWdpbmF0aW9uIHtcclxuICAgICAgICByZXR1cm4gUGFnZXIucGFnaW5hdGlvbkRhdGE7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy9qcy9wYWdpbmF0aW9uL1BhZ2VyLnRzIiwiaW1wb3J0IHsgR3JpZE9yZGVyRGlyZWN0aW9uIH0gZnJvbSBcIi4uL21vZGVscy9HcmlkT3JkZXJEaXJlY3Rpb25cIjtcclxuaW1wb3J0IHsgSUNvbHVtbiB9IGZyb20gXCIuLy4uL21vZGVscy9JQ29sdW1uXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQ29tbW9uVXRpbCB7XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBHZXRDb2x1bW5PYmplY3QgPSAoY29sdW1uSWQ6IHN0cmluZywgY29sdW1uczogSUNvbHVtbltdKTogSUNvbHVtbiA9PiB7XHJcbiAgICAgICAgaWYgKGNvbHVtbklkID09IG51bGwgfHwgY29sdW1ucyA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgcmV0Q29sOiBJQ29sdW1uO1xyXG4gICAgICAgIGNvbHVtbnMuZm9yRWFjaCgoY29sOiBJQ29sdW1uKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChjb2wuaWQgPT09IGNvbHVtbklkKSB7XHJcbiAgICAgICAgICAgICAgICByZXRDb2wgPSBjb2w7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcmV0Q29sO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHN0YXRpYyBTZXRPcmRlciA9IChjb2x1bW5JZDogc3RyaW5nLCBvcmRlcjogR3JpZE9yZGVyRGlyZWN0aW9uLCBjb2x1bW5zOiBJQ29sdW1uW10pOiBJQ29sdW1uID0+IHtcclxuICAgICAgICBpZiAoY29sdW1uSWQgPT0gbnVsbCB8fCBjb2x1bW5zID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCByZXRDb2w6IElDb2x1bW47XHJcbiAgICAgICAgY29sdW1ucy5mb3JFYWNoKChjb2w6IElDb2x1bW4pID0+IHtcclxuICAgICAgICAgICAgaWYgKGNvbC5pZCA9PT0gY29sdW1uSWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbC5vcmRlciA9IG9yZGVyO1xyXG4gICAgICAgICAgICAgICAgcmV0Q29sID0gY29sO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHJldENvbDtcclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvdHNsaW50LWxvYWRlcj8/cmVmLS0xIS4vc3JjL2pzL3V0aWwvQ29sdW1uVXRpbC50cyIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV80X187XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJqUXVlcnlcIlxuLy8gbW9kdWxlIGlkID0gNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsImV4cG9ydCBlbnVtIEdyaWRPcmRlckRpcmVjdGlvbiB7XHJcbiAgICBOb25lID0gXCJOb25lXCIsXHJcbiAgICBBc2MgPSBcIkFzY1wiLFxyXG4gICAgRGVzYyA9IFwiRGVzY1wiLFxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy90c2xpbnQtbG9hZGVyPz9yZWYtLTEhLi9zcmMvanMvbW9kZWxzL0dyaWRPcmRlckRpcmVjdGlvbi50cyIsInZhciBIYW5kbGViYXJzID0gcmVxdWlyZShcImhhbmRsZWJhcnNcIik7XG5mdW5jdGlvbiBfX2RlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgKG9iai5fX2VzTW9kdWxlID8gb2JqW1wiZGVmYXVsdFwiXSA6IG9iaik7IH1cbm1vZHVsZS5leHBvcnRzID0gKEhhbmRsZWJhcnNbXCJkZWZhdWx0XCJdIHx8IEhhbmRsZWJhcnMpLnRlbXBsYXRlKHtcIjFcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBzdGFjazEsIGhlbHBlciwgYWxpYXMxPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksIGFsaWFzMj1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGFsaWFzMz1cImZ1bmN0aW9uXCIsIGFsaWFzND1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbjtcblxuICByZXR1cm4gXCIgICAgICAgICAgICAgICAgPHRyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXCJndWkgcnYtcGFyZW50XFxcIiB2YWxpZ249XFxcInRvcFxcXCIgZGF0YS1maWx0ZXItdHlwZT1cXFwiXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnR5cGUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnR5cGUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcInR5cGVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxcIiBkYXRhLWZpbHRlci1rZXk9XFxcIlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5pZCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuaWQgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcImlkXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcXCIgZGF0YS1maWx0ZXItdmFsdWU9XFxcIlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5hY3R1YWxWYWx1ZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuYWN0dWFsVmFsdWUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcImFjdHVhbFZhbHVlXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+XCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmNvbHVtbk5hbWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNvbHVtbk5hbWUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcImNvbHVtbk5hbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcbiAgICArIFwiPC9zcGFuPlxcclxcblwiXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnNbXCJpZlwiXS5jYWxsKGFsaWFzMSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZmlsdGVyYWJsZSA6IGRlcHRoMCkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMiwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiICAgICAgICAgICAgICAgICAgICA8L3RkPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPHRkPlwiXG4gICAgKyAoKHN0YWNrMSA9ICgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuY29sdW1uVmFsdWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNvbHVtblZhbHVlIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJjb2x1bW5WYWx1ZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiPC90ZD5cXHJcXG4gICAgICAgICAgICAgICAgPC90cj5cXHJcXG5cIjtcbn0sXCIyXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICByZXR1cm4gXCIgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiZ3VpIG0tbC01IHJ2LWNoaWxkIGd1aS1jYXB0aW9uXFxcIiA+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJndWkgZ3VpLWljb24gZ3VpLWljb24tYWRkIGhvdmVyIG0tbC01IGN1cnNvci1wb2ludGVyIGFkZEZpbHRlclxcXCI+PC9pPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cXFwiZ3VpIGd1aS1pY29uIGd1aS1pY29uLW1pbnVzIGhvdmVyIG0tbC01IGN1cnNvci1wb2ludGVyIHJlbW92ZUZpbHRlclxcXCI+PC9pPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXHJcXG5cIjtcbn0sXCJjb21waWxlclwiOls3LFwiPj0gNC4wLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxLCBoZWxwZXIsIGFsaWFzMT1kZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pO1xuXG4gIHJldHVybiBcIjx0ciBjbGFzcz1cXFwiZ3VpIGd1aS1oaWRkZW4gZGV0YWlsc1Jvd1xcXCI+XFxyXFxuICAgIDx0ZCBjb2xzcGFuPVxcXCJcIlxuICAgICsgY29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5sZW5ndGggfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxlbmd0aCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJzLmhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBcImZ1bmN0aW9uXCIgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwibGVuZ3RoXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcXCI+XFxyXFxuICAgICAgICA8dGFibGUgY2xhc3M9XFxcImd1aSB2ZXJ5IGNvbXBhY3Qgc2VsZWN0YWJsZSBjZWxsZWQgdGFibGUgZGV0YWlsc1RhYmxlIG0tbC0zNyBwLTVcXFwiIHN0eWxlPVxcXCJ3aWR0aDogYXV0bztcXFwiID5cXHJcXG4gICAgICAgICAgICA8dGJvZHk+XFxyXFxuXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5tYWluUm93Q29sQXJyYXkgOiBkZXB0aDApLHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMSwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiICAgICAgICAgICAgPC90Ym9keT5cXHJcXG4gICAgICAgIDwvdGFibGU+XFxyXFxuICAgIDwvdGQ+XFxyXFxuPC90cj5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2hicy9ncmlkLWRldGFpbHMtcm93Lmhic1xuLy8gbW9kdWxlIGlkID0gNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsInZhciBIYW5kbGViYXJzID0gcmVxdWlyZShcImhhbmRsZWJhcnNcIik7XG5mdW5jdGlvbiBfX2RlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgKG9iai5fX2VzTW9kdWxlID8gb2JqW1wiZGVmYXVsdFwiXSA6IG9iaik7IH1cbm1vZHVsZS5leHBvcnRzID0gKEhhbmRsZWJhcnNbXCJkZWZhdWx0XCJdIHx8IEhhbmRsZWJhcnMpLnRlbXBsYXRlKHtcIjFcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSxibG9ja1BhcmFtcyxkZXB0aHMpIHtcbiAgICB2YXIgc3RhY2sxLCBhbGlhczE9Y29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb247XG5cbiAgcmV0dXJuIFwiICAgICAgICA8b3B0aW9uIFwiXG4gICAgKyBhbGlhczEoX19kZWZhdWx0KHJlcXVpcmUoXCJDOlxcXFxVc2Vyc1xcXFxyb3VzdHVyZ1xcXFxTb3VyY2VcXFxcUmVwb3NcXFxcU2VhcmNoTWFzdGVyXFxcXEdyaWRvb1xcXFxzcmNcXFxcaGJzXFxcXGhlbHBlcnNcXFxcU2VsZWN0ZWQudHNcIikpLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwoKHN0YWNrMSA9IChkZXB0aHNbMV0gIT0gbnVsbCA/IGRlcHRoc1sxXS5wYWdpbmF0aW9uRGF0YSA6IGRlcHRoc1sxXSkpICE9IG51bGwgPyBzdGFjazEucGFnZVNpemUgOiBzdGFjazEpLGRlcHRoMCx7XCJuYW1lXCI6XCJTZWxlY3RlZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSlcbiAgICArIFwiPlwiXG4gICAgKyBhbGlhczEoY29udGFpbmVyLmxhbWJkYShkZXB0aDAsIGRlcHRoMCkpXG4gICAgKyBcIjwvb3B0aW9uPlxcclxcblwiO1xufSxcImNvbXBpbGVyXCI6WzcsXCI+PSA0LjAuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSxibG9ja1BhcmFtcyxkZXB0aHMpIHtcbiAgICB2YXIgc3RhY2sxLCBhbGlhczE9Y29udGFpbmVyLmxhbWJkYSwgYWxpYXMyPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uLCBhbGlhczM9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KTtcblxuICByZXR1cm4gXCI8ZGl2IGRhdGEtcm9sZT1cXFwicGFnZXJcXFwiIGNsYXNzPVxcXCJndWkgZ3VpLXN1YmhlYWRpbmctMSB0ZXh0LWxlZnQgbS0wXFxcIj5cXHJcXG4gICAgPHNwYW4gY2xhc3M9XFxcImd1aSBtaW5pIGNvbXBhY3QgXFxcIj5cXHJcXG4gICAgICAgIDxidXR0b24gY2xhc3M9XFxcImd1aSBtaW5pIGNvbXBhY3QgZmlyc3RMaW5rXFxcIiBhcmlhLWRpc2FibGVkPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5wYWdpbmF0aW9uRGF0YSA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEuZmlyc3RQYWdlTGlua0Rpc2FibGVkIDogc3RhY2sxKSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIiBcIlxuICAgICsgYWxpYXMyKF9fZGVmYXVsdChyZXF1aXJlKFwiQzpcXFxcVXNlcnNcXFxccm91c3R1cmdcXFxcU291cmNlXFxcXFJlcG9zXFxcXFNlYXJjaE1hc3RlclxcXFxHcmlkb29cXFxcc3JjXFxcXGhic1xcXFxoZWxwZXJzXFxcXERpc2FibGVkLnRzXCIpKS5jYWxsKGFsaWFzMywoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5wYWdpbmF0aW9uRGF0YSA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEuZmlyc3RQYWdlTGlua0Rpc2FibGVkIDogc3RhY2sxKSx7XCJuYW1lXCI6XCJEaXNhYmxlZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSlcbiAgICArIFwiXFxyXFxuICAgICAgICAgICAgYXJpYS1sYWJlbD1cXFwiR28gdG8gdGhlIGZpcnN0IHBhZ2VcXFwiIHRpdGxlPVxcXCJHbyB0byB0aGUgZmlyc3QgcGFnZVxcXCIgZGF0YS1wYWdlPVxcXCIxXFxcIiB0YWJpbmRleD1cXFwiMFxcXCI+XFxyXFxuICAgICAgICAgICAgPGkgY2xhc3M9XFxcImd1aS1pY29uIGd1aS1pY29uLXByZXZpb3VzXFxcIj48L2k+XFxyXFxuICAgICAgICA8L2J1dHRvbj5cXHJcXG4gICAgICAgIDxidXR0b24gY2xhc3M9XFxcImd1aSBtaW5pIGNvbXBhY3QgcHJldkxpbmtcXFwiIGFyaWEtZGlzYWJsZWQ9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnBhZ2luYXRpb25EYXRhIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5wcmV2UGFnZUxpbmtEaXNhYmxlZCA6IHN0YWNrMSksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCIgXCJcbiAgICArIGFsaWFzMihfX2RlZmF1bHQocmVxdWlyZShcIkM6XFxcXFVzZXJzXFxcXHJvdXN0dXJnXFxcXFNvdXJjZVxcXFxSZXBvc1xcXFxTZWFyY2hNYXN0ZXJcXFxcR3JpZG9vXFxcXHNyY1xcXFxoYnNcXFxcaGVscGVyc1xcXFxEaXNhYmxlZC50c1wiKSkuY2FsbChhbGlhczMsKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucGFnaW5hdGlvbkRhdGEgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLnByZXZQYWdlTGlua0Rpc2FibGVkIDogc3RhY2sxKSx7XCJuYW1lXCI6XCJEaXNhYmxlZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSlcbiAgICArIFwiXFxyXFxuICAgICAgICAgICAgYXJpYS1sYWJlbD1cXFwiR28gdG8gdGhlIHByZXZpb3VzIHBhZ2VcXFwiIHRpdGxlPVxcXCJHbyB0byB0aGUgcHJldmlvdXMgcGFnZVxcXCIgZGF0YS1wYWdlPVxcXCJcIlxuICAgICsgYWxpYXMyKF9fZGVmYXVsdChyZXF1aXJlKFwiQzpcXFxcVXNlcnNcXFxccm91c3R1cmdcXFxcU291cmNlXFxcXFJlcG9zXFxcXFNlYXJjaE1hc3RlclxcXFxHcmlkb29cXFxcc3JjXFxcXGhic1xcXFxoZWxwZXJzXFxcXG1hdGgudHNcIikpLmNhbGwoYWxpYXMzLCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnBhZ2luYXRpb25EYXRhIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5wYWdlSW5kZXggOiBzdGFjazEpLFwiLVwiLDEse1wibmFtZVwiOlwibWF0aFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSlcbiAgICArIFwiXFxcIlxcclxcbiAgICAgICAgICAgIHRhYmluZGV4PVxcXCIwXFxcIj5cXHJcXG4gICAgICAgICAgICA8aSBjbGFzcz1cXFwiZ3VpLWljb24gZ3VpLWljb24tY2hldnJvbi1sZWZ0XFxcIj48L2k+XFxyXFxuICAgICAgICAgICAgUHJldlxcclxcbiAgICAgICAgPC9idXR0b24+XFxyXFxuICAgIDwvc3Bhbj5cXHJcXG4gICAgPHNwYW4gY2xhc3M9XFxcImd1aSBwYWdlci1pbnB1dC1jb250YWluZXIgaW5wdXRcXFwiPlxcclxcbiAgICAgICAgPHNwYW4gY2xhc3M9XFxcImd1aSBtLXItNVxcXCI+IFBhZ2UgPC9zcGFuPlxcclxcbiAgICAgICAgPGlucHV0IGNsYXNzPVxcXCJndWkgcGFnZXItaW5wdXQgdy0yNSBwLTAgbS1yLTVcXFwiIGFyaWEtbGFiZWw9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnBhZ2luYXRpb25EYXRhIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5wYWdlSW5kZXggOiBzdGFjazEpLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIHZhbHVlPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5wYWdpbmF0aW9uRGF0YSA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEucGFnZUluZGV4IDogc3RhY2sxKSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIiB0eXBlPVxcXCJ0ZXh0XFxcIiBwbGFjZWhvbGRlcj1cXFwiUGFnZSBOdW1iZXIgLi4uXFxcIj5cXHJcXG4gICAgICAgIDxzcGFuIGNsYXNzPVxcXCJuby1vZi1wYWdlcy1zY2FuXFxcIiBkYXRhLW51bWJlci1vZi1wYWdlcz1cXFwiXCJcbiAgICArIGFsaWFzMihhbGlhczEoKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucGFnaW5hdGlvbkRhdGEgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLm5vT2ZQYWdlcyA6IHN0YWNrMSksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCI+IG9mIFwiXG4gICAgKyBhbGlhczIoYWxpYXMxKCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnBhZ2luYXRpb25EYXRhIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5ub09mUGFnZXMgOiBzdGFjazEpLCBkZXB0aDApKVxuICAgICsgXCI8L3NwYW4+XFxyXFxuICAgIDwvc3Bhbj5cXHJcXG4gICAgPHNwYW4gY2xhc3M9XFxcImd1aSBtaW5pIGNvbXBhY3QgXFxcIj5cXHJcXG4gICAgICAgIDxidXR0b24gY2xhc3M9XFxcImd1aSBtaW5pIGNvbXBhY3QgbmV4dExpbmtcXFwiIGFyaWEtZGlzYWJsZWQ9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnBhZ2luYXRpb25EYXRhIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5uZXh0UGFnZUxpbmtEaXNhYmxlZCA6IHN0YWNrMSksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCIgXCJcbiAgICArIGFsaWFzMihfX2RlZmF1bHQocmVxdWlyZShcIkM6XFxcXFVzZXJzXFxcXHJvdXN0dXJnXFxcXFNvdXJjZVxcXFxSZXBvc1xcXFxTZWFyY2hNYXN0ZXJcXFxcR3JpZG9vXFxcXHNyY1xcXFxoYnNcXFxcaGVscGVyc1xcXFxEaXNhYmxlZC50c1wiKSkuY2FsbChhbGlhczMsKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucGFnaW5hdGlvbkRhdGEgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLm5leHRQYWdlTGlua0Rpc2FibGVkIDogc3RhY2sxKSx7XCJuYW1lXCI6XCJEaXNhYmxlZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSlcbiAgICArIFwiXFxyXFxuICAgICAgICAgICAgYXJpYS1sYWJlbD1cXFwiR28gdG8gdGhlIG5leHQgcGFnZVxcXCIgdGl0bGU9XFxcIkdvIHRvIHRoZSBuZXh0IHBhZ2VcXFwiIGRhdGEtcGFnZT1cXFwiXCJcbiAgICArIGFsaWFzMihfX2RlZmF1bHQocmVxdWlyZShcIkM6XFxcXFVzZXJzXFxcXHJvdXN0dXJnXFxcXFNvdXJjZVxcXFxSZXBvc1xcXFxTZWFyY2hNYXN0ZXJcXFxcR3JpZG9vXFxcXHNyY1xcXFxoYnNcXFxcaGVscGVyc1xcXFxtYXRoLnRzXCIpKS5jYWxsKGFsaWFzMywoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5wYWdpbmF0aW9uRGF0YSA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEucGFnZUluZGV4IDogc3RhY2sxKSxcIitcIiwxLHtcIm5hbWVcIjpcIm1hdGhcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpXG4gICAgKyBcIlxcXCIgdGFiaW5kZXg9XFxcIjBcXFwiPlxcclxcbiAgICAgICAgICAgIE5leHRcXHJcXG4gICAgICAgICAgICA8aSBjbGFzcz1cXFwiZ3VpLWljb24gZ3VpLWljb24tY2hldnJvbi1yaWdodFxcXCI+PC9pPlxcclxcbiAgICAgICAgPC9idXR0b24+XFxyXFxuICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJndWkgbWluaSBjb21wYWN0IGxhc3RMaW5rXFxcIiBhcmlhLWRpc2FibGVkPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5wYWdpbmF0aW9uRGF0YSA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEubGFzdFBhZ2VMaW5rRGlzYWJsZWQgOiBzdGFjazEpLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIFwiXG4gICAgKyBhbGlhczIoX19kZWZhdWx0KHJlcXVpcmUoXCJDOlxcXFxVc2Vyc1xcXFxyb3VzdHVyZ1xcXFxTb3VyY2VcXFxcUmVwb3NcXFxcU2VhcmNoTWFzdGVyXFxcXEdyaWRvb1xcXFxzcmNcXFxcaGJzXFxcXGhlbHBlcnNcXFxcRGlzYWJsZWQudHNcIikpLmNhbGwoYWxpYXMzLCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnBhZ2luYXRpb25EYXRhIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5sYXN0UGFnZUxpbmtEaXNhYmxlZCA6IHN0YWNrMSkse1wibmFtZVwiOlwiRGlzYWJsZWRcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpXG4gICAgKyBcIlxcclxcbiAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPVxcXCJHbyB0byB0aGUgbGFzdCBwYWdlXFxcIiB0aXRsZT1cXFwiR28gdG8gdGhlIGxhc3QgcGFnZVxcXCIgZGF0YS1wYWdlPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5wYWdpbmF0aW9uRGF0YSA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEubm9PRnBhZ2VzIDogc3RhY2sxKSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIiB0YWJpbmRleD1cXFwiMFxcXCI+XFxyXFxuICAgICAgICAgICAgPGkgY2xhc3M9XFxcImd1aS1pY29uIGd1aS1pY29uLW5leHRcXFwiPjwvaT5cXHJcXG4gICAgICAgIDwvYnV0dG9uPlxcclxcbiAgICA8L3NwYW4+XFxyXFxuPC9kaXY+XFxyXFxuPGRpdiBjbGFzcz1cXFwiZ3VpIGd1aS1zdWJoZWFkaW5nLTEgdGV4dC1yaWdodCBtLTBcXFwiPlxcclxcbiAgICA8c3Bhbj5Sb3dzIFBlciBQYWdlPC9zcGFuPlxcclxcbiAgICA8c2VsZWN0IGNsYXNzPVxcXCJndWkgcGFnZVNpemVTZWxlY3RvclxcXCI+XFxyXFxuXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoYWxpYXMzLCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnBhZ2luYXRpb25EYXRhIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5wYWdlU2l6ZXMgOiBzdGFjazEpLHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMSwgZGF0YSwgMCwgYmxvY2tQYXJhbXMsIGRlcHRocyksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiICAgIDwvc2VsZWN0PlxcclxcbiAgICA8c3BhbiBjbGFzcz1cXFwiZ3VpIG0tbC0xMFxcXCI+XCJcbiAgICArIGFsaWFzMihhbGlhczEoKChzdGFjazEgPSAoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5wYWdpbmF0aW9uRGF0YSA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEucmFuZ2UgOiBzdGFjazEpKSAhPSBudWxsID8gc3RhY2sxLm1pbiA6IHN0YWNrMSksIGRlcHRoMCkpXG4gICAgKyBcIiAtIFwiXG4gICAgKyBhbGlhczIoYWxpYXMxKCgoc3RhY2sxID0gKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucGFnaW5hdGlvbkRhdGEgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLnJhbmdlIDogc3RhY2sxKSkgIT0gbnVsbCA/IHN0YWNrMS5tYXggOiBzdGFjazEpLCBkZXB0aDApKVxuICAgICsgXCIgb2YgXCJcbiAgICArIGFsaWFzMihhbGlhczEoKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucGFnaW5hdGlvbkRhdGEgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLnRvdGFsQ291bnQgOiBzdGFjazEpLCBkZXB0aDApKVxuICAgICsgXCIgaXRlbXM8L3NwYW4+XFxyXFxuPC9kaXY+XCI7XG59LFwidXNlRGF0YVwiOnRydWUsXCJ1c2VEZXB0aHNcIjp0cnVlfSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvaGJzL2dyaWQtZm9vdGVyLmhic1xuLy8gbW9kdWxlIGlkID0gN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsImNvbnN0IG1hdGggPSAobHZhbHVlOiBudW1iZXIsIG9wZXJhdG9yOiBzdHJpbmcsIHJ2YWx1ZTogbnVtYmVyLCBvcHRpb25zKTogbnVtYmVyID0+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgXCIrXCI6IGx2YWx1ZSArIHJ2YWx1ZSxcclxuICAgICAgICBcIi1cIjogbHZhbHVlIC0gcnZhbHVlLFxyXG4gICAgICAgIFwiKlwiOiBsdmFsdWUgKiBydmFsdWUsXHJcbiAgICAgICAgXCIvXCI6IGx2YWx1ZSAvIHJ2YWx1ZSxcclxuICAgICAgICBcIiVcIjogbHZhbHVlICUgcnZhbHVlLFxyXG4gICAgfVtvcGVyYXRvcl07XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBtYXRoO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvdHNsaW50LWxvYWRlcj8/cmVmLS0xIS4vc3JjL2hicy9oZWxwZXJzL21hdGgudHMiLCJ2YXIgSGFuZGxlYmFycyA9IHJlcXVpcmUoXCJoYW5kbGViYXJzXCIpO1xuZnVuY3Rpb24gX19kZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIChvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmopOyB9XG5tb2R1bGUuZXhwb3J0cyA9IChIYW5kbGViYXJzW1wiZGVmYXVsdFwiXSB8fCBIYW5kbGViYXJzKS50ZW1wbGF0ZSh7XCIxXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxLCBhbGlhczE9Y29udGFpbmVyLmxhbWJkYSwgYWxpYXMyPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uO1xuXG4gIHJldHVybiBcIjx0ciBjbGFzcz1cXFwibWFpblJvd1xcXCIgZGF0YS1way1hdHRyPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAua2V5Q29sdW1uIDogZGVwdGgwKSwgZGVwdGgwKSlcbiAgICArIFwiXFxcIiA+XFxyXFxuICAgIDx0ZCBjbGFzcz1cXFwiZXhwYW5zaW9uQXJyb3dzXFxcIiBzdHlsZT1cXFwiZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXI7XFxcIj5cXHJcXG4gICAgICAgIDxpIGNsYXNzPVxcXCJndWkgZ3VpLWljb24gZ3VpLWljb24tY2hldnJvbi1kb3duIGV4cGFuZERldGFpbHNSb3dJY29uIGN1cnNvci1wb2ludGVyXFxcIiBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCI+PC9pPlxcclxcbiAgICAgICAgPGkgY2xhc3M9XFxcImd1aSBndWktaWNvbiBndWktaWNvbi1jaGV2cm9uLXVwIENvbGxhcHNlRGV0YWlsc1Jvd0ljb24gY3Vyc29yLXBvaW50ZXIgZ3VpLWhpZGRlblxcXCIgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiPjwvaT5cXHJcXG4gICAgPC90ZD5cXHJcXG4gICAgPHRkPlxcclxcbiAgICAgICAgPGlucHV0IHR5cGU9XFxcImNoZWNrYm94XFxcIiBkYXRhLXZhbHVlPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucm93RGF0YSA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCIgdmFsdWU9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5rZXlDb2x1bW4gOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIGNsYXNzPVxcXCJzZWxlY3Qta2V5LWNoZWNrYm94IGN1cnNvci1wb2ludGVyXFxcIj5cXHJcXG4gICAgPC90ZD5cXHJcXG5cIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzLmVhY2guY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5tYWluUm93Q29sQXJyYXkgOiBkZXB0aDApLHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMiwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiPC90cj5cXHJcXG5cIlxuICAgICsgKChzdGFjazEgPSBjb250YWluZXIuaW52b2tlUGFydGlhbChyZXF1aXJlKFwiQzpcXFxcVXNlcnNcXFxccm91c3R1cmdcXFxcU291cmNlXFxcXFJlcG9zXFxcXFNlYXJjaE1hc3RlclxcXFxHcmlkb29cXFxcc3JjXFxcXGhic1xcXFxncmlkLWRldGFpbHMtcm93Lmhic1wiKSxkZXB0aDAse1wibmFtZVwiOlwiZ3JpZC1kZXRhaWxzLXJvd1wiLFwiZGF0YVwiOmRhdGEsXCJoZWxwZXJzXCI6aGVscGVycyxcInBhcnRpYWxzXCI6cGFydGlhbHMsXCJkZWNvcmF0b3JzXCI6Y29udGFpbmVyLmRlY29yYXRvcnN9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIiBcIjtcbn0sXCIyXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxLCBhbGlhczE9Y29udGFpbmVyLmxhbWJkYSwgYWxpYXMyPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uO1xuXG4gIHJldHVybiBcIiAgICAgICAgPHRkIHRpdGxlPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuYWN0dWFsVmFsdWUgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIGNsYXNzPVxcXCJib2R5LVwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5pZCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCI+XCJcbiAgICArICgoc3RhY2sxID0gYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jb2x1bW5WYWx1ZSA6IGRlcHRoMCksIGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCI8L3RkPlxcclxcblwiO1xufSxcImNvbXBpbGVyXCI6WzcsXCI+PSA0LjAuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBzdGFjazE7XG5cbiAgcmV0dXJuICgoc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubWFpblJvd0FycmF5IDogZGVwdGgwKSx7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDEsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpO1xufSxcInVzZVBhcnRpYWxcIjp0cnVlLFwidXNlRGF0YVwiOnRydWV9KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9oYnMvZ3JpZC1tYWluLXJvdy5oYnNcbi8vIG1vZHVsZSBpZCA9IDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCJpbXBvcnQgKiBhcyBqUXVlcnkgZnJvbSBcImpxdWVyeVwiO1xuaW1wb3J0IHsgQ29uZmlnU3RvcmUgfSBmcm9tIFwiLi4vY29uZmlnL0NvbmZpZ1N0b3JlXCI7XG5pbXBvcnQgeyBDb2xTZXR0aW5nc0hhbmRsZXIgfSBmcm9tIFwiLi4vZXZlbnRIYW5kbGVycy9Db2xTZXR0aW5nc0hhbmRsZXJcIjtcbmltcG9ydCB7IFNlbGVjdEV2ZW50SGFuZGxlciB9IGZyb20gXCIuLi9ldmVudEhhbmRsZXJzL1NlbGVjdEV2ZW50SGFuZGxlclwiO1xuaW1wb3J0IHsgSUdyaWRPcmRlciB9IGZyb20gXCIuLi9tb2RlbHMvSUdyaWRPcmRlclwiO1xuaW1wb3J0IHsgSVBhZ2luYXRpb24gfSBmcm9tIFwiLi4vbW9kZWxzL0lQYWdpbmF0aW9uXCI7XG5pbXBvcnQgeyBJUGFnaW5hdGlvbklucHV0IH0gZnJvbSBcIi4uL21vZGVscy9JUGFnaW5hdGlvbklucHV0XCI7XG5pbXBvcnQgeyBQYWdlciB9IGZyb20gXCIuLi9wYWdpbmF0aW9uL1BhZ2VyXCI7XG5pbXBvcnQgeyBEZXRhaWxzUm93SGFuZGxlciB9IGZyb20gXCIuLy4uL2V2ZW50SGFuZGxlcnMvRGV0YWlsc1Jvd0hhbmRsZXJcIjtcbmltcG9ydCB7IEZpbHRlckNsaWNrSGFuZGxlciB9IGZyb20gXCIuLy4uL2V2ZW50SGFuZGxlcnMvRmlsdGVyQ2xpY2tIYW5kbGVyXCI7XG5pbXBvcnQgeyBIYW5kbGVyTmFtZXMgfSBmcm9tIFwiLi8uLi9ldmVudEhhbmRsZXJzL0hhbmRsZXJOYW1lc1wiO1xuaW1wb3J0IHsgSGVhZGVyQ2xpY2tIYW5kbGVyIH0gZnJvbSBcIi4vLi4vZXZlbnRIYW5kbGVycy9IZWFkZXJDbGlja0hhbmRsZXJcIjtcbmltcG9ydCB7IElFdmVudEhhbmRsZXIgfSBmcm9tIFwiLi8uLi9ldmVudEhhbmRsZXJzL0lFdmVudEhhbmRsZXJcIjtcbmltcG9ydCB7IElIYW5kbGVyQ2hhaW4gfSBmcm9tIFwiLi8uLi9ldmVudEhhbmRsZXJzL0lIYW5kbGVyQ2hhaW5cIjtcbmltcG9ydCB7IFBhZ2VTZWFyY2hIYW5kbGVyIH0gZnJvbSBcIi4vLi4vZXZlbnRIYW5kbGVycy9QYWdlU2VhcmNoQ2xpY2tIYW5kbGVyXCI7XG5pbXBvcnQgeyBTY3JvbGxIYW5kbGVyIH0gZnJvbSBcIi4vLi4vZXZlbnRIYW5kbGVycy9TY3JvbGxIYW5kbGVyXCI7XG5pbXBvcnQgeyBUb2dnbGVDb2x1bW5IYW5kbGVyIH0gZnJvbSBcIi4vLi4vZXZlbnRIYW5kbGVycy9Ub2dnbGVDb2x1bW5IYW5kbGVyXCI7XG5pbXBvcnQgeyBGaWx0ZXJBY3Rpb25UeXBlIH0gZnJvbSBcIi4vLi4vbW9kZWxzL0ZpbHRlckFjdGlvblR5cGVcIjtcbmltcG9ydCB7IEdyaWRPcmRlckRpcmVjdGlvbiB9IGZyb20gXCIuLy4uL21vZGVscy9HcmlkT3JkZXJEaXJlY3Rpb25cIjtcbmltcG9ydCB7IElDb2x1bW4gfSBmcm9tIFwiLi8uLi9tb2RlbHMvSUNvbHVtblwiO1xuaW1wb3J0IHsgR3JpZFRlbXBsYXRlU2VydmljZSB9IGZyb20gXCIuLy4uL3NlcnZpY2VzL0dyaWRUZW1wbGF0ZVNlcnZpY2VcIjtcbmltcG9ydCB7IENvbW1vblV0aWwgfSBmcm9tIFwiLi8uLi91dGlsL0NvbHVtblV0aWxcIjtcbmltcG9ydCB7IElHcmlkT3B0aW9ucyB9IGZyb20gXCIuL0lHcmlkT3B0aW9uc1wiO1xuXG5leHBvcnQgY2xhc3MgR3JpZDxUPiB7XG5cbiAgICBwcml2YXRlIGhhbmRsZUNoYWluOiBBcnJheTxJSGFuZGxlckNoYWluPFQ+PjtcbiAgICBwcml2YXRlIGdyaWRUZW1wbGF0ZVNlcnZpY2U6IEdyaWRUZW1wbGF0ZVNlcnZpY2U8VD47XG4gICAgcHJpdmF0ZSBjb25maWdTdG9yZTogQ29uZmlnU3RvcmU8VD47XG4gICAgcHJpdmF0ZSB0b2dnbGVIYW5kbGVyOiBUb2dnbGVDb2x1bW5IYW5kbGVyPFQ+O1xuICAgIHByaXZhdGUgc2Nyb2xsSGFuZGxlcjogU2Nyb2xsSGFuZGxlcjxUPjtcbiAgICBwcml2YXRlIG1hbmFnZUNvbEhhbmRsZXI6IENvbFNldHRpbmdzSGFuZGxlcjxUPjtcblxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IElHcmlkT3B0aW9uczxUPikge1xuICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlID0gbmV3IENvbmZpZ1N0b3JlPFQ+KG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmdyaWRUZW1wbGF0ZVNlcnZpY2UgPSBuZXcgR3JpZFRlbXBsYXRlU2VydmljZSh0aGlzLmNvbmZpZ1N0b3JlKTtcbiAgICAgICAgdGhpcy5Jbml0SGFuZGxlcnMoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYmluZERhdGEgPSAoZGF0YTogVFtdLCBwYWdpbmF0aW9uSW5wdXQ/OiBJUGFnaW5hdGlvbklucHV0KTogdm9pZCA9PiB7XG4gICAgICAgIGNvbnN0IGZpcnN0SW5kZXggPSAwO1xuICAgICAgICBsZXQgbGFzdEluZGV4ID0gdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmNodW5rU2l6ZSArIHRoaXMuZ2V0SW5pdGlhbFJvd0NvdW50KCk7XG4gICAgICAgIGxhc3RJbmRleCA9IGxhc3RJbmRleCA+PSBkYXRhLmxlbmd0aCA/IGRhdGEubGVuZ3RoIC0gMSA6IGxhc3RJbmRleDtcbiAgICAgICAgUGFnZXIuQ2FsY3VsYXRlUGFnaW5hdGlvbkRhdGEocGFnaW5hdGlvbklucHV0KTtcbiAgICAgICAgY29uc3QgZ3JpZENvbnRlbnQ6IHN0cmluZyA9IHRoaXMuZ3JpZFRlbXBsYXRlU2VydmljZS5HZXRGaXJzdFRlbXBsYXRlKGRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJzdEluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmNvbnRhaW5lckVsZW1lbnQuaW5uZXJIVE1MID0gZ3JpZENvbnRlbnQ7XG4gICAgICAgIGlmICh0aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMubWFuYWdlQ29sU2V0dGluZ3NDb250YWluZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5iaW5kTWFuYWdlQ29sdW1zKHRoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5tYW5hZ2VDb2xTZXR0aW5nc0NvbnRhaW5lcik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSGF2ZSB0byBiaW5kIFNjcm9sbCBIYW5kbGVyIEFmdGVyIERPTSBoYXMgYmVlbiBjcmVhdGVkXG4gICAgICAgIGlmICggdGhpcy5zY3JvbGxIYW5kbGVyICE9PSB1bmRlZmluZWQgJiYgdGhpcy5zY3JvbGxIYW5kbGVyICE9PSBudWxsICkge1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxIYW5kbGVyLnJlbW92ZUhhbmRsZXIoKTtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsSGFuZGxlci5yZXNldFBhcmVudE9mZnNldCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxIYW5kbGVyID0gbmV3IFNjcm9sbEhhbmRsZXI8VD4odGhpcy5jb25maWdTdG9yZSwgdGhpcy5ncmlkVGVtcGxhdGVTZXJ2aWNlLCBsYXN0SW5kZXggKyAxKTtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsSGFuZGxlci53YXRjaFdpZHRoKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zY3JvbGxIYW5kbGVyLlJlZ2lzdGVyRG9tSGFuZGxlcigpO1xuICAgIH1cblxuICAgIHB1YmxpYyBiaW5kTWFuYWdlQ29sdW1zID0gKG1hbmFnZUNvbENvbnRhaW5lcj86IEhUTUxFbGVtZW50LCBmb3JjZT86IGJvb2xlYW4pOiB2b2lkID0+IHtcbiAgICAgICAgaWYgKHRoaXMubWFuYWdlQ29sSGFuZGxlciAhPT0gdW5kZWZpbmVkICYmICFmb3JjZSApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBodG1sID0gdGhpcy5ncmlkVGVtcGxhdGVTZXJ2aWNlLkdldE1hbmFnZUNvbHVtbnNIdG1sKCk7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBqUXVlcnkobWFuYWdlQ29sQ29udGFpbmVyXG4gICAgICAgICAgICAgICAgICAgICAgICB8fCB0aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMubWFuYWdlQ29sU2V0dGluZ3NDb250YWluZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIHx8IHRoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5jb250YWluZXJFbGVtZW50KTtcbiAgICAgICAgdGhpcy50b2dnbGVIYW5kbGVyID0gbmV3IFRvZ2dsZUNvbHVtbkhhbmRsZXIodGhpcy5jb25maWdTdG9yZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgalF1ZXJ5KHRoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5jb250YWluZXJFbGVtZW50KSk7XG4gICAgICAgIHRoaXMuY29uZmlnU3RvcmUub3B0aW9ucy5tYW5hZ2VDb2xTZXR0aW5nc0NvbnRhaW5lciA9IGVsZW1lbnRbMF07XG4gICAgICAgIHRoaXMubWFuYWdlQ29sSGFuZGxlciA9IG5ldyBDb2xTZXR0aW5nc0hhbmRsZXI8VD4oalF1ZXJ5KGVsZW1lbnQpLCB0aGlzLmNvbmZpZ1N0b3JlLCB0aGlzLnRvZ2dsZUhhbmRsZXIpO1xuICAgICAgICBlbGVtZW50LmZpbmQoXCIuY29sLXNldHRpbmdzLWNvbnRhaW5lclwiKS5odG1sKGh0bWwpO1xuICAgICAgICB0aGlzLm1hbmFnZUNvbEhhbmRsZXIuUmVnaXN0ZXJEb21IYW5kbGVyKCk7XG4gICAgICAgIGpRdWVyeSh3aW5kb3cpLnJlc2l6ZSh0aGlzLmRvY3VtZW50UmVzaXplSGFuZGxlckZvckNzKTtcbiAgICAgICAgalF1ZXJ5KGRvY3VtZW50KS5jbGljayh0aGlzLmRvY3VtZW50Q2xpY2tIYW5kbGVyRm9yQ3MpO1xuICAgIH1cbiAgICBwdWJsaWMgYXBwbHlDb2x1bW5Db25maWcgPSAoY29sdW1uczogSUNvbHVtbltdKSA9PiB7XG4gICAgICAgIHRoaXMudG9nZ2xlSGFuZGxlci5hcHBseUNvbHVtbkNvbmZpZyhjb2x1bW5zKTtcbiAgICAgICAgY29uc3QgaHRtbCA9IHRoaXMuZ3JpZFRlbXBsYXRlU2VydmljZS5HZXRNYW5hZ2VDb2x1bW5zSHRtbCgpO1xuICAgICAgICBjb25zdCBlbGVtZW50ID0galF1ZXJ5KHRoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5tYW5hZ2VDb2xTZXR0aW5nc0NvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmNvbnRhaW5lckVsZW1lbnQpO1xuICAgICAgICBlbGVtZW50LmZpbmQoXCIuY29sLXNldHRpbmdzLWNvbnRhaW5lclwiKS5odG1sKGh0bWwpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRPcmRlciA9IChvcmRlckJ5TGlzdDogSUdyaWRPcmRlcltdKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgY29sIG9mIHRoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5jb2x1bW5zKSB7XG4gICAgICAgICAgICBjb2wub3JkZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9yZGVyQnlMaXN0ID09PSB1bmRlZmluZWQgfHwgb3JkZXJCeUxpc3QgPT09IG51bGwgfHwgb3JkZXJCeUxpc3QubGVuZ3RoID09PSAwICkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3Qgb3JkZXJDb2wgb2Ygb3JkZXJCeUxpc3QpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgY29sIG9mIHRoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5jb2x1bW5zKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9yZGVyQ29sLmNvbElkID09PSBjb2wuaWQgKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbC5vcmRlciA9IG9yZGVyQ29sLm9yZGVyO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZGVzdHJveSA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgcGFyZW50RWxlbWVudCA9IGpRdWVyeSh0aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuY29udGFpbmVyRWxlbWVudCk7XG4gICAgICAgIGlmICggcGFyZW50RWxlbWVudCAhPT0gdW5kZWZpbmVkICkge1xuICAgICAgICAgICAgcGFyZW50RWxlbWVudC5vZmYoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtYW5hZ2VDb250YWluZXJFbGVtZW50ID0galF1ZXJ5KHRoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5tYW5hZ2VDb2xTZXR0aW5nc0NvbnRhaW5lcik7XG4gICAgICAgIGlmICggbWFuYWdlQ29udGFpbmVyRWxlbWVudCAhPT0gdW5kZWZpbmVkICkge1xuICAgICAgICAgICAgbWFuYWdlQ29udGFpbmVyRWxlbWVudC5vZmYoKTtcbiAgICAgICAgfVxuICAgICAgICAkKHdpbmRvdykub2ZmKFwicmVzaXplXCIsIHRoaXMuZG9jdW1lbnRSZXNpemVIYW5kbGVyKTtcbiAgICAgICAgJChkb2N1bWVudCkub2ZmKFwiY2xpY2tcIiwgdGhpcy5kb2N1bWVudENsaWNrSGFuZGxlcik7XG4gICAgICAgICQod2luZG93KS5vZmYoXCJyZXNpemVcIiwgdGhpcy5kb2N1bWVudFJlc2l6ZUhhbmRsZXJGb3JDcyk7XG4gICAgICAgICQoZG9jdW1lbnQpLm9mZihcImNsaWNrXCIsIHRoaXMuZG9jdW1lbnRDbGlja0hhbmRsZXJGb3JDcyk7XG4gICAgICAgIGlmICggdGhpcy5zY3JvbGxIYW5kbGVyICE9PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbEhhbmRsZXIudW5XYXRjaFdpZHRoKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGdldEluaXRpYWxSb3dDb3VudCA9ICgpOiBudW1iZXIgPT4ge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcigoalF1ZXJ5KHdpbmRvdykuaW5uZXJIZWlnaHQoKSAqIDAuNjUgKSAvIDMyKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIEluaXRIYW5kbGVycyA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgY29uc3QgcGFyZW50RWxlbWVudCA9IGpRdWVyeSh0aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuY29udGFpbmVyRWxlbWVudCk7XG4gICAgICAgIHRoaXMuaGFuZGxlQ2hhaW4gPSBbXTtcbiAgICAgICAgdGhpcy5oYW5kbGVDaGFpbi5wdXNoKHtcbiAgICAgICAgICAgIGhhbmRsZXI6IG5ldyBEZXRhaWxzUm93SGFuZGxlcjxUPih0aGlzLmNvbmZpZ1N0b3JlLCBwYXJlbnRFbGVtZW50KSxcbiAgICAgICAgICAgIG5hbWU6IEhhbmRsZXJOYW1lcy5EZXRhaWxzUm93LFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5oYW5kbGVDaGFpbi5wdXNoKHtcbiAgICAgICAgICAgIGhhbmRsZXI6ICBuZXcgRmlsdGVyQ2xpY2tIYW5kbGVyPFQ+KHRoaXMuY29uZmlnU3RvcmUsIHBhcmVudEVsZW1lbnQpLFxuICAgICAgICAgICAgbmFtZTogSGFuZGxlck5hbWVzLkZpbHRlckFjdGlvbixcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuaGFuZGxlQ2hhaW4ucHVzaCh7XG4gICAgICAgICAgICBoYW5kbGVyOiBuZXcgSGVhZGVyQ2xpY2tIYW5kbGVyPFQ+KHRoaXMuY29uZmlnU3RvcmUsIHBhcmVudEVsZW1lbnQpLFxuICAgICAgICAgICAgbmFtZTogSGFuZGxlck5hbWVzLkhlYWRlckNsaWNrLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5oYW5kbGVDaGFpbi5wdXNoKHtcbiAgICAgICAgICAgIGhhbmRsZXI6IG5ldyBQYWdlU2VhcmNoSGFuZGxlcjxUPih0aGlzLmNvbmZpZ1N0b3JlLCBwYXJlbnRFbGVtZW50KSxcbiAgICAgICAgICAgIG5hbWU6IEhhbmRsZXJOYW1lcy5QYWdlU2VhcmNoLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gcGFyZW50RWxlbWVudDtcbiAgICAgICAgdGhpcy5oYW5kbGVDaGFpbi5wdXNoKHtcbiAgICAgICAgICAgIGhhbmRsZXI6IG5ldyBTZWxlY3RFdmVudEhhbmRsZXI8VD4odGhpcy5jb25maWdTdG9yZSwgcGFyZW50RWxlbWVudCwgdGhpcy5ncmlkVGVtcGxhdGVTZXJ2aWNlKSxcbiAgICAgICAgICAgIG5hbWU6IEhhbmRsZXJOYW1lcy5Db2xTZXR0aW5ncyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuaGFuZGxlQ2hhaW4uZm9yRWFjaCgodmFsdWU6IElIYW5kbGVyQ2hhaW48VD4pOiB2b2lkID0+IHtcbiAgICAgICAgICAgIHZhbHVlLmhhbmRsZXIuUmVnaXN0ZXJEb21IYW5kbGVyKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBqUXVlcnkod2luZG93KS5yZXNpemUodGhpcy5kb2N1bWVudFJlc2l6ZUhhbmRsZXIpO1xuICAgICAgICBqUXVlcnkoZG9jdW1lbnQpLmNsaWNrKHRoaXMuZG9jdW1lbnRDbGlja0hhbmRsZXIpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZG9jdW1lbnRSZXNpemVIYW5kbGVyRm9yQ3MgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgdGhpcy5tYW5hZ2VDb2xIYW5kbGVyLm9uUmVzaXplKCk7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgICBwcml2YXRlIGRvY3VtZW50Q2xpY2tIYW5kbGVyRm9yQ3MgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgdGhpcy5tYW5hZ2VDb2xIYW5kbGVyLm9uRG9jdW1lbnRDbGljayhldmVudCk7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgICBwcml2YXRlIGRvY3VtZW50UmVzaXplSGFuZGxlckZvclNjcm9sbCA9IChldmVudCkgPT4ge1xuICAgICAgICB0aGlzLm1hbmFnZUNvbEhhbmRsZXIub25SZXNpemUoKTtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICAgIHByaXZhdGUgZG9jdW1lbnRDbGlja0hhbmRsZXIgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgdGhpcy5oYW5kbGVDaGFpbi5mb3JFYWNoKCh2YWx1ZTogSUhhbmRsZXJDaGFpbjxUPik6IHZvaWQgPT4ge1xuICAgICAgICAgICAgdmFsdWUuaGFuZGxlci5vbkRvY3VtZW50Q2xpY2soZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICAgIHByaXZhdGUgZG9jdW1lbnRSZXNpemVIYW5kbGVyID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHRoaXMuaGFuZGxlQ2hhaW4uZm9yRWFjaCgodmFsdWU6IElIYW5kbGVyQ2hhaW48VD4pOiB2b2lkID0+IHtcbiAgICAgICAgICAgIHZhbHVlLmhhbmRsZXIub25Eb2N1bWVudENsaWNrKGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cblxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy9qcy9tYWluL0dyaWQudHMiLCJpbXBvcnQgeyBJR3JpZE9wdGlvbnMgfSBmcm9tIFwiLi4vbWFpbi9JR3JpZE9wdGlvbnNcIjtcclxuaW1wb3J0IHsgRmlsdGVyQWN0aW9uVHlwZSB9IGZyb20gXCIuLi9tb2RlbHMvRmlsdGVyQWN0aW9uVHlwZVwiO1xyXG5pbXBvcnQgeyBHcmlkT3JkZXJEaXJlY3Rpb24gfSBmcm9tIFwiLi4vbW9kZWxzL0dyaWRPcmRlckRpcmVjdGlvblwiO1xyXG5pbXBvcnQgeyBJQ29sdW1uIH0gZnJvbSBcIi4uL21vZGVscy9JQ29sdW1uXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQ29uZmlnU3RvcmU8VD4ge1xyXG4gICAgcHVibGljIG9wdGlvbnM6IElHcmlkT3B0aW9uczxUPjtcclxuICAgIHByaXZhdGUgZGVmYXVsdEdyaWRPcHRpb25zOiBJR3JpZE9wdGlvbnM8VD4gPSB7XHJcbiAgICAgICAgYW5pbWF0aW9uVGltZTogMjAwLFxyXG4gICAgICAgIGNodW5rU2l6ZTogNSxcclxuICAgICAgICBjb2x1bW5zOiBbXSxcclxuICAgICAgICBjb250YWluZXJFbGVtZW50OiBudWxsLFxyXG4gICAgICAgIG1hbmFnZUNvbFNldHRpbmdzQ29udGFpbmVyOiBudWxsLFxyXG4gICAgICAgIGh5YnJpZEZ1bmN0aW9uOiAoY29sdW1uOiBJQ29sdW1uLCByb3c6IFQpOiBzdHJpbmcgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJ0cnVlXCI7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBrZXlDb2x1bW46IFwiXCIsXHJcbiAgICAgICAgb25Db2xTZXR0aW5nc0NoYW5nZTogKGNvbENvbmZpZzogSUNvbHVtbltdKTogdm9pZCA9PiB7XHJcbiAgICAgICAgICAgIC8vIE5vIENvZGVcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQ2xpY2tGaWx0ZXI6IChjb2x1bW46IHN0cmluZywgdmFsdWU6IGFueSwgYWN0aW9uVHlwZTogRmlsdGVyQWN0aW9uVHlwZSk6IHZvaWQgPT4ge1xyXG4gICAgICAgICAgICAvLyBObyBjb2RlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkNsaWNrSGVhZGVyOiAoY29sdW1uOiBzdHJpbmcsIGRpcmVjdGlvbjogR3JpZE9yZGVyRGlyZWN0aW9uKTogdm9pZCA9PiB7XHJcbiAgICAgICAgICAgIC8vIE5vIGNvZGVcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uUGFnZVNlYXJjaDogKHBhZ2VTaXplOiBudW1iZXIsIHBhZ2VJbmRleDogbnVtYmVyKTogdm9pZCA9PiB7XHJcbiAgICAgICAgICAgIC8vIE5vIGNvZGVcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uU2VsZWN0OiAocm93czogVFtdKTogdm9pZCA9PiB7XHJcbiAgICAgICAgICAgIC8vIE5vIENvZGVcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IElHcmlkT3B0aW9uczxUPikge1xyXG4gICAgICAgIHRoaXMuZXh0ZW5kT3B0aW9ucyhvcHRpb25zKTtcclxuICAgICAgICBpZiAob3B0aW9ucy5jb250YWluZXJFbGVtZW50ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBsZWFzZSBQcm92aWRlIGEgdmFsaWQgY29udGFpbmVyIEVsZW1lbnQgb2JqZWN0XCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXQgT3B0aW9ucyhvcHRpb25zOiBJR3JpZE9wdGlvbnM8VD4pIHtcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGdldCBPcHRpb25zKCk6IElHcmlkT3B0aW9uczxUPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucztcclxuICAgIH1cclxuICAgIHB1YmxpYyBTZXRIaWRkZW5PbkNvbmZpZyA9IChib29sOiBib29sZWFuLCBjb2x1bW5JZD86IHN0cmluZyk6IHZvaWQgPT4ge1xyXG4gICAgICAgIGZvciAoY29uc3QgY29sIG9mIHRoaXMuT3B0aW9ucy5jb2x1bW5zKSB7XHJcbiAgICAgICAgICAgIGlmIChjb2x1bW5JZCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBjb2wuaGlkZGVuID0gYm9vbDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChjb2wuaWQgPT09IGNvbHVtbklkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sLmhpZGRlbiA9IGJvb2w7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGV4dGVuZE9wdGlvbnMgPSAoaW5wdXRPcHRpb25zOiBJR3JpZE9wdGlvbnM8VD4pOiBJR3JpZE9wdGlvbnM8VD4gPT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMgPSBqUXVlcnkuZXh0ZW5kKHt9LCB0aGlzLmRlZmF1bHRHcmlkT3B0aW9ucywgaW5wdXRPcHRpb25zKTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvdHNsaW50LWxvYWRlcj8/cmVmLS0xIS4vc3JjL2pzL2NvbmZpZy9Db25maWdTdG9yZS50cyIsImltcG9ydCB7IElHcmlkT3B0aW9ucyB9IGZyb20gXCIuLi9tYWluL0lHcmlkT3B0aW9uc1wiO1xyXG5pbXBvcnQgeyBDb25maWdTdG9yZSB9IGZyb20gXCIuLy4uL2NvbmZpZy9Db25maWdTdG9yZVwiO1xyXG5pbXBvcnQgeyBJRXZlbnRIYW5kbGVyIH0gZnJvbSBcIi4vSUV2ZW50SGFuZGxlclwiO1xyXG5pbXBvcnQgeyBUb2dnbGVDb2x1bW5IYW5kbGVyIH0gZnJvbSBcIi4vVG9nZ2xlQ29sdW1uSGFuZGxlclwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIENvbFNldHRpbmdzSGFuZGxlcjxUPiBpbXBsZW1lbnRzIElFdmVudEhhbmRsZXI8VD4ge1xyXG4gICAgcHJpdmF0ZSBwYXJlbnRFbGVtZW50OiBKUXVlcnk7XHJcbiAgICBwcml2YXRlIHRvZ2dsZUNvbHVtbkhhbmRsZXI6IFRvZ2dsZUNvbHVtbkhhbmRsZXI8VD47XHJcbiAgICBwcml2YXRlIGNvbmZpZ1N0b3JlOiBDb25maWdTdG9yZTxUPjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50OiBKUXVlcnksIGNvbmZpZ1N0b3JlOiBDb25maWdTdG9yZTxUPiwgdG9nZ2xlQ29sdW1uSGFuZGxlcjogVG9nZ2xlQ29sdW1uSGFuZGxlcjxUPikge1xyXG4gICAgICAgIHRoaXMucGFyZW50RWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy5jb25maWdTdG9yZSA9IGNvbmZpZ1N0b3JlO1xyXG4gICAgICAgIHRoaXMudG9nZ2xlQ29sdW1uSGFuZGxlciA9IHRvZ2dsZUNvbHVtbkhhbmRsZXI7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgb25SZXNpemUoKTogdm9pZCB7XHJcbiAgICAgICAgLy8gY29uc3Qgc2V0dG5nc1BvcHVwID0gdGhpcy5wYXJlbnRFbGVtZW50LmZpbmQoXCIuY29sLXNldHRpbmdzLWNvbnRhaW5lclwiKTtcclxuICAgICAgICAvLyBjb25zdCB0Ym9keUhlaWdodCA9IHRoaXMucGFyZW50RWxlbWVudC5maW5kKFwiLnRhYmxlLWJvZHlcIikuaW5uZXJIZWlnaHQoKTtcclxuICAgICAgICAvLyBzZXR0bmdzUG9wdXAuaW5uZXJIZWlnaHQodGJvZHlIZWlnaHQgLSAxMCk7XHJcbiAgICAgICAgLy8gc2V0dG5nc1BvcHVwLmZpbmQoXCIuY29sLXNldHRpbmdzLXRhYmxlXCIpLmlubmVySGVpZ2h0KHNldHRuZ3NQb3B1cC5pbm5lckhlaWdodCgpIC1cclxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0bmdzUG9wdXAuZmluZChcIi5jb2wtc2V0dGluZ3MtaGVhZGVyXCIpLmlubmVySGVpZ2h0KCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvbkRvY3VtZW50Q2xpY2soZXZlbnQpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCB0YXJnZXRFbGVtZW50ID0galF1ZXJ5KGV2ZW50LnRhcmdldCk7XHJcbiAgICAgICAgaWYgKHRhcmdldEVsZW1lbnQuaXMoXCIuY29sLXNldHRpbmdzLXRyaWdnZXJcIikpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRhcmdldEVsZW1lbnQucGFyZW50cygpLmlzKFwiLmNvbC1zZXR0aW5ncy1jb250YWluZXJcIikpIHtcclxuICAgICAgICAgICAgalF1ZXJ5KFwiLmNvbC1zZXR0aW5ncy10cmlnZ2VyXCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICBqUXVlcnkoXCIuY29sLXNldHRpbmdzLWNvbnRhaW5lclwiKS5zbGlkZVVwKHRoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5hbmltYXRpb25UaW1lKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgUmVnaXN0ZXJEb21IYW5kbGVyKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucGFyZW50RWxlbWVudC5vbihcImNsaWNrXCIsIFwiLmNvbC1zZXR0aW5ncy10cmlnZ2VyXCIsIChldmVudCk6IHZvaWQgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0galF1ZXJ5KGV2ZW50LnRhcmdldCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHNldHRuZ3NQb3B1cCA9IHRoaXMucGFyZW50RWxlbWVudC5maW5kKFwiLmNvbC1zZXR0aW5ncy1jb250YWluZXJcIik7XHJcbiAgICAgICAgICAgIHRoaXMub25SZXNpemUoKTtcclxuICAgICAgICAgICAgalF1ZXJ5KFwiLmNvbC1zZXR0aW5ncy10cmlnZ2VyXCIpLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICBzZXR0bmdzUG9wdXAuc2xpZGVUb2dnbGUodGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmFuaW1hdGlvblRpbWUpO1xyXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnBhcmVudEVsZW1lbnQub24oXCJrZXl1cFwiLCBcIi5jb2wtc2V0dGluZ3MtaGVhZGVyIC5jb2wtc2V0dGluZ3MtZmlsdGVyXCIsXHJcbiAgICAgICAgICAgIChldmVudCk6IHZvaWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGpRdWVyeShldmVudC50YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdmFsID0gZWxlbWVudC52YWwoKS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh2YWwpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnRFbGVtZW50LmZpbmQoXCIuY29sLXNldHRpbmdzLXRhYmxlIHRhYmxlIHRib2R5IHRyXCIpLmVhY2goKGk6IG51bWJlciwgZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGpRdWVyeShlKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGpRdWVyeShlKS5hdHRyKFwiZGF0YS1oZWFkZXItaWRcIikudG9Mb3dlckNhc2UoKS5pbmRleE9mKHZhbCkgPT09IC0xICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBqUXVlcnkoZSkuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRFbGVtZW50Lm9uKFwiY2xpY2tcIiwgXCIuc2hvdy1hbGwtY29sdW1uXCIsIChldmVudCk6IHZvaWQgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnBhcmVudEVsZW1lbnQuZmluZChcIi5jb2wtc2V0dGluZ3MtaGlkZGVuLWNoZWNrYm94XCIpXHJcbiAgICAgICAgICAgIC5lYWNoKChpbmRleCwgZWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgalF1ZXJ5KGVsZW1lbnQpLnByb3AoXCJjaGVja2VkXCIsIHRydWUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy50b2dnbGVDb2x1bW5IYW5kbGVyLnNob3dBbGxDb2x1bW5zKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5vbkNvbFNldHRpbmdzQ2hhbmdlKHRoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5jb2x1bW5zKTtcclxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRFbGVtZW50Lm9uKFwiY2xpY2tcIiwgXCIuaGlkZS1hbGwtY29sdW1uXCIsIChldmVudCk6IHZvaWQgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnBhcmVudEVsZW1lbnQuZmluZChcIi5jb2wtc2V0dGluZ3MtaGlkZGVuLWNoZWNrYm94XCIpXHJcbiAgICAgICAgICAgIC5lYWNoKChpbmRleCwgZWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgalF1ZXJ5KGVsZW1lbnQpLnByb3AoXCJjaGVja2VkXCIsIGZhbHNlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlQ29sdW1uSGFuZGxlci5oaWRlQWxsQ29sdW1ucygpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMub25Db2xTZXR0aW5nc0NoYW5nZSh0aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuY29sdW1ucyk7XHJcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMucGFyZW50RWxlbWVudC5vbihcImNsaWNrXCIsIFwiLmNvbC1zZXR0aW5ncy1oaWRkZW4tY2hlY2tib3hcIiwgKGV2ZW50KTogdm9pZCA9PiB7XHJcbiAgICAgICAgICAgIGlmIChldmVudC5vcmlnaW5hbEV2ZW50ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoZWNrYm94ID0galF1ZXJ5KGV2ZW50LnRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpZCA9IGNoZWNrYm94LnZhbCgpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hlY2tib3guaXMoXCI6Y2hlY2tlZFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlQ29sdW1uSGFuZGxlci5zaG93Q29sdW1uKGlkKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGVDb2x1bW5IYW5kbGVyLmhpZGVDb2x1bW4oaWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5vbkNvbFNldHRpbmdzQ2hhbmdlKHRoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5jb2x1bW5zKTtcclxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy90c2xpbnQtbG9hZGVyPz9yZWYtLTEhLi9zcmMvanMvZXZlbnRIYW5kbGVycy9Db2xTZXR0aW5nc0hhbmRsZXIudHMiLCJpbXBvcnQgeyBDb25maWdTdG9yZSB9IGZyb20gXCIuLi9jb25maWcvQ29uZmlnU3RvcmVcIjtcclxuaW1wb3J0IHsgR3JpZFRlbXBsYXRlU2VydmljZSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9HcmlkVGVtcGxhdGVTZXJ2aWNlXCI7XHJcbmltcG9ydCB7IElFdmVudEhhbmRsZXIgfSBmcm9tIFwiLi9JRXZlbnRIYW5kbGVyXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU2VsZWN0RXZlbnRIYW5kbGVyPFQ+IGltcGxlbWVudHMgSUV2ZW50SGFuZGxlcjxUPiB7XHJcbiAgICBwcml2YXRlIHBhcmVudEVsZW1lbnQ6IEpRdWVyeTtcclxuICAgIHByaXZhdGUgY29uZmlnU3RvcmU6IENvbmZpZ1N0b3JlPFQ+O1xyXG4gICAgcHJpdmF0ZSBncmlkVGVtcGxhdGVTZXJ2aWNlOiBHcmlkVGVtcGxhdGVTZXJ2aWNlPFQ+O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZ1N0b3JlOiBDb25maWdTdG9yZTxUPiwgZWxlbWVudDogSlF1ZXJ5LCBncmlkVGVtcGxhdGVTZXJ2aWNlOiBHcmlkVGVtcGxhdGVTZXJ2aWNlPFQ+KSB7XHJcbiAgICAgICAgdGhpcy5jb25maWdTdG9yZSA9IGNvbmZpZ1N0b3JlO1xyXG4gICAgICAgIHRoaXMucGFyZW50RWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy5ncmlkVGVtcGxhdGVTZXJ2aWNlID0gZ3JpZFRlbXBsYXRlU2VydmljZTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBSZWdpc3RlckRvbUhhbmRsZXIoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRFbGVtZW50Lm9uKFwiY2hhbmdlXCIsIFwiLnNlbGVjdC1rZXktY2hlY2tib3hcIiAsIChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0galF1ZXJ5KGV2ZW50LnRhcmdldCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJvdyA9IGVsZW1lbnQuZGF0YShcInZhbHVlXCIpO1xyXG4gICAgICAgICAgICBjb25zdCBjaGVja2VkID0gZWxlbWVudC5pcyhcIjpjaGVja2VkXCIpO1xyXG4gICAgICAgICAgICBpZiAoY2hlY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5wYXJlbnRzKFwiLm1haW5Sb3dcIikuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LnBhcmVudHMoXCIubWFpblJvd1wiKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZXZlbnQub3JpZ2luYWxFdmVudCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLm9uU2VsZWN0KFtyb3ddLCBjaGVja2VkKTtcclxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRFbGVtZW50Lm9uKFwiY2hhbmdlXCIsIFwiLnNlbGVjdC1hbGwtY2hlY2tib3hcIiAsIChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0galF1ZXJ5KGV2ZW50LnRhcmdldCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrZWQgPSBlbGVtZW50LmlzKFwiOmNoZWNrZWRcIik7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5vblNlbGVjdCh0aGlzLmdyaWRUZW1wbGF0ZVNlcnZpY2UuRGF0YSwgY2hlY2tlZCk7XHJcbiAgICAgICAgICAgIHRoaXMucGFyZW50RWxlbWVudC5maW5kKFwiLnNlbGVjdC1rZXktY2hlY2tib3hcIikucHJvcChcImNoZWNrZWRcIiwgY2hlY2tlZCk7XHJcbiAgICAgICAgICAgIGlmIChjaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudEVsZW1lbnQuZmluZChcIi5tYWluVGFibGUgLm1haW5Sb3dcIikuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudEVsZW1lbnQuZmluZChcIi5tYWluVGFibGUgLm1haW5Sb3dcIikucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgb25SZXNpemUoKTogdm9pZCB7XHJcbiAgICAgICAgLy8gSWdub3JlXHJcbiAgICB9XHJcbiAgICBwdWJsaWMgb25Eb2N1bWVudENsaWNrKGV2ZW50OiBhbnkpOiB2b2lkIHtcclxuICAgICAgICAvLyBJZ25vcmVcclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvdHNsaW50LWxvYWRlcj8/cmVmLS0xIS4vc3JjL2pzL2V2ZW50SGFuZGxlcnMvU2VsZWN0RXZlbnRIYW5kbGVyLnRzIiwiaW1wb3J0IHsgQ29uZmlnU3RvcmUgfSBmcm9tIFwiLi4vY29uZmlnL0NvbmZpZ1N0b3JlXCI7XHJcbmltcG9ydCB7IElFdmVudEhhbmRsZXIgfSBmcm9tIFwiLi9JRXZlbnRIYW5kbGVyXCI7XHJcbmV4cG9ydCBjbGFzcyBEZXRhaWxzUm93SGFuZGxlcjxUPiBpbXBsZW1lbnRzIElFdmVudEhhbmRsZXI8VD4ge1xyXG4gICAgcHJpdmF0ZSBwYXJlbnRFbGVtZW50OiBKUXVlcnk7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjb25maWdTdG9yZTogQ29uZmlnU3RvcmU8VD4sIGVsZW1lbnQ6IEpRdWVyeSkge1xyXG4gICAgICAgIHRoaXMucGFyZW50RWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgb25SZXNpemUoKTogdm9pZCB7XHJcbiAgICAgICAgLy8gTm90aGluZyB0byBEby5cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb25Eb2N1bWVudENsaWNrKGV2ZW50KTogdm9pZCB7XHJcbiAgICAgICAgLy8gTm90aGluZyB0byBEby5cclxuICAgIH1cclxuICAgIHB1YmxpYyBSZWdpc3RlckRvbUhhbmRsZXIgPSAoKTogdm9pZCA9PiB7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRFbGVtZW50Lm9uKFwiY2xpY2tcIiwgXCIudGFibGUtYm9keSAuZXhwYW5zaW9uQXJyb3dzIGlcIiwgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFycm93ID0galF1ZXJ5KGV2ZW50LnRhcmdldCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRldGFpbHNSb3cgPSBhcnJvdy5jbG9zZXN0KFwidHJcIikubmV4dCgpO1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50SWNvbiA9IGFycm93LmhpZGUoKTtcclxuICAgICAgICAgICAgY29uc3Qgb3RoZXJJY29uID0gYXJyb3cuc2libGluZ3MoXCJpXCIpLnNob3coKTtcclxuICAgICAgICAgICAgaWYgKGFycm93Lmhhc0NsYXNzKFwiZXhwYW5kRGV0YWlsc1Jvd0ljb25cIikpIHtcclxuICAgICAgICAgICAgICAgIGRldGFpbHNSb3cuc2xpZGVEb3duKHRoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5hbmltYXRpb25UaW1lKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGRldGFpbHNSb3cuc2xpZGVVcCh0aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuYW5pbWF0aW9uVGltZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy9qcy9ldmVudEhhbmRsZXJzL0RldGFpbHNSb3dIYW5kbGVyLnRzIiwiaW1wb3J0IHsgQ29uZmlnU3RvcmUgfSBmcm9tIFwiLi4vY29uZmlnL0NvbmZpZ1N0b3JlXCI7XHJcbmltcG9ydCB7IElHcmlkT3B0aW9ucyB9IGZyb20gXCIuLi9tYWluL0lHcmlkT3B0aW9uc1wiO1xyXG5pbXBvcnQgeyBDb21tb25VdGlsIH0gZnJvbSBcIi4uL3V0aWwvQ29sdW1uVXRpbFwiO1xyXG5pbXBvcnQgeyBGaWx0ZXJBY3Rpb25UeXBlIH0gZnJvbSBcIi4vLi4vbW9kZWxzL0ZpbHRlckFjdGlvblR5cGVcIjtcclxuaW1wb3J0IHsgSUZpbHRlckNsaWNrRGVsZWdhdGUgfSBmcm9tIFwiLi8uLi9tb2RlbHMvSUZpbHRlckNsaWNrRGVsZWdhdGVcIjtcclxuaW1wb3J0IHsgSUV2ZW50SGFuZGxlciB9IGZyb20gXCIuL0lFdmVudEhhbmRsZXJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBGaWx0ZXJDbGlja0hhbmRsZXI8VD4gaW1wbGVtZW50cyBJRXZlbnRIYW5kbGVyPFQ+IHtcclxuICAgIHByaXZhdGUgY29uZmlnU3RvcmU6IENvbmZpZ1N0b3JlPFQ+O1xyXG4gICAgcHJpdmF0ZSBwYXJlbnRFbGVtZW50OiBKUXVlcnk7XHJcblxyXG4gICAgY29uc3RydWN0b3IoY29uZmlnU3RvcmU6IENvbmZpZ1N0b3JlPFQ+LCBlbGVtZW50OiBKUXVlcnkpIHtcclxuICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlID0gY29uZmlnU3RvcmU7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRFbGVtZW50ID0gZWxlbWVudDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBvblJlc2l6ZSgpOiB2b2lkIHtcclxuICAgICAgICAvLyBOb3RoaW5nIHRvIERvLlxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvbkRvY3VtZW50Q2xpY2soZXZlbnQpOiB2b2lkIHtcclxuICAgICAgICAvLyBOb3RoaW5nIHRvIERvLlxyXG4gICAgfVxyXG4gICAgcHVibGljIFJlZ2lzdGVyRG9tSGFuZGxlciA9ICgpOiB2b2lkID0+IHtcclxuICAgICAgICB0aGlzLnBhcmVudEVsZW1lbnQub24oXCJjbGlja1wiLCBcIi50YWJsZS1ib2R5IC5kZXRhaWxzUm93IC5kZXRhaWxzVGFibGUgdGQgaVwiLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGpRdWVyeShldmVudC50YXJnZXQpO1xyXG4gICAgICAgICAgICBjb25zdCBwYXJlbnRUZCA9IGVsZW1lbnQucGFyZW50cyhcInRkXCIpO1xyXG4gICAgICAgICAgICBjb25zdCBrZXkgPSBwYXJlbnRUZC5hdHRyKFwiZGF0YS1maWx0ZXIta2V5XCIpO1xyXG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHBhcmVudFRkLmF0dHIoXCJkYXRhLWZpbHRlci12YWx1ZVwiKTtcclxuICAgICAgICAgICAgY29uc3QgdHlwZSA9IHBhcmVudFRkLmF0dHIoXCJkYXRhLWZpbHRlci10eXBlXCIpO1xyXG4gICAgICAgICAgICBjb25zdCBjb2wgPSBDb21tb25VdGlsLkdldENvbHVtbk9iamVjdChrZXksIHRoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5jb2x1bW5zKTtcclxuICAgICAgICAgICAgaWYgKGNvbCA9PT0gdW5kZWZpbmVkIHx8IGNvbCA9PT0gbnVsbCB8fCAhY29sLmZpbHRlcmFibGUgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IGZpbHRlckFjdGlvbjogRmlsdGVyQWN0aW9uVHlwZSA9IEZpbHRlckFjdGlvblR5cGUuQWRkO1xyXG4gICAgICAgICAgICBpZiAoZWxlbWVudC5oYXNDbGFzcyhcInJlbW92ZUZpbHRlclwiKSkge1xyXG4gICAgICAgICAgICAgICAgZmlsdGVyQWN0aW9uID0gRmlsdGVyQWN0aW9uVHlwZS5NaW51cztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMub25DbGlja0ZpbHRlcihrZXksIHZhbHVlLCBmaWx0ZXJBY3Rpb24sIHR5cGUpO1xyXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvdHNsaW50LWxvYWRlcj8/cmVmLS0xIS4vc3JjL2pzL2V2ZW50SGFuZGxlcnMvRmlsdGVyQ2xpY2tIYW5kbGVyLnRzIiwiZXhwb3J0IGVudW0gRmlsdGVyQWN0aW9uVHlwZSB7XHJcbiAgICBBZGQgPSBcIkFkZFwiLFxyXG4gICAgTWludXMgPSBcIk1pbnVzXCIsXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy9qcy9tb2RlbHMvRmlsdGVyQWN0aW9uVHlwZS50cyIsImV4cG9ydCBlbnVtIEhhbmRsZXJOYW1lcyB7XHJcbiAgICBGaWx0ZXJBY3Rpb24sXHJcbiAgICBIZWFkZXJDbGljayxcclxuICAgIFNjcm9sbCxcclxuICAgIFBhZ2VTZWFyY2gsXHJcbiAgICBEZXRhaWxzUm93LFxyXG4gICAgVG9nZ2xlQ29sdW1uLFxyXG4gICAgQ29sU2V0dGluZ3MsXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy9qcy9ldmVudEhhbmRsZXJzL0hhbmRsZXJOYW1lcy50cyIsImltcG9ydCB7IENvbmZpZ1N0b3JlIH0gZnJvbSBcIi4uL2NvbmZpZy9Db25maWdTdG9yZVwiO1xyXG5pbXBvcnQgeyBJR3JpZE9wdGlvbnMgfSBmcm9tIFwiLi4vbWFpbi9JR3JpZE9wdGlvbnNcIjtcclxuaW1wb3J0IHsgQ29tbW9uVXRpbCB9IGZyb20gXCIuLi91dGlsL0NvbHVtblV0aWxcIjtcclxuaW1wb3J0IHsgR3JpZE9yZGVyRGlyZWN0aW9uIH0gZnJvbSBcIi4vLi4vbW9kZWxzL0dyaWRPcmRlckRpcmVjdGlvblwiO1xyXG5pbXBvcnQge0lIZWFkZXJDbGlja0RlbGVnYXRlfSBmcm9tIFwiLi8uLi9tb2RlbHMvSUhlYWRlckNsaWNrRGVsZWdhdGVcIjtcclxuaW1wb3J0IHsgSUV2ZW50SGFuZGxlciB9IGZyb20gXCIuL0lFdmVudEhhbmRsZXJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBIZWFkZXJDbGlja0hhbmRsZXI8VD4gaW1wbGVtZW50cyBJRXZlbnRIYW5kbGVyPFQ+IHtcclxuICAgIHByaXZhdGUgcGFyZW50RWxlbWVudDogSlF1ZXJ5O1xyXG4gICAgcHJpdmF0ZSBjb25maWdTdG9yZTogQ29uZmlnU3RvcmU8VD47XHJcblxyXG4gICAgY29uc3RydWN0b3IoY29uZmlnU3RvcmU6IENvbmZpZ1N0b3JlPFQ+LCBlbGVtZW50OiBKUXVlcnkpIHtcclxuICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlID0gY29uZmlnU3RvcmU7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRFbGVtZW50ID0gZWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb25SZXNpemUoKTogdm9pZCB7XHJcbiAgICAgICAgLy8gTm90aGluZyB0byBEby5cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb25Eb2N1bWVudENsaWNrKGV2ZW50KTogdm9pZCB7XHJcbiAgICAgICAgLy8gTm90aGluZyB0byBEby5cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgUmVnaXN0ZXJEb21IYW5kbGVyID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgICAgIC8vIFJlZ2lzdGVyaW5nIEpRdWVyeSBFdmVudCBIYW5kbGVyIGlmIEhlYWRlciBpcyBDbGlja2VkLlxyXG4gICAgICAgIHRoaXMucGFyZW50RWxlbWVudC5vbihcImNsaWNrXCIsIFwiLnRhYmxlLWhlYWRlciB0aFwiLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGpRdWVyeShldmVudC50YXJnZXQpLmNsb3Nlc3QoXCJ0aFwiKTtcclxuICAgICAgICAgICAgY29uc3QgaGVhZGVySWQgPSBlbGVtZW50LmF0dHIoXCJkYXRhLWhlYWRlci1pZFwiKTtcclxuICAgICAgICAgICAgY29uc3QgY29sID0gQ29tbW9uVXRpbC5HZXRDb2x1bW5PYmplY3QoaGVhZGVySWQsIHRoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5jb2x1bW5zKTtcclxuICAgICAgICAgICAgaWYgKGNvbCA9PT0gdW5kZWZpbmVkIHx8IGNvbCA9PT0gbnVsbCB8fCAhY29sLnNvcnRhYmxlICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGFycm93SWNvbnMgPSBlbGVtZW50LmZpbmQoXCJpXCIpO1xyXG4gICAgICAgICAgICBjb25zdCB1cEFycm93SWNvbiA9IGFycm93SWNvbnMuZmlyc3QoKTtcclxuICAgICAgICAgICAgY29uc3QgZG93bkFycm93SWNvbiA9IGFycm93SWNvbnMubGFzdCgpO1xyXG4gICAgICAgICAgICBsZXQgZGlyZWN0aW9uOiBHcmlkT3JkZXJEaXJlY3Rpb247XHJcbiAgICAgICAgICAgIGlmIChhcnJvd0ljb25zLmlzKFwiOnZpc2libGVcIikpIHtcclxuICAgICAgICAgICAgICAgIGlmICh1cEFycm93SWNvbi5pcyhcIjp2aXNpYmxlXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uID0gR3JpZE9yZGVyRGlyZWN0aW9uLkRlc2M7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBBcnJvd0ljb24uaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRvd25BcnJvd0ljb24uc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb24gPSBHcmlkT3JkZXJEaXJlY3Rpb24uQXNjO1xyXG4gICAgICAgICAgICAgICAgICAgIGRvd25BcnJvd0ljb24uaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHVwQXJyb3dJY29uLnNob3coKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbiA9IEdyaWRPcmRlckRpcmVjdGlvbi5Bc2M7XHJcbiAgICAgICAgICAgICAgICB1cEFycm93SWNvbi5zaG93KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgQ29tbW9uVXRpbC5TZXRPcmRlcihoZWFkZXJJZCwgZGlyZWN0aW9uLCB0aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuY29sdW1ucyk7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5vbkNsaWNrSGVhZGVyKGhlYWRlcklkLCBkaXJlY3Rpb24pO1xyXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvdHNsaW50LWxvYWRlcj8/cmVmLS0xIS4vc3JjL2pzL2V2ZW50SGFuZGxlcnMvSGVhZGVyQ2xpY2tIYW5kbGVyLnRzIiwiaW1wb3J0ICogYXMgalF1ZXJ5IGZyb20gXCJqcXVlcnlcIjtcclxuaW1wb3J0IHsgQ29uZmlnU3RvcmUgfSBmcm9tIFwiLi4vY29uZmlnL0NvbmZpZ1N0b3JlXCI7XHJcbmltcG9ydCB7IFBhZ2VyIH0gZnJvbSBcIi4uL3BhZ2luYXRpb24vUGFnZXJcIjtcclxuaW1wb3J0IHsgSVBhZ2VTZWFyY2hDbGlja0RlbGVnYXRlIH0gZnJvbSBcIi4vLi4vbW9kZWxzL0lQYWdlU2VhcmNoQ2xpY2tEZWxlZ2F0ZVwiO1xyXG5pbXBvcnQgeyBJUGFnaW5hdGlvbiB9IGZyb20gXCIuLy4uL21vZGVscy9JUGFnaW5hdGlvblwiO1xyXG5pbXBvcnQgeyBJRXZlbnRIYW5kbGVyIH0gZnJvbSBcIi4vSUV2ZW50SGFuZGxlclwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBhZ2VTZWFyY2hIYW5kbGVyPFQ+IGltcGxlbWVudHMgSUV2ZW50SGFuZGxlcjxUPiB7XHJcbiAgICBwcml2YXRlIGNvbmZpZ1N0b3JlOiBDb25maWdTdG9yZTxUPjtcclxuICAgIHByaXZhdGUgcGFyZW50RWxlbWVudDogSlF1ZXJ5O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZ1N0b3JlOiBDb25maWdTdG9yZTxUPiwgZWxlbWVudDogSlF1ZXJ5KSB7XHJcbiAgICAgICAgdGhpcy5jb25maWdTdG9yZSA9IGNvbmZpZ1N0b3JlO1xyXG4gICAgICAgIHRoaXMucGFyZW50RWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgb25SZXNpemUoKTogdm9pZCB7XHJcbiAgICAgICAgLy8gdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9uRG9jdW1lbnRDbGljaygpOiB2b2lkIHtcclxuICAgICAgICAvLyB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBSZWdpc3RlckRvbUhhbmRsZXIgPSAoKTogdm9pZCA9PiB7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRFbGVtZW50Lm9uKFwiY2xpY2tcIiwgXCIudGFibGUtZm9vdGVyIC5maXJzdExpbmtcIiwgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnU3RvcmUub3B0aW9ucy5vblBhZ2VTZWFyY2goUGFnZXIuUGFnaW5hdGlvbkRhdGEucGFnZVNpemUsIDEpO1xyXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnBhcmVudEVsZW1lbnQub24oXCJjbGlja1wiLCBcIi50YWJsZS1mb290ZXIgLm5leHRMaW5rXCIsIChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlLm9wdGlvbnMub25QYWdlU2VhcmNoKFBhZ2VyLlBhZ2luYXRpb25EYXRhLnBhZ2VTaXplLCBQYWdlci5QYWdpbmF0aW9uRGF0YS5wYWdlSW5kZXggKyAxKTtcclxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRFbGVtZW50Lm9uKFwiY2xpY2tcIiwgXCIudGFibGUtZm9vdGVyIC5wcmV2TGlua1wiLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jb25maWdTdG9yZS5vcHRpb25zLm9uUGFnZVNlYXJjaChQYWdlci5QYWdpbmF0aW9uRGF0YS5wYWdlU2l6ZSwgUGFnZXIuUGFnaW5hdGlvbkRhdGEucGFnZUluZGV4IC0gMSk7XHJcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMucGFyZW50RWxlbWVudC5vbihcImNsaWNrXCIsIFwiLnRhYmxlLWZvb3RlciAubGFzdExpbmtcIiwgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnU3RvcmUub3B0aW9ucy5vblBhZ2VTZWFyY2goUGFnZXIuUGFnaW5hdGlvbkRhdGEucGFnZVNpemUsIFBhZ2VyLlBhZ2luYXRpb25EYXRhLm5vT2ZQYWdlcyk7XHJcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMucGFyZW50RWxlbWVudC5vbihcImNoYW5nZVwiLCBcIi50YWJsZS1mb290ZXIgLnBhZ2VTaXplU2VsZWN0b3JcIiwgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbDogbnVtYmVyID0gK2pRdWVyeShldmVudC50YXJnZXQpLnZhbCgpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnU3RvcmUub3B0aW9ucy5vblBhZ2VTZWFyY2godmFsLCBQYWdlci5QYWdpbmF0aW9uRGF0YS5wYWdlSW5kZXgpO1xyXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnBhcmVudEVsZW1lbnQub24oXCJrZXlwcmVzc1wiLCBcIi50YWJsZS1mb290ZXIgLnBhZ2VyLWlucHV0XCIsIChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBpcCA9IGpRdWVyeShldmVudC50YXJnZXQpO1xyXG4gICAgICAgICAgICBjb25zdCBwYWdlRGF0YSA9IFBhZ2VyLlBhZ2luYXRpb25EYXRhO1xyXG4gICAgICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gMTMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbDogbnVtYmVyID0gK2lwLnZhbCgpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNOYU4odmFsKSB8fCB2YWwgPiBwYWdlRGF0YS5ub09mUGFnZXMgfHwgdmFsIDwgMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlwLnZhbChwYWdlRGF0YS5wYWdlSW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlLm9wdGlvbnMub25QYWdlU2VhcmNoKHBhZ2VEYXRhLnBhZ2VTaXplLCB2YWwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy90c2xpbnQtbG9hZGVyPz9yZWYtLTEhLi9zcmMvanMvZXZlbnRIYW5kbGVycy9QYWdlU2VhcmNoQ2xpY2tIYW5kbGVyLnRzIiwiaW1wb3J0IHsgQ29uZmlnU3RvcmUgfSBmcm9tIFwiLi4vY29uZmlnL0NvbmZpZ1N0b3JlXCI7XHJcbmltcG9ydCB7IEdyaWRUZW1wbGF0ZVNlcnZpY2UgfSBmcm9tIFwiLi8uLi9zZXJ2aWNlcy9HcmlkVGVtcGxhdGVTZXJ2aWNlXCI7XHJcbmltcG9ydCB7IElJbmRleENvdW50ZXIgfSBmcm9tIFwiLi8uLi92aXJ0dWFsaXphdGlvbi9JbmRleENvdW50ZXJcIjtcclxuaW1wb3J0IHsgU2Nyb2xsRGlyZWN0aW9uIH0gZnJvbSBcIi4vLi4vdmlydHVhbGl6YXRpb24vU2Nyb2xsRGlyZWN0aW9uXCI7XHJcbmltcG9ydCB7IFZpcnR1YWxpemVyIH0gZnJvbSBcIi4vLi4vdmlydHVhbGl6YXRpb24vVmlydHVhbGl6ZXJcIjtcclxuaW1wb3J0IHsgSUV2ZW50SGFuZGxlciB9IGZyb20gXCIuL0lFdmVudEhhbmRsZXJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBTY3JvbGxIYW5kbGVyPFQ+IGltcGxlbWVudHMgSUV2ZW50SGFuZGxlcjxUPiB7XHJcbiAgICBwcml2YXRlIHZpcnR1YWxpemVyOiBWaXJ0dWFsaXplcjtcclxuICAgIHByaXZhdGUgcGFyZW50RWxlbWVudDogSlF1ZXJ5O1xyXG4gICAgcHJpdmF0ZSBncmlkVGVtcGxhdGVTZXJ2aWNlOiBHcmlkVGVtcGxhdGVTZXJ2aWNlPFQ+O1xyXG4gICAgcHJpdmF0ZSByZW5kZXJpbmc6IGJvb2xlYW4gPSAgZmFsc2U7XHJcbiAgICBwcml2YXRlIGNvbmZpZ1N0b3JlOiBDb25maWdTdG9yZTxUPjtcclxuICAgIHByaXZhdGUgbGVmdE9mZnNldDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBwYXJlbnRPZmZTZXRMZWZ0OiBudW1iZXI7XHJcbiAgICBwcml2YXRlIGN1cnJlbnRJbmRleDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSB3YXRjaGVzOiBhbnlbXSA9IFtdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZ1N0b3JlOiBDb25maWdTdG9yZTxUPiwgZ3JpZFRlbXBsYXRlU2VydmljZTogR3JpZFRlbXBsYXRlU2VydmljZTxUPiwgY3VycmVudEluZGV4OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlID0gY29uZmlnU3RvcmU7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRFbGVtZW50ID0galF1ZXJ5KHRoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5jb250YWluZXJFbGVtZW50KTtcclxuICAgICAgICB0aGlzLmdyaWRUZW1wbGF0ZVNlcnZpY2UgPSBncmlkVGVtcGxhdGVTZXJ2aWNlO1xyXG4gICAgICAgIHRoaXMuY3VycmVudEluZGV4ID0gY3VycmVudEluZGV4O1xyXG4gICAgfVxyXG4gICAgcHVibGljIG9uUmVzaXplKCk6IHZvaWQge1xyXG4gICAgICAgIC8vXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9uRG9jdW1lbnRDbGljayhldmVudCk6IHZvaWQge1xyXG4gICAgICAgIC8vIE5vIE9wXHJcbiAgICB9XHJcbiAgICBwdWJsaWMgUmVnaXN0ZXJEb21IYW5kbGVyID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgICAgIC8vIFJlZ2lzdGVyaW5nIEpRdWVyeSBFdmVudCBIYW5kbGVyIGlmIEhlYWRlciBpcyBDbGlja2VkLlxyXG4gICAgICAgIHRoaXMucGFyZW50RWxlbWVudC5maW5kKFwiLnRhYmxlLWJvZHlcIikub24oXCJzY3JvbGxcIiwgdGhpcy5oYW5kbGVSZXNpemUpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHJlbW92ZUhhbmRsZXIgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRFbGVtZW50LmZpbmQoXCIudGFibGUtYm9keVwiKS5vZmYoXCJzY3JvbGxcIiwgdGhpcy5oYW5kbGVSZXNpemUpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHJlc2V0UGFyZW50T2Zmc2V0ID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMucGFyZW50T2ZmU2V0TGVmdCA9IHRoaXMucGFyZW50RWxlbWVudC5vZmZzZXQoKS5sZWZ0O1xyXG4gICAgICAgIHRoaXMubGVmdE9mZnNldCA9IHRoaXMucGFyZW50RWxlbWVudC5maW5kKFwiLnRhYmxlLWhlYWRlclwiKS5vZmZzZXQoKS5sZWZ0O1xyXG4gICAgfVxyXG4gICAgcHVibGljIHdhdGNoV2lkdGggPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRPZmZTZXRMZWZ0ID0gdGhpcy5wYXJlbnRFbGVtZW50Lm9mZnNldCgpLmxlZnQ7XHJcbiAgICAgICAgdGhpcy53YXRjaGVzLnB1c2goc2V0SW50ZXJ2YWwodGhpcy5zZXRIZWFkZXJPZmZzZXQsIDMwMCkpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHVuV2F0Y2hXaWR0aCA9ICgpID0+IHtcclxuICAgICAgICBpZiAodGhpcy53YXRjaGVzID09PSB1bmRlZmluZWQgfHwgdGhpcy53YXRjaGVzID09PSBudWxsICkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAoY29uc3Qgd2F0Y2ggb2YgdGhpcy53YXRjaGVzKSB7XHJcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwod2F0Y2gpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHByaXZhdGUgaGFuZGxlUmVzaXplID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgY29uc3QgdEJvZHlPYmogPSB0aGlzLnBhcmVudEVsZW1lbnQuZmluZChcIi50YWJsZS1ib2R5XCIpO1xyXG4gICAgICAgIGlmICh0aGlzLmxlZnRPZmZzZXQgPT09IHVuZGVmaW5lZCB8fCB0aGlzLmxlZnRPZmZzZXQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5sZWZ0T2Zmc2V0ID0gdGhpcy5wYXJlbnRFbGVtZW50LmZpbmQoXCIudGFibGUtaGVhZGVyXCIpLm9mZnNldCgpLmxlZnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucGFyZW50RWxlbWVudC5maW5kKFwiLnRhYmxlLWhlYWRlclwiKS5vZmZzZXQoXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxlZnQ6IHRoaXMubGVmdE9mZnNldCArIC0xICogdEJvZHlPYmouc2Nyb2xsTGVmdCgpLFxyXG4gICAgICAgICAgICAgICAgdG9wOiAwLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgY29uc3QgYWN0dWFsVGFibGVIZWlnaHQgPSB0Qm9keU9iai5maW5kKFwiLm1haW5UYWJsZVwiKS5oZWlnaHQoKTtcclxuICAgICAgICBjb25zdCBzY3JvbGxDb250YWluZXJIZWlnaHQgPSB0Qm9keU9iai5oZWlnaHQoKTtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGlmICh0aGlzLnJlbmRlcmluZykge1xyXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBzY3JvbGxUb3AgPSB0Qm9keU9iai5zY3JvbGxUb3AoKTtcclxuICAgICAgICBpZiAoKHNjcm9sbENvbnRhaW5lckhlaWdodCArIHNjcm9sbFRvcCApIC0gKGFjdHVhbFRhYmxlSGVpZ2h0ICogMC44ICkgPiAwICkge1xyXG4gICAgICAgICAgICBpZiAoIHRoaXMuY3VycmVudEluZGV4ID49IHRoaXMuZ3JpZFRlbXBsYXRlU2VydmljZS5EYXRhTGVuZ3RoICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgbGV0IGxhc3RJbmRleCA9IHRoaXMuY3VycmVudEluZGV4ICsgdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmNodW5rU2l6ZTtcclxuICAgICAgICAgICAgaWYgKCBsYXN0SW5kZXggPj0gdGhpcy5ncmlkVGVtcGxhdGVTZXJ2aWNlLkRhdGFMZW5ndGggKSB7XHJcbiAgICAgICAgICAgICAgICBsYXN0SW5kZXggPSB0aGlzLmdyaWRUZW1wbGF0ZVNlcnZpY2UuRGF0YUxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgaHRtbCAgPSBqUXVlcnkodGhpcy5ncmlkVGVtcGxhdGVTZXJ2aWNlLmdldFRlbXBsYXRlKHRoaXMuY3VycmVudEluZGV4LCBsYXN0SW5kZXgpKTtcclxuICAgICAgICAgICAgdEJvZHlPYmouZmluZChcIi5tYWluVGFibGVCb2R5XCIpLmFwcGVuZChodG1sKTtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50SW5kZXggPSBsYXN0SW5kZXggKyAxO1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmluZyA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldEhlYWRlck9mZnNldCA9ICgpID0+IHtcclxuICAgICAgICBjb25zdCBsZWZ0ID0gdGhpcy5wYXJlbnRFbGVtZW50Lm9mZnNldCgpLmxlZnQ7XHJcbiAgICAgICAgaWYgKCB0aGlzLnBhcmVudE9mZlNldExlZnQgIT09IGxlZnQgKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRCb2R5T2JqID0gdGhpcy5wYXJlbnRFbGVtZW50LmZpbmQoXCIudGFibGUtYm9keVwiKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMubGVmdE9mZnNldCA9PT0gdW5kZWZpbmVkIHx8IHRoaXMubGVmdE9mZnNldCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sZWZ0T2Zmc2V0ID0gdGhpcy5wYXJlbnRFbGVtZW50LmZpbmQoXCIudGFibGUtaGVhZGVyXCIpLm9mZnNldCgpLmxlZnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5sZWZ0T2Zmc2V0ID0gdGhpcy5sZWZ0T2Zmc2V0IC0gKHRoaXMucGFyZW50T2ZmU2V0TGVmdCAtIGxlZnQpO1xyXG4gICAgICAgICAgICB0aGlzLnBhcmVudEVsZW1lbnRcclxuICAgICAgICAgICAgICAgIC5maW5kKFwiLnRhYmxlLWhlYWRlclwiKVxyXG4gICAgICAgICAgICAgICAgLm9mZnNldCh7bGVmdDogdGhpcy5sZWZ0T2Zmc2V0LCB0b3A6IDB9KTtcclxuICAgICAgICAgICAgdGhpcy5wYXJlbnRPZmZTZXRMZWZ0ID0gbGVmdDtcclxuICAgICAgICAgICAgdEJvZHlPYmouc2Nyb2xsTGVmdCh0Qm9keU9iai5zY3JvbGxMZWZ0KCkgLSAxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy9qcy9ldmVudEhhbmRsZXJzL1Njcm9sbEhhbmRsZXIudHMiLCJpbXBvcnQgeyBDb25maWdTdG9yZSB9IGZyb20gXCIuLi9jb25maWcvQ29uZmlnU3RvcmVcIjtcclxuaW1wb3J0IHsgSUNvbHVtbiB9IGZyb20gXCIuLy4uL21vZGVscy9JQ29sdW1uXCI7XHJcbmltcG9ydCB7IENvbW1vblV0aWwgfSBmcm9tIFwiLi8uLi91dGlsL0NvbHVtblV0aWxcIjtcclxuXHJcbmVudW0gU2hvd0hpZGUge1xyXG4gICAgU2hvdyxcclxuICAgIEhpZGUsXHJcbiAgICBTaG93QWxsLFxyXG4gICAgSGlkZUFsbCxcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFRvZ2dsZUNvbHVtbkhhbmRsZXI8VD4ge1xyXG4gICAgcHJpdmF0ZSBjb25maWdTdG9yZTogQ29uZmlnU3RvcmU8VD47XHJcbiAgICBwcml2YXRlIHBhcmVudEVsZW1lbnQ6IEpRdWVyeTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWdTdG9yZTogQ29uZmlnU3RvcmU8VD4sIGVsZW1lbnQ6IEpRdWVyeSkge1xyXG4gICAgICAgIHRoaXMuY29uZmlnU3RvcmUgPSBjb25maWdTdG9yZTtcclxuICAgICAgICB0aGlzLnBhcmVudEVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzaG93QWxsQ29sdW1ucyA9ICgpOiB2b2lkID0+IHtcclxuICAgICAgICB0aGlzLlNldENvbFdpZHRoKFwiLnRhYmxlLWhlYWRlciAuaGVhZGVyQ29sR3JvdXAgY29sXCIsIFNob3dIaWRlLlNob3dBbGwpO1xyXG4gICAgICAgIHRoaXMuU2V0Q29sV2lkdGgoXCIudGFibGUtYm9keSAuYm9keUNvbEdyb3VwIGNvbFwiLCBTaG93SGlkZS5TaG93QWxsKTtcclxuICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlLlNldEhpZGRlbk9uQ29uZmlnKGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2hvd0NvbHVtbiA9IChjb2x1bW5JZDogc3RyaW5nKTogdm9pZCA9PiB7XHJcbiAgICAgICAgdGhpcy5TZXRDb2xXaWR0aChcIi50YWJsZS1oZWFkZXIgLmhlYWRlckNvbEdyb3VwIGNvbFwiLCBTaG93SGlkZS5TaG93LCBjb2x1bW5JZCk7XHJcbiAgICAgICAgdGhpcy5TZXRDb2xXaWR0aChcIi50YWJsZS1ib2R5IC5ib2R5Q29sR3JvdXAgY29sXCIsIFNob3dIaWRlLlNob3csIGNvbHVtbklkKTtcclxuICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlLlNldEhpZGRlbk9uQ29uZmlnKGZhbHNlLCBjb2x1bW5JZCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGhpZGVDb2x1bW4gPSAoY29sdW1uSWQ6IHN0cmluZyk6IHZvaWQgPT4ge1xyXG4gICAgICAgIHRoaXMuU2V0Q29sV2lkdGgoXCIudGFibGUtaGVhZGVyIC5oZWFkZXJDb2xHcm91cCBjb2xcIiwgU2hvd0hpZGUuSGlkZSwgY29sdW1uSWQpO1xyXG4gICAgICAgIHRoaXMuU2V0Q29sV2lkdGgoXCIudGFibGUtYm9keSAuYm9keUNvbEdyb3VwIGNvbFwiLCBTaG93SGlkZS5IaWRlICwgY29sdW1uSWQpO1xyXG4gICAgICAgIHRoaXMuY29uZmlnU3RvcmUuU2V0SGlkZGVuT25Db25maWcodHJ1ZSwgY29sdW1uSWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBoaWRlQWxsQ29sdW1ucyA9ICgpOiB2b2lkID0+IHtcclxuICAgICAgICB0aGlzLlNldENvbFdpZHRoKFwiLnRhYmxlLWhlYWRlciAuaGVhZGVyQ29sR3JvdXAgY29sXCIsIFNob3dIaWRlLkhpZGVBbGwpO1xyXG4gICAgICAgIHRoaXMuU2V0Q29sV2lkdGgoXCIudGFibGUtYm9keSAuYm9keUNvbEdyb3VwIGNvbFwiLCBTaG93SGlkZS5IaWRlQWxsKTtcclxuICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlLlNldEhpZGRlbk9uQ29uZmlnKHRydWUpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGFwcGx5Q29sdW1uQ29uZmlnID0gKGNvbHVtbnM6IElDb2x1bW5bXSkgPT4ge1xyXG4gICAgICAgIGZvciAoY29uc3QgY29sdW1uIG9mIGNvbHVtbnMpIHtcclxuICAgICAgICAgICAgaWYgKGNvbHVtbi5oaWRkZW4pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaGlkZUNvbHVtbihjb2x1bW4uaWQpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaG93Q29sdW1uKGNvbHVtbi5pZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIFNldENvbFdpZHRoID0gKHNlbGVjdG9yOiBzdHJpbmcsIGNvbnRyb2w6IFNob3dIaWRlLCBjb2x1bW5JZD86IHN0cmluZyk6IHZvaWQgPT4ge1xyXG4gICAgICAgIHRoaXMucGFyZW50RWxlbWVudC5maW5kKHNlbGVjdG9yKS5lYWNoKChpbmRleCwgZWxlbWVudCk6IHZvaWQgfCBmYWxzZSA9PiB7XHJcbiAgICAgICAgICAgIGxldCB3aWR0aCA9IDA7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRDb2xFbGVtID0galF1ZXJ5KGVsZW1lbnQpO1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50Q29sID0gY3VycmVudENvbEVsZW0uYXR0cihcImRhdGEtaGVhZGVyLWlkXCIpO1xyXG4gICAgICAgICAgICBpZiAoY3VycmVudENvbCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY29sOiBJQ29sdW1uO1xyXG4gICAgICAgICAgICAgICAgaWYgKFtTaG93SGlkZS5TaG93LCBTaG93SGlkZS5IaWRlXS5pbmRleE9mKGNvbnRyb2wpID4gLTEgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRDb2wgPT09IGNvbHVtbklkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250cm9sID09PSBTaG93SGlkZS5TaG93KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2wgPSBDb21tb25VdGlsLkdldENvbHVtbk9iamVjdChjdXJyZW50Q29sLCB0aGlzLmNvbmZpZ1N0b3JlLm9wdGlvbnMuY29sdW1ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IGNvbC53aWR0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Q29sRWxlbS53aWR0aCggd2lkdGggKyBcInB4XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKFtTaG93SGlkZS5TaG93QWxsLCBTaG93SGlkZS5IaWRlQWxsXS5pbmRleE9mKGNvbnRyb2wpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJvbCA9PT0gU2hvd0hpZGUuU2hvd0FsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2wgPSBDb21tb25VdGlsLkdldENvbHVtbk9iamVjdChjdXJyZW50Q29sLCB0aGlzLmNvbmZpZ1N0b3JlLm9wdGlvbnMuY29sdW1ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoID0gY29sLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50Q29sRWxlbS53aWR0aCggd2lkdGggKyBcInB4XCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy9qcy9ldmVudEhhbmRsZXJzL1RvZ2dsZUNvbHVtbkhhbmRsZXIudHMiLCJpbXBvcnQgKiBhcyBIYW5kbGViYXJzIGZyb20gXCJoYW5kbGViYXJzXCI7XHJcbmltcG9ydCAqIGFzIEdyaWREZXRhaWxzUm93VGVtcGxhdGUgZnJvbSBcIi4uLy4uL2hicy9ncmlkLWRldGFpbHMtcm93Lmhic1wiO1xyXG5pbXBvcnQgKiBhcyBHcmlkRm9vdGVyIGZyb20gXCIuLi8uLi9oYnMvZ3JpZC1mb290ZXIuaGJzXCI7XHJcbmltcG9ydCAqIGFzIEdyaWRNYWluUm93VGVtcGxhdGUgZnJvbSBcIi4uLy4uL2hicy9ncmlkLW1haW4tcm93Lmhic1wiO1xyXG5pbXBvcnQgKiBhcyBNYW5hZ2VDb2x1bW5UZW1wbGF0ZSBmcm9tIFwiLi4vLi4vaGJzL2dyaWQtbWFuYWdlLWNvbHVtbnMuaGJzXCI7XHJcbmltcG9ydCAqIGFzIEdyaWRUZW1wbGF0ZSBmcm9tIFwiLi4vLi4vaGJzL2dyaWQuaGJzXCI7XHJcbmltcG9ydCB7IENvbmZpZ1N0b3JlIH0gZnJvbSBcIi4uL2NvbmZpZy9Db25maWdTdG9yZVwiO1xyXG5pbXBvcnQgeyBJUGFnaW5hdGlvbiB9IGZyb20gXCIuLi9tb2RlbHMvSVBhZ2luYXRpb25cIjtcclxuaW1wb3J0IHsgUGFnZXIgfSBmcm9tIFwiLi4vcGFnaW5hdGlvbi9QYWdlclwiO1xyXG5pbXBvcnQgeyBJQ29sdW1uIH0gZnJvbSBcIi4vLi4vbW9kZWxzL0lDb2x1bW5cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBHcmlkVGVtcGxhdGVTZXJ2aWNlIDxUPiB7XHJcbiAgICBwcml2YXRlIGRhdGE6IFRbXTtcclxuICAgIHByaXZhdGUgY29uZmlnU3RvcmU6IENvbmZpZ1N0b3JlPFQ+O1xyXG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZUZ1bmN0aW9uRm9yR3JpZDogYW55O1xyXG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZUZ1bmN0aW9uRm9yTWFpblJvdzogYW55O1xyXG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZUZ1bmN0aW9uRm9yRGV0YWlsc1JvdzogYW55O1xyXG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZUZ1bmN0aW9uRm9yRm9vdGVyOiBhbnk7XHJcbiAgICBwcml2YXRlIHRlbXBsYXRlRnVuY3Rpb25Gb3JNYW5hZ2VDb2w6IGFueTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWdTdG9yZTogQ29uZmlnU3RvcmU8VD4pIHtcclxuICAgICAgICB0aGlzLmNvbmZpZ1N0b3JlID0gY29uZmlnU3RvcmU7XHJcbiAgICAgICAgdGhpcy50ZW1wbGF0ZUZ1bmN0aW9uRm9yR3JpZCA9IEdyaWRUZW1wbGF0ZTtcclxuICAgICAgICB0aGlzLnRlbXBsYXRlRnVuY3Rpb25Gb3JNYWluUm93ID0gR3JpZE1haW5Sb3dUZW1wbGF0ZTtcclxuICAgICAgICB0aGlzLnRlbXBsYXRlRnVuY3Rpb25Gb3JEZXRhaWxzUm93ID0gR3JpZERldGFpbHNSb3dUZW1wbGF0ZTtcclxuICAgICAgICB0aGlzLnRlbXBsYXRlRnVuY3Rpb25Gb3JGb290ZXIgPSBHcmlkRm9vdGVyO1xyXG4gICAgICAgIHRoaXMudGVtcGxhdGVGdW5jdGlvbkZvck1hbmFnZUNvbCA9IE1hbmFnZUNvbHVtblRlbXBsYXRlO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGdldCBEYXRhKCk6IFRbXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBnZXQgRGF0YUxlbmd0aCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEubGVuZ3RoO1xyXG4gICAgfVxyXG4gICAgcHVibGljIEdldEZpcnN0VGVtcGxhdGUgPSAoZGF0YTogVFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RJbmRleDogbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEluZGV4OiBudW1iZXIpOiBzdHJpbmcgPT4ge1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgY29uc3QgbWFpblJvd0FycmF5ID0gdGhpcy5HZXRSb3dzSHRtbChmaXJzdEluZGV4LCBsYXN0SW5kZXgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRlbXBsYXRlRnVuY3Rpb25Gb3JHcmlkKHtcclxuICAgICAgICAgICAgY29sdW1uczogdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmNvbHVtbnMsXHJcbiAgICAgICAgICAgIG1haW5Sb3dBcnJheSxcclxuICAgICAgICAgICAgcGFnaW5hdGlvbkRhdGE6IFBhZ2VyLlBhZ2luYXRpb25EYXRhLFxyXG4gICAgICAgICAgICBjYXB0aW9uOiB0aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuY2FwdGlvbixcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBnZXRUZW1wbGF0ZSA9IChmaXJzdEluZGV4OiBudW1iZXIsIGxhc3RJbmRleDogbnVtYmVyKTogc3RyaW5nID0+IHtcclxuICAgICAgICBjb25zdCBtYWluUm93QXJyYXkgPSB0aGlzLkdldFJvd3NIdG1sKGZpcnN0SW5kZXgsIGxhc3RJbmRleCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudGVtcGxhdGVGdW5jdGlvbkZvck1haW5Sb3coe1xyXG4gICAgICAgICAgICBjb2x1bW5zOiB0aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuY29sdW1ucyxcclxuICAgICAgICAgICAgbWFpblJvd0FycmF5LFxyXG4gICAgICAgICAgICBjYXB0aW9uOiB0aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuY2FwdGlvbixcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBHZXRNYW5hZ2VDb2x1bW5zSHRtbCA9ICgpOiBzdHJpbmcgPT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRlbXBsYXRlRnVuY3Rpb25Gb3JNYW5hZ2VDb2woe2NvbHVtbnM6IHRoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5jb2x1bW5zfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIEdldFJvd3NIdG1sID0gKGZpcnN0SW5kZXg6IG51bWJlciwgbGFzdEluZGV4OiBudW1iZXIpOiBhbnlbXSA9PiB7XHJcbiAgICAgICAgY29uc3QgbWFpblJvd0FycmF5OiBhbnlbXSA9IFtdO1xyXG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IHRoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5jb2x1bW5zLmxlbmd0aCArIDE7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IGZpcnN0SW5kZXg7IGkgPD0gbGFzdEluZGV4OyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3Qgcm93OiBUID0gdGhpcy5kYXRhW2ldO1xyXG4gICAgICAgICAgICBjb25zdCBtYWluUm93Q29sQXJyYXk6IGFueVtdID0gW107XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgY29sIG9mIHRoaXMuY29uZmlnU3RvcmUuT3B0aW9ucy5jb2x1bW5zKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY29sdW1uVmFsdWUgPSByb3dbY29sLmlkXTtcclxuICAgICAgICAgICAgICAgIGlmIChjb2wucmVuZGVySHlicmlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uVmFsdWUgPSB0aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMuaHlicmlkRnVuY3Rpb24oY29sLCByb3cpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbWFpblJvd0NvbEFycmF5LnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtblZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IGNvbC50eXBlLFxyXG4gICAgICAgICAgICAgICAgICAgIGhpZGRlbjogY29sLmhpZGRlbixcclxuICAgICAgICAgICAgICAgICAgICBhY3R1YWxWYWx1ZTogcm93W2NvbC5pZF0sXHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uTmFtZTogY29sLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGNvbC5pZCxcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJhYmxlOiBjb2wuZmlsdGVyYWJsZSxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG1haW5Sb3dBcnJheS5wdXNoKHtcclxuICAgICAgICAgICAgICAgIHJvd0RhdGE6IEpTT04uc3RyaW5naWZ5KHJvdyksXHJcbiAgICAgICAgICAgICAgICBrZXlDb2x1bW46IHJvd1t0aGlzLmNvbmZpZ1N0b3JlLk9wdGlvbnMua2V5Q29sdW1uXSxcclxuICAgICAgICAgICAgICAgIG1haW5Sb3dDb2xBcnJheSxcclxuICAgICAgICAgICAgICAgIGxlbmd0aDogdGhpcy5jb25maWdTdG9yZS5PcHRpb25zLmNvbHVtbnMubGVuZ3RoLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1haW5Sb3dBcnJheTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvdHNsaW50LWxvYWRlcj8/cmVmLS0xIS4vc3JjL2pzL3NlcnZpY2VzL0dyaWRUZW1wbGF0ZVNlcnZpY2UudHMiLCJjb25zdCBzZWxlY3RlZCA9IChpbnB1dDogbnVtYmVyLCB2YWx1ZTogbnVtYmVyKTogc3RyaW5nID0+IHtcclxuICAgIHJldHVybiBpbnB1dCA9PT0gdmFsdWUgPyBcInNlbGVjdGVkXCIgOiBcIlwiO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgc2VsZWN0ZWQ7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy90c2xpbnQtbG9hZGVyPz9yZWYtLTEhLi9zcmMvaGJzL2hlbHBlcnMvU2VsZWN0ZWQudHMiLCJ2YXIgSGFuZGxlYmFycyA9IHJlcXVpcmUoXCJoYW5kbGViYXJzXCIpO1xuZnVuY3Rpb24gX19kZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIChvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmopOyB9XG5tb2R1bGUuZXhwb3J0cyA9IChIYW5kbGViYXJzW1wiZGVmYXVsdFwiXSB8fCBIYW5kbGViYXJzKS50ZW1wbGF0ZSh7XCIxXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgYWxpYXMxPWNvbnRhaW5lci5sYW1iZGEsIGFsaWFzMj1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbjtcblxuICByZXR1cm4gXCIgICAgICAgICAgICAgICAgPHRyIGRhdGEtaGVhZGVyLWlkPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8dGQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwiY2hlY2tib3hcXFwiIGNsYXNzPVxcXCJjb2wtc2V0dGluZ3MtaGlkZGVuLWNoZWNrYm94IGd1aSBtLXItMTBcXFwiIHZhbHVlPVxcXCJcIlxuICAgICsgYWxpYXMyKGFsaWFzMSgoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuaWQgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCJcXFwiIFwiXG4gICAgKyBhbGlhczIoX19kZWZhdWx0KHJlcXVpcmUoXCJDOlxcXFxVc2Vyc1xcXFxyb3VzdHVyZ1xcXFxTb3VyY2VcXFxcUmVwb3NcXFxcU2VhcmNoTWFzdGVyXFxcXEdyaWRvb1xcXFxzcmNcXFxcaGJzXFxcXGhlbHBlcnNcXFxcQ2hlY2tlZC50c1wiKSkuY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5oaWRkZW4gOiBkZXB0aDApLHtcIm5hbWVcIjpcIkNoZWNrZWRcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpXG4gICAgKyBcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPC90ZD5cXHJcXG4gICAgICAgICAgICAgICAgPC90cj5cXHJcXG5cIjtcbn0sXCJjb21waWxlclwiOls3LFwiPj0gNC4wLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxO1xuXG4gIHJldHVybiBcIjxkaXYgY2xhc3M9XFxcImd1aSBvZi1oaWRkZW4gcC0xMCBtaW4tdy01MCB3LWF1dG8gZmx1aWQtaCBmbGV4IGNvbHVtbiBjb250YWluZXJcXFwiID5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiY29sLXNldHRpbmdzLWhlYWRlclxcXCIgc3R5bGU9XFxcIndpZHRoOiAxMDAlXFxcIj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImd1aSBtaW5pIGZsdWlkIGljb24gaW5wdXRcXFwiPlxcclxcbiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cXFwiY29sLXNldHRpbmdzLWZpbHRlclxcXCIgdHlwZT1cXFwidGV4dFxcXCIgcGxhY2Vob2xkZXI9XFxcIlNlYXJjaCBmaWx0ZXIuLi5cXFwiPlxcclxcbiAgICAgICAgICAgIDxpIGNsYXNzPVxcXCJzZWFyY2ggaWNvblxcXCI+PC9pPlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJndWkgbS10LTEwXFxcIj5cXHJcXG4gICAgICAgICAgICA8YSBjbGFzcz1cXFwiZ3VpIGxlZnQgc2hvdy1hbGwtY29sdW1uXFxcIj5TaG93IEFsbDwvYT5cXHJcXG4gICAgICAgICAgICA8YSBjbGFzcz1cXFwiZ3VpIHJpZ2h0IGhpZGUtYWxsLWNvbHVtblxcXCI+SGlkZSBBbGw8L2E+XFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImd1aSBjbGVhclxcXCI+PC9kaXY+XFxyXFxuICAgIDwvZGl2PlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJndWkgY2xlYXJcXFwiPjwvZGl2PlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb2wtc2V0dGluZ3MtdGFibGUgZ3VpIGZsdWlkIGgtOTAgb2YtYXV0byBwLTUgbS10LTEwXFxcIiA+XFxyXFxuICAgICAgICA8dGFibGUgY2xhc3M9XFxcImd1aSBzbWFsbCB2ZXJ5IGJvcmRlci1sZXNzIGJhc2ljIGNvbXBhY3QgdGFibGVcXFwiPlxcclxcbiAgICAgICAgICAgIDx0Ym9keT5cXHJcXG5cIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzLmVhY2guY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jb2x1bW5zIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDEsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIiAgICAgICAgICAgIDwvdGJvZHk+XFxyXFxuICAgICAgICA8L3RhYmxlPlxcclxcbiAgICA8L2Rpdj5cXHJcXG48L2Rpdj5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2hicy9ncmlkLW1hbmFnZS1jb2x1bW5zLmhic1xuLy8gbW9kdWxlIGlkID0gMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiLCJjb25zdCBjaGVja2VkID0gKGJvb2w6IGJvb2xlYW4pOiBzdHJpbmcgPT4ge1xyXG4gICAgcmV0dXJuICFib29sID8gXCJjaGVja2VkXCIgOiBcIlwiO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2hlY2tlZDtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy9oYnMvaGVscGVycy9DaGVja2VkLnRzIiwidmFyIEhhbmRsZWJhcnMgPSByZXF1aXJlKFwiaGFuZGxlYmFyc1wiKTtcbmZ1bmN0aW9uIF9fZGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiAob2JqLl9fZXNNb2R1bGUgPyBvYmpbXCJkZWZhdWx0XCJdIDogb2JqKTsgfVxubW9kdWxlLmV4cG9ydHMgPSAoSGFuZGxlYmFyc1tcImRlZmF1bHRcIl0gfHwgSGFuZGxlYmFycykudGVtcGxhdGUoe1wiMVwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgcmV0dXJuIFwiICAgICAgICAgICAgICAgIDxjYXB0aW9uIGNsYXNzPVxcXCJndWkgZ3VpLXN1YmhlYWRpbmctMiBtLTAgcC0wIHRleHQtbGVmdFxcXCI+XCJcbiAgICArIGNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uKGNvbnRhaW5lci5sYW1iZGEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNhcHRpb24gOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCI8L2NhcHRpb24+XFxuXCI7XG59LFwiM1wiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMTtcblxuICByZXR1cm4gXCIgICAgICAgICAgICAgICAgICAgIFwiXG4gICAgKyAoKHN0YWNrMSA9IF9fZGVmYXVsdChyZXF1aXJlKFwiQzpcXFxcVXNlcnNcXFxccm91c3R1cmdcXFxcU291cmNlXFxcXFJlcG9zXFxcXFNlYXJjaE1hc3RlclxcXFxHcmlkb29cXFxcc3JjXFxcXGhic1xcXFxoZWxwZXJzXFxcXENvbHVtbi50c1wiKSkuY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLGRlcHRoMCx7XCJuYW1lXCI6XCJDb2x1bW5cIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCJcXG5cIjtcbn0sXCI1XCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxLCBhbGlhczE9Y29udGFpbmVyLmxhbWJkYSwgYWxpYXMyPWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uO1xuXG4gIHJldHVybiBcIiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz1cXFwiZ3VpIGN1cnNvci1wb2ludGVyXFxcIiBpZD1cXFwiaGVhZGVyLVwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5pZCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCIgZGF0YS1oZWFkZXItaWQ9XFxcIlwiXG4gICAgKyBhbGlhczIoYWxpYXMxKChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5pZCA6IGRlcHRoMCksIGRlcHRoMCkpXG4gICAgKyBcIlxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJndWkgc3ViIGhlYWRlclxcXCI+XCJcbiAgICArIGFsaWFzMihhbGlhczEoKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApLCBkZXB0aDApKVxuICAgICsgXCI8L3NwYW4+XFxuXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVyc1tcImlmXCJdLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuc29ydGFibGUgOiBkZXB0aDApLHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDYsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+XFxuXCI7XG59LFwiNlwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMTtcblxuICByZXR1cm4gXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXG4gICAgKyAoKHN0YWNrMSA9IF9fZGVmYXVsdChyZXF1aXJlKFwiQzpcXFxcVXNlcnNcXFxccm91c3R1cmdcXFxcU291cmNlXFxcXFJlcG9zXFxcXFNlYXJjaE1hc3RlclxcXFxHcmlkb29cXFxcc3JjXFxcXGhic1xcXFxoZWxwZXJzXFxcXE9yZGVyZWQudHNcIikpLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAub3JkZXIgOiBkZXB0aDApLHtcIm5hbWVcIjpcIk9yZGVyZWRcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKVxuICAgICsgXCJcXG5cIjtcbn0sXCJjb21waWxlclwiOls3LFwiPj0gNC4wLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgc3RhY2sxLCBhbGlhczE9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KTtcblxuICByZXR1cm4gXCI8c3R5bGU+XFxuICAgIC5pbm5lci1jb250YWluZXIge1xcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gICAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIH1cXG4gICAgLnRhYmxlLWhlYWRlciB7XFxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgICAgICB0b3A6MCAhaW1wb3J0YW50O1xcbiAgICB9XFxuICAgIC50YWJsZS1ib2R5IHtcXG4gICAgICAgIG92ZXJmbG93OiBhdXRvO1xcbiAgICAgICAgZmxleDogNTtcXG4gICAgfVxcbiAgICAubWFyZ2luLWF1dG97XFxuICAgICAgICBtYXJnaW46IGF1dG8gIWltcG9ydGFudDtcXG4gICAgfVxcbiAgICAuYm9yZGVyLWxlc3MgdHIgdGQsLmJvcmRlci1sZXNzIHsgYm9yZGVyOiAwcHggIWltcG9ydGFudDsgfVxcbiAgICAudWkuc3VwZXJjb21wYWN0Lmljb24uYnV0dG9uLCAudWkuc3VwZXJjb21wYWN0Lmljb24uYnV0dG9ucyAuYnV0dG9uIHtcXG4gICAgICAgIHBhZGRpbmc6IC4zZW0gLjNlbSAuM2VtIC4zZW0gIWltcG9ydGFudDtcXG4gICAgfVxcbjwvc3R5bGU+XFxuPGRpdiBjbGFzcz1cXFwiaW5uZXItY29udGFpbmVyIGd1aSBmbHVpZCBjb250YWluZXJcXFwiIHN0eWxlPVxcXCJwYWRkaW5nOjAlO1xcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcInRhYmxlLWhlYWRlclxcXCI+XFxuICAgICAgICA8dGFibGUgaWQ9XFxcImhlYWRlcnRhYmxlXFxcIiBjbGFzcz1cXFwiZ3VpIGJhc2ljIGxhcmdlIGNvbXBhY3Qgc29ydGFibGUgZml4ZWQgc2luZ2xlIGxpbmUgdGFibGVcXFwiPlxcblwiXG4gICAgKyAoKHN0YWNrMSA9IGhlbHBlcnNbXCJpZlwiXS5jYWxsKGFsaWFzMSwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY2FwdGlvbiA6IGRlcHRoMCkse1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMSwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiICAgICAgICAgICAgPGNvbGdyb3VwIGNsYXNzPVxcXCJoZWFkZXJDb2xHcm91cFxcXCI+XFxuICAgICAgICAgICAgICAgIDxjb2wgc3R5bGU9XFxcIndpZHRoOjQwcHg7XFxcIiAvPlxcbiAgICAgICAgICAgICAgICA8Y29sIHN0eWxlPVxcXCJ3aWR0aDo0MHB4O1xcXCIgLz5cXG5cIlxuICAgICsgKChzdGFjazEgPSBoZWxwZXJzLmVhY2guY2FsbChhbGlhczEsKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNvbHVtbnMgOiBkZXB0aDApLHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMywgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiICAgICAgICAgICAgPC9jb2xncm91cD5cXG4gICAgICAgICAgICA8dGhlYWQ+XFxuICAgICAgICAgICAgICAgIDx0cj5cXG4gICAgICAgICAgICAgICAgICAgIDx0aD48L3RoPlxcbiAgICAgICAgICAgICAgICAgICAgPHRoPjxpbnB1dCB0eXBlPVxcXCJjaGVja2JveFxcXCIgY2xhc3M9XFxcInNlbGVjdC1hbGwtY2hlY2tib3ggY3Vyc29yLXBvaW50ZXJcXFwiPjwvdGg+XFxuXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jb2x1bW5zIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDUsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIiAgICAgICAgICAgICAgICA8L3RyPlxcbiAgICAgICAgICAgIDwvdGhlYWQ+XFxuICAgICAgICA8L3RhYmxlPlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwidGFibGUtYm9keVxcXCI+XFxuICAgICAgICA8dGFibGUgY2xhc3M9XFxcImd1aSBiYXNpYyBsYXJnZSBjb21wYWN0IGZpeGVkIHNlbGVjdGFibGUgc2luZ2xlIGxpbmUgdGFibGUgbWFpblRhYmxlXFxcIj5cXG4gICAgICAgICAgICA8Y29sZ3JvdXAgY2xhc3M9XFxcImJvZHlDb2xHcm91cFxcXCI+XFxuICAgICAgICAgICAgICAgIDxjb2wgc3R5bGU9XFxcIndpZHRoOjQwcHg7XFxcIiAvPiBcXG4gICAgICAgICAgICAgICAgPGNvbCBzdHlsZT1cXFwid2lkdGg6NDBweDtcXFwiIC8+XFxuXCJcbiAgICArICgoc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoYWxpYXMxLChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jb2x1bW5zIDogZGVwdGgwKSx7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOmNvbnRhaW5lci5wcm9ncmFtKDMsIGRhdGEsIDApLFwiaW52ZXJzZVwiOmNvbnRhaW5lci5ub29wLFwiZGF0YVwiOmRhdGF9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIiAgICAgICAgICAgIDwvY29sZ3JvdXA+XFxuICAgICAgICAgICAgPHRib2R5IGNsYXNzPVxcXCJtYWluVGFibGVCb2R5XFxcIj5cXG5cIlxuICAgICsgKChzdGFjazEgPSBjb250YWluZXIuaW52b2tlUGFydGlhbChyZXF1aXJlKFwiQzpcXFxcVXNlcnNcXFxccm91c3R1cmdcXFxcU291cmNlXFxcXFJlcG9zXFxcXFNlYXJjaE1hc3RlclxcXFxHcmlkb29cXFxcc3JjXFxcXGhic1xcXFxncmlkLW1haW4tcm93Lmhic1wiKSxkZXB0aDAse1wibmFtZVwiOlwiZ3JpZC1tYWluLXJvd1wiLFwiZGF0YVwiOmRhdGEsXCJpbmRlbnRcIjpcIiAgICAgICAgICAgICAgICBcIixcImhlbHBlcnNcIjpoZWxwZXJzLFwicGFydGlhbHNcIjpwYXJ0aWFscyxcImRlY29yYXRvcnNcIjpjb250YWluZXIuZGVjb3JhdG9yc30pKSAhPSBudWxsID8gc3RhY2sxIDogXCJcIilcbiAgICArIFwiICAgICAgICAgICAgPC90Ym9keT5cXG4gICAgICAgIDwvdGFibGU+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJ0YWJsZS1mb290ZXIgZ3VpIGgtYXV0byBmbHVpZC13IGZsZXggamMtc2IgcC01IG0tMFxcXCI+XFxuXCJcbiAgICArICgoc3RhY2sxID0gY29udGFpbmVyLmludm9rZVBhcnRpYWwocmVxdWlyZShcIkM6XFxcXFVzZXJzXFxcXHJvdXN0dXJnXFxcXFNvdXJjZVxcXFxSZXBvc1xcXFxTZWFyY2hNYXN0ZXJcXFxcR3JpZG9vXFxcXHNyY1xcXFxoYnNcXFxcZ3JpZC1mb290ZXIuaGJzXCIpLGRlcHRoMCx7XCJuYW1lXCI6XCJncmlkLWZvb3RlclwiLFwiZGF0YVwiOmRhdGEsXCJpbmRlbnRcIjpcIiAgICAgICAgICAgXCIsXCJoZWxwZXJzXCI6aGVscGVycyxcInBhcnRpYWxzXCI6cGFydGlhbHMsXCJkZWNvcmF0b3JzXCI6Y29udGFpbmVyLmRlY29yYXRvcnN9KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpXG4gICAgKyBcIiAgICA8L2Rpdj5cXG48L2Rpdj5cIjtcbn0sXCJ1c2VQYXJ0aWFsXCI6dHJ1ZSxcInVzZURhdGFcIjp0cnVlfSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvaGJzL2dyaWQuaGJzXG4vLyBtb2R1bGUgaWQgPSAyNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsImNvbnN0IENvbHVtbiA9IChjb2wpOiBzdHJpbmcgPT4ge1xyXG4gICAgY29uc3QgY2FsY1dpZHRoOiBudW1iZXIgPSBjb2wuaGlkZGVuID8gMCA6IGNvbC53aWR0aDtcclxuICAgIGNvbnN0IGRhdGFBdHRySWQgPSAnZGF0YS1oZWFkZXItaWQ9XCInICsgY29sLmlkICsgJ1wiJztcclxuICAgIHJldHVybiAnPGNvbCBzdHlsZT1cIndpZHRoIDogJyArIGNhbGNXaWR0aCArICdweDtcIicgKyBkYXRhQXR0cklkICsgXCIgLz5cIjtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbHVtbjtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy9oYnMvaGVscGVycy9Db2x1bW4udHMiLCJpbXBvcnQgeyBHcmlkT3JkZXJEaXJlY3Rpb24gfSBmcm9tIFwiLi4vLi4vanMvbW9kZWxzL0dyaWRPcmRlckRpcmVjdGlvblwiO1xyXG5cclxuY29uc3Qgb3JkZXJlZCA9IChvcmRlcjogR3JpZE9yZGVyRGlyZWN0aW9uKTogc3RyaW5nID0+IHtcclxuICAgIGlmIChvcmRlciA9PT0gR3JpZE9yZGVyRGlyZWN0aW9uLkFzYykge1xyXG4gICAgICAgIHJldHVybiBcIjxpIGNsYXNzPVxcXCJndWkgZ3VpLWljb24gZ3VpLWljb24tYXJyb3ctdXBcXFwiID48L2k+IFwiO1xyXG4gICAgfSBlbHNlIGlmIChvcmRlciA9PT0gR3JpZE9yZGVyRGlyZWN0aW9uLkRlc2MpIHtcclxuICAgICAgICByZXR1cm4gXCI8aSBjbGFzcz1cXFwiZ3VpIGd1aS1pY29uIGd1aS1pY29uLWFycm93LWRvd25cXFwiID48L2k+IFwiO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gXCI8aSBjbGFzcz1cXFwiZ3VpIGd1aS1pY29uIGd1aS1pY29uLWFycm93LXVwIGd1aS1oaWRkZW5cXFwiIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIiA+PC9pPiBcIiArXHJcbiAgICAgICAgICAgICAgIFwiPGkgY2xhc3M9XFxcImd1aSBndWktaWNvbiBndWktaWNvbi1hcnJvdy1kb3duIGd1aS1oaWRkZW5cXFwiIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIiA+PC9pPlwiO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgb3JkZXJlZDtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3RzbGludC1sb2FkZXI/P3JlZi0tMSEuL3NyYy9oYnMvaGVscGVycy9PcmRlcmVkLnRzIl0sInNvdXJjZVJvb3QiOiIifQ==